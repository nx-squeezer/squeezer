var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/directives/InputTextControlValueAccessorDirective.html",[0,0.498,1,1.58]],["body/directives/InputTextControlValueAccessorDirective.html",[0,0.795,1,2.522,2,1.121,3,0.643,4,0.643,5,0.552,6,2.074,7,1.148,8,2.074,9,2.735,10,0.932,11,1.739,12,0.643,13,2.854,14,3.556,15,1.543,16,3.003,17,1.288,18,3.556,19,0.054,20,3.556,21,3.556,22,4.065,23,1.772,24,3.556,25,1.772,26,1.343,27,2.048,28,3.556,29,0.392,30,0.885,31,1.742,32,2.059,33,2.854,34,3.264,35,2.854,36,1.175,37,2.182,38,2.854,39,2.854,40,3.976,41,1.636,42,2.584,43,1.772,44,1.543,45,1.739,46,1.772,47,1.739,48,1.739,49,1.168,50,1.539,51,2.074,52,2.584,53,1.288,54,2.074,55,2.074,56,1.739,57,2.074,58,1.288,59,1.488,60,1.175,61,1.022,62,0.833,63,1.175,64,2.074,65,2.584,66,2.074,67,2.074,68,1.121,69,1.739,70,2.048,71,2.393,72,2.854,73,2.584,74,2.341,75,2.074,76,2.074,77,2.584,78,1.346,79,2.074,80,2.584,81,2.393,82,2.393,83,2.074,84,2.074,85,2.584,86,2.074,87,2.074,88,0.743,89,1.288,90,1.488,91,2.584,92,0.885,93,0.978,94,2.048,95,0.743,96,1.739,97,2.584,98,2.584,99,0.643,100,0.643,101,0.035,102,0.035]],["title/classes/SignalControlContainer.html",[100,0.682,103,1.367]],["body/classes/SignalControlContainer.html",[3,0.412,4,0.412,5,0.354,7,0.903,10,0.951,12,0.412,15,1.113,19,0.055,29,0.251,30,0.88,31,1.513,32,1.945,36,0.848,37,1.763,41,1.564,43,2.176,44,1.833,46,1.279,49,1.214,50,1.793,53,1.279,60,1.338,61,0.903,62,0.813,63,1.038,68,1.113,69,1.45,78,0.971,88,1.408,89,2.106,92,1.007,93,1.45,95,0.476,99,0.412,100,0.781,101,0.025,102,0.025,103,1.279,104,0.825,105,2.082,106,1.329,107,2.522,108,2.06,109,2.938,110,1.316,111,2.114,112,2.522,113,2.433,114,2.126,115,2.06,116,2.522,117,2.381,118,2.381,119,2.381,120,2.06,121,2.06,122,2.06,123,1.655,124,2.06,125,2.06,126,2.06,127,3.451,128,2.925,129,1.655,130,2.06,131,2.06,132,2.06,133,1.34,134,2.84,135,2.06,136,1.655,137,2.381,138,1.726,139,1.726,140,1.535,141,2.84,142,2.283,143,2.06,144,2.06,145,2.06,146,1.726,147,1.477,148,2.06,149,2.06,150,2.06,151,1.189,152,2.06,153,2.06,154,2.06,155,0.971,156,1.655,157,1.279,158,2.06,159,1.655,160,1.726,161,1.477,162,1.726,163,2.06,164,2.082,165,1.655,166,2.84,167,1.338,168,1.329,169,3.251,170,1.655,171,2.06,172,2.06,173,1.655,174,1.655,175,1.655,176,1.655,177,1.477,178,2.06,179,1.655,180,2.06,181,1.655,182,0.953,183,0.953,184,1.114,185,1.477,186,0.547,187,0.547,188,1.329,189,1.329,190,1.329,191,2.566,192,1.655,193,0.953,194,1.655,195,0.825,196,1.655,197,1.655,198,1.655,199,0.825,200,3.391,201,3.538,202,1.655,203,1.655,204,1.655,205,1.655,206,1.655,207,1.655,208,1.655,209,1.655]],["title/directives/SignalControlDirective.html",[0,0.498,110,0.788]],["body/directives/SignalControlDirective.html",[0,0.464,2,0.418,3,0.24,4,0.24,5,0.206,7,1.102,10,0.955,12,0.41,15,0.938,17,0.481,19,0.055,23,0.822,25,1.275,26,0.714,27,0.95,29,0.146,30,0.41,31,1.761,32,1.11,36,0.545,37,1.562,41,1.539,43,1.76,44,1.658,45,1.11,46,1.562,47,1.11,48,1.11,49,0.963,50,1.337,53,1.275,58,0.822,59,0.555,60,0.545,61,0.277,62,0.83,63,0.319,68,1.6,69,1.749,70,0.95,71,1.722,72,2.516,74,1.656,78,0.625,81,0.649,88,1.407,89,2.231,90,1.245,92,0.917,93,1.396,94,2.201,95,0.277,99,0.24,100,0.538,101,0.016,102,0.016,103,0.822,105,2.038,109,2.376,110,0.621,111,1.454,113,2.034,114,1.6,117,1.722,118,1.722,119,1.722,127,2.376,128,1.805,133,1.287,137,2.376,138,2.109,139,2.109,142,1.838,146,1.11,147,1.473,151,1.715,155,1.268,157,1.562,160,1.11,161,0.95,162,1.722,164,1.11,167,1.44,177,1.929,182,0.555,184,1.454,185,0.95,186,0.319,187,0.714,188,0.774,189,0.774,190,0.774,193,2.201,195,2.016,199,0.481,210,0.774,211,1.735,212,1.935,213,1.905,214,2.034,215,2.308,216,1.838,217,0.901,218,0.774,219,0.964,220,2.835,221,1.324,222,1.324,223,1.077,224,1.656,225,0.964,226,1.649,227,1.649,228,1.649,229,1.649,230,2.835,231,0.964,232,0.964,233,0.964,234,1.454,235,0.964,236,1.935,237,0.964,238,1.735,239,0.964,240,1.735,241,1.324,242,1.935,243,1.324,244,0.964,245,1.324,246,1.11,247,1.324,248,1.324,249,1.324,250,1.656,251,2.516,252,1.454,253,1.935,254,1.324,255,0.964,256,1.324,257,1.324,258,1.669,259,1.324,260,1.324,261,1.324,262,0.818,263,1.324,264,1.324,265,1.324,266,0.822,267,1.324,268,0.964,269,2.054,270,0.964,271,1.11,272,1.324,273,0.964,274,2.516,275,1.324,276,1.324,277,0.964,278,2.382,279,1.324,280,2.054,281,1.324,282,1.324,283,1.324,284,1.324,285,0.964,286,1.324,287,1.649,288,0.964,289,0.964,290,1.649,291,0.964,292,1.735,293,0.964,294,0.964,295,1.735,296,1.454,297,1.324,298,1.245,299,1.245,300,1.805,301,1.245,302,1.324,303,0.964,304,1.11,305,0.964,306,1.11,307,0.774,308,0.964,309,0.555,310,0.964,311,0.555,312,0.964,313,0.649,314,0.774,315,0.964,316,0.964,317,0.964,318,0.964,319,0.964,320,0.964,321,1.649,322,0.964,323,1.649,324,0.649,325,0.964,326,0.964,327,0.964,328,1.722,329,0.964,330,1.649,331,0.964,332,1.649,333,0.774,334,0.964,335,0.964,336,0.964,337,0.964,338,0.964,339,0.964,340,0.964,341,0.964,342,0.964,343,0.964,344,0.964,345,0.964,346,0.964,347,0.964,348,0.964,349,0.964,350,0.964,351,0.964,352,0.964,353,0.964,354,0.964,355,0.964,356,0.964,357,0.964,358,1.11,359,0.964,360,0.964,361,0.964,362,0.964,363,0.964,364,0.964,365,0.964,366,0.964,367,0.964,368,0.964,369,0.964,370,0.964,371,0.964,372,0.964,373,0.964,374,0.964,375,0.964,376,0.964,377,0.964]],["title/components/SignalControlErrorComponent.html",[378,1.58,379,1.846]],["body/components/SignalControlErrorComponent.html",[0,0.636,1,2.019,2,1.521,3,0.872,4,0.872,5,0.749,10,0.894,12,0.872,17,1.748,19,0.053,23,2.607,25,2.164,26,1.434,59,2.019,61,1.355,82,2.921,92,0.872,95,1.008,99,0.872,100,0.872,101,0.042,102,0.042,110,1.008,140,1.884,213,2.164,217,1.355,378,2.917,379,3.316,380,4.342,381,3.506,382,2.815,383,2.815,384,2.921,385,4.342,386,4.342,387,3.173,388,4.342,389,3.506,390,3.506,391,4.342,392,4.928,393,3.506,394,3.506,395,3.506,396,2.019,397,2.815,398,3.506,399,2.019,400,2.815,401,3.506]],["title/directives/SignalControlErrorDirective.html",[0,0.498,396,1.58]],["body/directives/SignalControlErrorDirective.html",[0,0.916,2,1.079,3,0.619,4,0.619,5,0.531,7,0.531,10,0.904,12,0.619,17,1.239,19,0.055,23,1.726,25,1.726,26,1.423,27,1.994,29,0.377,30,0.861,31,1.589,32,1.079,36,1.144,41,1.316,49,0.995,58,2.257,60,1.423,61,0.995,62,0.904,63,1.144,69,0.942,70,1.994,92,0.991,94,1.432,95,0.715,99,0.619,100,0.619,101,0.034,102,0.034,105,1.869,133,1.238,140,1.502,151,1.311,161,1.432,182,1.432,185,1.432,187,0.822,193,1.432,217,1.41,224,2.294,230,1.996,262,0.942,278,2.294,296,1.673,306,2.33,314,1.996,324,2.899,328,1.673,396,2.826,397,2.78,402,1.996,403,4.308,404,3.463,405,4.529,406,4.689,407,3.984,408,3.984,409,2.487,410,4.689,411,2.487,412,2.33,413,3.984,414,4.811,415,4.308,416,2.487,417,2.487,418,2.487,419,3.463,420,3.463,421,2.487,422,3.463,423,2.487,424,2.899,425,1.673,426,2.487,427,2.487,428,2.487,429,2.487,430,2.487,431,2.487,432,2.487,433,3.463,434,2.487,435,2.487,436,3.984,437,1.432,438,2.487,439,4.308,440,2.487,441,2.487,442,1.996,443,2.487,444,2.487,445,3.463,446,2.487,447,2.487]],["title/classes/SignalControlValueAccessor.html",[16,1.58,100,0.682]],["body/classes/SignalControlValueAccessor.html",[0,0.751,3,0.566,4,0.566,5,0.486,7,1.157,10,0.977,11,1.531,12,0.566,13,2.61,16,1.873,19,0.055,26,1.074,29,0.345,30,0.809,31,1.762,32,2.149,33,3.046,34,3.657,35,3.046,36,1.074,37,2.064,38,2.61,39,2.61,41,1.584,43,2.064,44,1.797,45,2.188,46,1.621,47,2.188,48,2.188,49,1.091,50,1.725,51,2.61,53,1.621,54,2.61,55,2.61,56,2.188,57,2.61,58,1.621,59,1.873,60,1.074,61,0.935,62,0.827,63,1.074,64,2.61,66,2.61,67,2.61,68,1.411,69,1.659,74,2.384,75,2.61,76,2.61,78,1.568,79,2.61,81,2.188,82,2.786,83,2.61,84,2.61,86,2.61,87,2.61,88,1.309,89,1.891,90,2.185,92,0.809,93,0.861,95,0.654,99,0.566,100,0.566,101,0.032,102,0.032,104,1.134,105,2.118,107,3.324,110,0.654,133,0.654,151,1.231,182,1.31,183,1.31,234,2.553,304,1.531,306,2.188,328,1.531,424,2.188,448,2.275,449,2.275,450,2.275,451,2.275,452,2.275,453,2.275,454,2.275,455,2.275,456,2.275,457,2.275,458,2.275,459,2.275,460,2.275,461,2.275,462,2.275,463,2.275,464,2.275,465,2.275,466,2.275,467,2.275,468,2.275,469,2.275]],["title/directives/SignalFormGroupDirective.html",[0,0.498,399,1.58]],["body/directives/SignalFormGroupDirective.html",[0,0.562,2,0.567,3,0.325,4,0.325,5,0.279,7,1.105,10,0.916,12,0.325,15,1.166,17,0.651,19,0.055,23,1.06,25,1.34,26,0.702,27,1.224,29,0.198,30,0.669,31,1.74,32,1.585,36,0.702,37,1.34,40,4.068,41,1.681,43,1.543,44,1.344,46,1.06,49,1.279,50,1.383,53,1.06,58,0.651,60,1.409,61,0.979,62,0.92,63,1.126,68,1.344,69,1.872,70,1.224,71,1.809,74,1.548,78,0.805,88,1.338,89,2.068,90,1.224,92,0.77,93,1.458,94,1.963,95,0.376,99,0.325,100,0.325,101,0.021,102,0.021,103,2,105,0.923,109,2.7,110,1.45,111,1.431,112,1.707,113,1.783,114,1.741,115,1.707,116,1.707,117,1.809,118,1.809,119,1.809,120,1.707,121,1.049,122,1.049,124,1.049,125,1.049,126,1.049,127,3.169,128,2.608,130,1.049,131,1.049,132,1.049,133,1.279,134,1.707,135,1.049,137,2.084,138,1.431,139,1.431,140,1.851,141,3.222,142,2.068,143,1.049,144,1.049,145,1.049,146,0.879,147,1.224,148,1.049,149,1.049,150,1.049,151,1.615,152,1.049,153,1.049,154,1.049,155,1.173,157,1.34,158,1.049,160,0.879,161,0.753,162,1.431,163,1.049,164,2.065,166,1.707,167,1.586,168,1.049,169,2.486,171,1.049,172,1.049,177,1.783,178,1.049,180,1.049,185,0.753,186,0.432,187,0.702,195,1.543,200,1.707,211,2.158,212,1.809,213,1.699,214,1.783,215,2.158,216,1.699,217,0.772,218,1.049,220,2.486,221,1.049,222,1.049,223,0.651,224,0.753,234,1.809,236,1.809,238,1.049,240,1.049,241,1.049,242,1.431,243,1.049,245,1.049,246,0.879,247,1.049,248,1.049,249,1.049,250,1.224,251,1.049,252,0.879,253,1.431,254,1.049,256,1.049,257,1.049,258,1.34,259,1.049,260,1.049,261,1.049,262,0.495,263,1.049,264,1.049,265,1.049,266,0.651,267,1.049,269,1.707,271,0.879,272,1.049,274,2.158,275,1.049,276,1.049,278,1.548,279,1.049,280,1.707,281,1.049,282,1.049,283,1.049,284,1.049,286,1.049,292,1.049,295,1.049,296,0.879,297,1.049,298,0.753,299,0.753,300,1.224,301,0.753,302,1.049,304,0.879,307,1.049,324,0.879,399,1.224,400,2.932,424,1.431,470,1.049,471,2.126,472,1.307,473,1.707,474,1.307,475,1.307,476,1.307,477,1.307,478,1.307,479,1.307,480,1.307,481,1.307,482,1.307,483,1.307,484,1.307,485,1.307,486,1.307,487,1.307,488,1.307,489,1.307,490,1.307,491,1.307,492,1.307,493,1.307,494,1.307,495,1.307,496,1.307,497,1.307,498,1.307,499,1.307,500,1.307,501,0.879,502,1.307,503,0.879,504,1.049,505,2.126,506,1.307,507,1.307,508,1.049,509,2.126,510,1.049,511,1.307]],["title/interfaces/SignalInterceptor.html",[512,1.039,513,1.58]],["body/interfaces/SignalInterceptor.html",[3,0.852,4,0.852,5,0.732,7,0.732,12,0.852,19,0.055,29,0.52,36,1.414,41,1.132,49,1.23,50,1.767,78,1.297,88,1.341,92,0.852,93,1.62,95,0.985,99,1.064,101,0.042,102,0.042,133,0.985,151,1.297,311,2.464,358,2.305,512,1.767,513,2.687,514,1.973,515,2.879,516,2.305,517,4.279,518,4.279,519,4.279,520,4.279,521,4.119,522,3.426,523,4.279,524,4.279,525,2.75,526,2.75,527,2.75,528,2.75,529,1.857,530,2.75,531,2.75,532,4.279,533,3.435,534,4.279,535,4.667,536,3.426]],["title/interfaces/SignalValidationResult.html",[262,1.039,512,1.039]],["body/interfaces/SignalValidationResult.html",[3,0.714,4,0.714,5,0.613,10,0.888,12,0.714,15,2.066,19,0.055,26,0.948,29,0.436,30,0.95,31,1.74,62,0.956,92,0.714,96,1.931,99,1.184,101,0.042,102,0.037,110,1.314,133,0.825,155,1.087,157,2.279,164,1.245,167,1.714,183,1.653,186,1.417,187,1.697,214,2.198,216,2.138,217,1.368,223,1.431,258,1.431,262,1.624,266,2.373,298,2.198,299,2.47,300,2.633,301,2.741,309,1.653,412,3.077,437,1.653,512,1.446,514,1.653,529,1.245,537,1.653,538,1.653,539,2.886,540,3.444,541,2.304,542,1.931,543,2.886,544,2.569,545,2.886,546,1.931,547,1.931,548,2.304]],["title/interfaces/SignalValidator.html",[186,0.906,512,1.039]],["body/interfaces/SignalValidator.html",[3,0.702,4,0.702,5,0.603,7,0.603,10,0.685,12,0.702,15,2.054,19,0.055,26,1.246,29,0.428,30,0.939,31,1.755,36,1.246,41,0.932,49,0.811,60,0.932,61,0.811,62,0.953,63,0.932,92,0.702,96,1.898,99,1.177,101,0.042,102,0.037,110,1.084,133,1.084,155,1.429,157,1.881,164,1.224,167,1.708,183,1.624,186,1.5,187,1.691,214,1.624,216,2.119,217,1.305,223,1.406,258,1.406,262,1.429,266,2.359,298,2.173,299,2.449,300,2.615,301,2.725,309,1.624,412,3.055,437,2.173,512,1.429,514,1.624,529,1.637,537,2.173,538,1.624,539,2.539,540,3.414,541,3.645,542,2.539,543,2.861,544,2.539,545,2.861,546,1.898,547,1.898,548,2.264,549,2.82]],["title/coverage.html",[550,2.973]],["body/coverage.html",[0,0.863,1,1.829,5,0.679,6,2.55,7,0.963,8,2.55,9,2.137,10,0.929,11,2.745,16,1.829,19,0.054,62,0.576,100,1.015,101,0.04,102,0.04,103,1.583,105,2.134,106,2.55,110,0.913,114,1.378,140,1.378,186,1.049,199,1.583,210,2.55,217,0.913,250,1.829,262,1.203,311,1.829,313,2.137,378,1.829,379,2.137,382,2.55,383,2.55,396,1.829,399,1.829,402,2.55,425,2.137,470,2.55,501,2.137,503,2.137,512,1.706,513,1.829,515,2.745,516,3.032,529,1.955,537,2.349,538,2.349,550,2.55,551,3.176,552,3.176,553,3.176,554,5.458,555,5.237,556,4.079,557,3.176,558,4.506,559,3.176,560,3.176,561,2.55,562,3.176,563,2.55,564,2.55,565,3.275,566,2.55,567,4.918,568,2.55,569,2.55,570,2.55,571,2.55,572,3.275,573,2.55,574,2.55,575,3.176,576,3.176]],["title/dependencies.html",[577,1.855,578,2.64]],["body/dependencies.html",[19,0.052,95,1.207,101,0.047,102,0.047,578,3.881,579,4.198,580,4.198,581,4.198,582,4.835,583,4.198]],["title/miscellaneous/functions.html",[584,1.003,585,2.64]],["body/miscellaneous/functions.html",[7,1,19,0.052,29,0.524,49,1.449,50,1.856,60,1.547,61,1.346,62,0.85,63,1.547,78,1.307,88,1.449,93,1.947,101,0.042,102,0.042,108,2.771,164,1.866,167,1.42,199,1.721,250,2.476,253,2.893,311,2.476,358,2.893,473,2.771,501,2.893,503,3.151,504,2.771,508,2.771,510,2.771,513,1.988,515,2.323,516,3.298,521,2.771,525,2.771,526,2.771,527,3.452,528,2.771,529,1.498,530,2.771,531,2.771,533,3.452,561,2.771,563,2.771,564,3.452,584,1.498,585,2.771,586,3.452,587,3.452,588,3.452,589,3.452,590,3.452,591,4.683,592,3.452,593,3.452,594,3.452,595,3.452,596,3.452,597,3.452,598,3.452]],["title/index.html",[29,0.351,599,2.311,600,2.311]],["body/index.html",[19,0.047,88,1.378,101,0.047,102,0.047,387,3.227,601,4.796,602,4.14,603,4.14,604,4.796,605,4.14,606,4.796,607,4.796,608,4.14,609,4.14,610,4.14]],["title/modules.html",[611,2.973]],["body/modules.html",[19,0.048,101,0.048,102,0.048,611,3.46]],["title/overview.html",[612,2.973]],["body/overview.html",[2,1.835,19,0.047,101,0.047,102,0.047,104,2.107,378,2.435,514,2.435,612,3.394,613,4.228,614,4.228,615,4.228,616,4.228]],["title/properties.html",[30,0.818,577,1.855]],["body/properties.html",[19,0.05,30,1.064,101,0.048,102,0.048,617,4.279,618,4.279]],["title/miscellaneous/typealiases.html",[584,1.003,619,3.288]],["body/miscellaneous/typealiases.html",[0,0.618,10,0.962,19,0.048,29,0.517,62,0.943,101,0.045,102,0.042,104,1.698,114,2.02,140,1.478,142,1.698,155,1.29,167,1.125,184,2.869,187,1.538,195,2.125,212,2.292,213,1.698,216,2.32,217,1.225,223,2.125,242,2.869,246,2.869,252,2.869,258,2.125,271,2.869,309,2.455,384,2.292,529,1.478,537,2.809,538,2.809,539,2.292,543,3.132,544,2.869,545,3.132,546,2.292,547,2.292,584,1.478,620,3.406,621,4.264,622,4.654,623,3.423,624,4.113,625,4.264,626,4.264,627,3.423,628,4.264,629,3.406,630,4.654,631,3.406,632,2.734,633,3.406,634,2.734,635,3.406,636,2.734]],["title/miscellaneous/variables.html",[584,1.003,637,2.64]],["body/miscellaneous/variables.html",[7,1.074,9,2.611,10,0.926,19,0.054,29,0.446,44,1.683,56,1.979,62,0.534,68,1.683,69,1.866,88,1.115,101,0.038,102,0.038,104,1.934,113,2.234,114,2.003,128,2.5,133,1.327,142,1.934,147,1.694,151,1.114,155,1.469,167,1.282,177,2.234,186,1.434,187,1.434,193,1.694,195,1.934,199,2.164,213,1.466,217,1.248,224,1.694,236,1.979,266,1.466,278,2.5,313,2.611,333,2.361,384,1.979,387,3.382,425,2.611,437,2.234,442,2.361,542,2.611,565,3.115,566,3.115,568,3.115,569,2.361,570,3.115,571,3.706,572,2.361,573,3.852,574,3.485,584,1.276,623,2.361,624,3.115,627,2.361,632,3.115,634,2.361,636,2.361,637,2.361,638,2.941,639,3.88,640,3.88,641,2.941,642,2.941,643,2.941,644,2.941,645,2.941,646,2.941,647,2.941,648,2.941,649,3.88,650,3.88,651,3.88,652,3.88,653,3.88,654,2.941,655,2.941,656,3.88,657,3.88,658,2.941]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":147,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":618,"title":{},"body":{"properties.html":{}}}],["1",{"_index":613,"title":{},"body":{"overview.html":{}}}],["1/1",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["13/13",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["17.2.0",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":615,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["23/23",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["29/29",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":616,"title":{},"body":{"overview.html":{}}}],["4",{"_index":614,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["__namedparameters",{"_index":594,"title":{},"body":{"miscellaneous/functions.html":{}}}],["abstract",{"_index":107,"title":{},"body":{"classes/SignalControlContainer.html":{},"classes/SignalControlValueAccessor.html":{}}}],["accessor",{"_index":13,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["accessor.directive",{"_index":97,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["accessor.directive.ts",{"_index":11,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"coverage.html":{}}}],["accessor.directive.ts:12",{"_index":449,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["accessor.directive.ts:19",{"_index":450,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["accessor.directive.ts:24",{"_index":451,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["accessor.directive.ts:29",{"_index":448,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["accessor.directive.ts:34",{"_index":452,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["accessor.directive.ts:40",{"_index":454,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["accessor.directive.ts:47",{"_index":455,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["accessor.directive.ts:55",{"_index":453,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["accessors/input",{"_index":8,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"coverage.html":{}}}],["actual_component",{"_index":401,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["addcontrol",{"_index":115,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["addcontrol(key",{"_index":163,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["added",{"_index":636,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["adds",{"_index":166,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["aggregate",{"_index":248,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["alias",{"_index":71,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["aliases",{"_index":620,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowsignalwrites",{"_index":341,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["ancestor",{"_index":249,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["angular",{"_index":440,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["angular/common",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":95,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"dependencies.html":{}}}],["any)[signal_control_container",{"_index":331,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["any)[signal_control_key",{"_index":334,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["applied",{"_index":87,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["aria",{"_index":320,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["array.isarray(input",{"_index":302,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["attr.disabled",{"_index":322,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["attributes/validators",{"_index":316,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["automatically",{"_index":635,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["avoid",{"_index":643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":630,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["becomes",{"_index":226,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["behavior",{"_index":520,"title":{},"body":{"interfaces/SignalInterceptor.html":{}}}],["belongs",{"_index":275,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["blur",{"_index":46,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["boolean",{"_index":437,"title":{},"body":{"directives/SignalControlErrorDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/variables.html":{}}}],["brandsignal",{"_index":116,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["brandsignal(writablesignal",{"_index":168,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["callback",{"_index":54,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["calls",{"_index":528,"title":{},"body":{"interfaces/SignalInterceptor.html":{},"miscellaneous/functions.html":{}}}],["change",{"_index":48,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["changed",{"_index":138,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["changedetection",{"_index":385,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["changedetectionstrategy",{"_index":389,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":386,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["changes",{"_index":55,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["check",{"_index":149,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["checking",{"_index":145,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["checks",{"_index":246,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/typealiases.html":{}}}],["child",{"_index":127,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["class",{"_index":100,"title":{"classes/SignalControlContainer.html":{},"classes/SignalControlValueAccessor.html":{}},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{}}}],["classes",{"_index":104,"title":{},"body":{"classes/SignalControlContainer.html":{},"classes/SignalControlValueAccessor.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["classes.token",{"_index":315,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["classes.token.ts",{"_index":568,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["classes.ts",{"_index":628,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["classlist",{"_index":321,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["cleans",{"_index":124,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["cleanup",{"_index":111,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["collection",{"_index":545,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["compare",{"_index":229,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["compatible",{"_index":647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["component",{"_index":378,"title":{"components/SignalControlErrorComponent.html":{}},"body":{"components/SignalControlErrorComponent.html":{},"coverage.html":{},"overview.html":{}}}],["component_template",{"_index":393,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["components",{"_index":380,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["composesignal",{"_index":250,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["composesignal(__namedparameters",{"_index":589,"title":{},"body":{"miscellaneous/functions.html":{}}}],["computed",{"_index":89,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["config",{"_index":266,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/variables.html":{}}}],["configuration",{"_index":540,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["const",{"_index":151,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"miscellaneous/variables.html":{}}}],["container",{"_index":109,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["container.directive",{"_index":307,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["container.directive.ts",{"_index":106,"title":{},"body":{"classes/SignalControlContainer.html":{},"coverage.html":{}}}],["container.directive.ts:111",{"_index":123,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:21",{"_index":129,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:28",{"_index":156,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:42",{"_index":136,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:49",{"_index":174,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:56",{"_index":173,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:63",{"_index":159,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:70",{"_index":175,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:77",{"_index":176,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:84",{"_index":165,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:91",{"_index":179,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:98",{"_index":170,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["context",{"_index":410,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["control",{"_index":10,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["control's",{"_index":227,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive",{"_index":183,"title":{},"body":{"classes/SignalControlContainer.html":{},"classes/SignalControlValueAccessor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["control.directive.ts",{"_index":210,"title":{},"body":{"directives/SignalControlDirective.html":{},"coverage.html":{}}}],["control.directive.ts:101",{"_index":285,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:137",{"_index":303,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:151",{"_index":268,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:182",{"_index":219,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:191",{"_index":289,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:204",{"_index":294,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:209",{"_index":270,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:216",{"_index":288,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:221",{"_index":239,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:227",{"_index":231,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:235",{"_index":225,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:244",{"_index":291,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:249",{"_index":293,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:255",{"_index":232,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:263",{"_index":233,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:52",{"_index":235,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:59",{"_index":244,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:64",{"_index":255,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:72",{"_index":305,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:84",{"_index":277,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:89",{"_index":237,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:95",{"_index":273,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.dirty",{"_index":654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["control.touched",{"_index":655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controlcontainer",{"_index":330,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["controlcontainer.addcontrol(controlkey",{"_index":335,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["controlcontainer.removecontrol(controlkey",{"_index":338,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["controldirective",{"_index":33,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["controldirectivesmap",{"_index":198,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["controldirectivestatuses",{"_index":152,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["controldirectivestatuses.some((status",{"_index":154,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["controlkey",{"_index":332,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["controls",{"_index":128,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["controlsignal",{"_index":509,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["controlsignalsmap",{"_index":112,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["correct",{"_index":419,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["corresponding",{"_index":132,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["coverage",{"_index":550,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createcontrolsignal(key",{"_index":507,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["creates",{"_index":590,"title":{},"body":{"miscellaneous/functions.html":{}}}],["creating",{"_index":442,"title":{},"body":{"directives/SignalControlErrorDirective.html":{},"miscellaneous/variables.html":{}}}],["css",{"_index":634,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cva",{"_index":317,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["default",{"_index":69,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["defaultkey",{"_index":211,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["define",{"_index":633,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["defined",{"_index":41,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidator.html":{}}}],["defines",{"_index":657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":578,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["depending",{"_index":658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["derive",{"_index":544,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["description",{"_index":12,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["destroyref",{"_index":181,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["dir",{"_index":420,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["directive",{"_index":0,"title":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["directive.dirty",{"_index":135,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["directive.markasdirty",{"_index":203,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["directive.markaspristine",{"_index":202,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["directive.markastouched",{"_index":204,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["directive.markasuntouched",{"_index":205,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["directive.touched",{"_index":158,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["directives",{"_index":2,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{},"overview.html":{}}}],["directives/signal",{"_index":96,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["dirty",{"_index":68,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["disable",{"_index":457,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["disabled",{"_index":195,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["disabledattribute",{"_index":323,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["disabledinterceptor",{"_index":356,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["disabledinterceptor.restore",{"_index":363,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["disabledtype",{"_index":242,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/typealiases.html":{}}}],["display",{"_index":384,"title":{},"body":{"components/SignalControlErrorComponent.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":59,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"classes/SignalControlValueAccessor.html":{}}}],["effect",{"_index":306,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["effect((cleanup",{"_index":355,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["element",{"_index":82,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"components/SignalControlErrorComponent.html":{},"classes/SignalControlValueAccessor.html":{}}}],["elementref",{"_index":34,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["emits",{"_index":596,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enabled",{"_index":212,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/typealiases.html":{}}}],["enabledtype",{"_index":252,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/typealiases.html":{}}}],["error",{"_index":217,"title":{},"body":{"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["error(errorkey",{"_index":218,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["error.component.ts",{"_index":383,"title":{},"body":{"components/SignalControlErrorComponent.html":{},"coverage.html":{}}}],["error.config",{"_index":446,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["error.directive.ts",{"_index":402,"title":{},"body":{"directives/SignalControlErrorDirective.html":{},"coverage.html":{}}}],["error.directive.ts:26",{"_index":421,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["error.directive.ts:50",{"_index":418,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["error.directive.ts:64",{"_index":411,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["error.key",{"_index":344,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["errorkey",{"_index":222,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["errormap",{"_index":342,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["errors",{"_index":213,"title":{},"body":{"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["errors.push",{"_index":264,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["errorstrategy",{"_index":430,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["eslint",{"_index":456,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["eslint/no",{"_index":461,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["event",{"_index":53,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["events",{"_index":47,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["execute",{"_index":610,"title":{},"body":{"index.html":{}}}],["exempt",{"_index":245,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["export",{"_index":99,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["exportas",{"_index":27,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["exposes",{"_index":274,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["extends",{"_index":15,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["extract",{"_index":547,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["factory",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":433,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["file",{"_index":5,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{}}}],["focus",{"_index":45,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["form",{"_index":140,"title":{},"body":{"classes/SignalControlContainer.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["forms",{"_index":601,"title":{},"body":{"index.html":{}}}],["forms.signal",{"_index":650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forwardref",{"_index":22,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["function",{"_index":529,"title":{},"body":{"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":585,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":603,"title":{},"body":{"index.html":{}}}],["generic",{"_index":631,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["get(key",{"_index":471,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["getter",{"_index":593,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getting",{"_index":599,"title":{"index.html":{}},"body":{}}],["given",{"_index":473,"title":{},"body":{"directives/SignalFormGroupDirective.html":{},"miscellaneous/functions.html":{}}}],["group",{"_index":141,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["group.directive.ts",{"_index":470,"title":{},"body":{"directives/SignalFormGroupDirective.html":{},"coverage.html":{}}}],["group.directive.ts:34",{"_index":472,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["guard",{"_index":415,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["happens",{"_index":530,"title":{},"body":{"interfaces/SignalInterceptor.html":{},"miscellaneous/functions.html":{}}}],["hidden",{"_index":171,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["hold",{"_index":172,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["host",{"_index":81,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["html",{"_index":391,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["id",{"_index":318,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["identifier",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["immutable",{"_index":598,"title":{},"body":{"miscellaneous/functions.html":{}}}],["implementation",{"_index":465,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["implicit",{"_index":445,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["import",{"_index":92,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["included",{"_index":247,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["index",{"_index":29,"title":{"index.html":{}},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":256,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["infer",{"_index":299,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["info",{"_index":3,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["inherited",{"_index":40,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["inject",{"_index":182,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["inject(destroyref).ondestroy",{"_index":121,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["inject(elementref",{"_index":79,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["inject(signal_control_error_strategy",{"_index":431,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["inject(signal_control_status_classes",{"_index":326,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["inject(templateref",{"_index":427,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["inject(viewcontainerref",{"_index":429,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["inject>>(signalcontroldirective",{"_index":75,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["injectiontoken('ngx",{"_index":649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["input",{"_index":94,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["input.required",{"_index":70,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["input[type=\"text\"][ngxcontrol][ngxtextinput",{"_index":24,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["input[type=\"text\"][ngxcontrol][ngxtextinput]'},{'name",{"_index":394,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["inputs",{"_index":14,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["inputsignal",{"_index":234,"title":{},"body":{"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["inputsignalwithtransform",{"_index":295,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["inputtextcontrolvalueaccessordirective",{"_index":1,"title":{"directives/InputTextControlValueAccessorDirective.html":{}},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"components/SignalControlErrorComponent.html":{},"coverage.html":{}}}],["instances",{"_index":644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intercepts",{"_index":526,"title":{},"body":{"interfaces/SignalInterceptor.html":{},"miscellaneous/functions.html":{}}}],["interceptsignal",{"_index":311,"title":{},"body":{"directives/SignalControlDirective.html":{},"interfaces/SignalInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["interceptsignal(signal",{"_index":531,"title":{},"body":{"interfaces/SignalInterceptor.html":{},"miscellaneous/functions.html":{}}}],["interceptsignal(this.control",{"_index":361,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["interceptsignal(this.disabled",{"_index":357,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["interface",{"_index":512,"title":{"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}},"body":{"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{}}}],["interfaces",{"_index":514,"title":{},"body":{"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"overview.html":{}}}],["internal",{"_index":328,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["invalid",{"_index":142,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["k",{"_index":164,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/functions.html":{}}}],["keep",{"_index":144,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["key",{"_index":167,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["keyof",{"_index":196,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["keys",{"_index":546,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["label",{"_index":319,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["legend",{"_index":390,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["length",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["length.ts",{"_index":570,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["library",{"_index":602,"title":{},"body":{"index.html":{}}}],["line",{"_index":459,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["list",{"_index":365,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["literal",{"_index":416,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["make",{"_index":646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manage",{"_index":194,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["map",{"_index":130,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["map>(this.errors().map((error",{"_index":343,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["mapsignal",{"_index":191,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["markasdirty",{"_index":117,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["markaspristine",{"_index":118,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["markastouched",{"_index":37,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["markasuntouched",{"_index":119,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["marked",{"_index":160,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["marks",{"_index":43,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["matching",{"_index":102,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxlength",{"_index":571,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":17,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["method",{"_index":525,"title":{},"body":{"interfaces/SignalInterceptor.html":{},"miscellaneous/functions.html":{}}}],["methods",{"_index":36,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidator.html":{}}}],["miscellaneous",{"_index":584,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":74,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["model(false",{"_index":241,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["models/disabled",{"_index":308,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["models/signal",{"_index":185,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["models/symbols",{"_index":190,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{}}}],["modelsignal",{"_index":240,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["modules",{"_index":611,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":61,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/functions.html":{}}}],["native",{"_index":86,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["nativeelement",{"_index":35,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["need",{"_index":143,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["never",{"_index":301,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["new",{"_index":199,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":458,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["ng",{"_index":397,"title":{},"body":{"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{}}}],["ngtemplatecontextguard",{"_index":407,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["ngtemplatecontextguard(directive",{"_index":409,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["ngtemplateguard_ngxerror",{"_index":408,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["ngtemplateguard_ngxerror(dir",{"_index":417,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["ngx",{"_index":387,"title":{},"body":{"components/SignalControlErrorComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ngxcontrol",{"_index":72,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{}}}],["ngxcontrol]'},{'name",{"_index":395,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["ngxcontrolvalueaccessor",{"_index":28,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["ngxdisabled",{"_index":243,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["ngxerror",{"_index":405,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["ngxformgroup",{"_index":400,"title":{},"body":{"components/SignalControlErrorComponent.html":{},"directives/SignalFormGroupDirective.html":{}}}],["noop",{"_index":464,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["null",{"_index":278,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":333,"title":{},"body":{"directives/SignalControlDirective.html":{},"miscellaneous/variables.html":{}}}],["nx",{"_index":604,"title":{},"body":{"index.html":{}}}],["object",{"_index":503,"title":{},"body":{"directives/SignalFormGroupDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["once",{"_index":161,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["onset",{"_index":358,"title":{},"body":{"directives/SignalControlDirective.html":{},"interfaces/SignalInterceptor.html":{},"miscellaneous/functions.html":{}}}],["onset(value",{"_index":532,"title":{},"body":{"interfaces/SignalInterceptor.html":{}}}],["onvalueupdated",{"_index":38,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["onvalueupdated(value",{"_index":51,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["optional",{"_index":63,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/functions.html":{}}}],["original",{"_index":524,"title":{},"body":{"interfaces/SignalInterceptor.html":{}}}],["originalset",{"_index":534,"title":{},"body":{"interfaces/SignalInterceptor.html":{}}}],["originalset(value",{"_index":536,"title":{},"body":{"interfaces/SignalInterceptor.html":{}}}],["otherwise",{"_index":148,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["override",{"_index":200,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["overview",{"_index":612,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":577,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pair",{"_index":592,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":60,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":214,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["parent?.path",{"_index":281,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["parentpath",{"_index":280,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["parentpath}.${key",{"_index":283,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["path",{"_index":215,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["peer",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["pristine",{"_index":113,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["private",{"_index":324,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["properties",{"_index":30,"title":{"properties.html":{}},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"properties.html":{}}}],["property",{"_index":504,"title":{},"body":{"directives/SignalFormGroupDirective.html":{},"miscellaneous/functions.html":{}}}],["property.ts",{"_index":564,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["protected",{"_index":32,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["provide",{"_index":20,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["providedin",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":18,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["reactive",{"_index":220,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["readonly",{"_index":31,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["reference",{"_index":78,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"miscellaneous/functions.html":{}}}],["references",{"_index":126,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["reflect",{"_index":57,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["registercontrol",{"_index":329,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["relative",{"_index":286,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["remove",{"_index":230,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{}}}],["removecontrol",{"_index":120,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["removecontrol(key",{"_index":178,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["removes",{"_index":180,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["rendered",{"_index":432,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["represents",{"_index":108,"title":{},"body":{"classes/SignalControlContainer.html":{},"miscellaneous/functions.html":{}}}],["required",{"_index":573,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["requiredvalidator",{"_index":574,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["restore",{"_index":521,"title":{},"body":{"interfaces/SignalInterceptor.html":{},"miscellaneous/functions.html":{}}}],["restores",{"_index":523,"title":{},"body":{"interfaces/SignalInterceptor.html":{}}}],["restoring",{"_index":519,"title":{},"body":{"interfaces/SignalInterceptor.html":{}}}],["result",{"_index":539,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":101,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":133,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":517,"title":{},"body":{"interfaces/SignalInterceptor.html":{}}}],["returns",{"_index":49,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":608,"title":{},"body":{"index.html":{}}}],["running",{"_index":605,"title":{},"body":{"index.html":{}}}],["s",{"_index":169,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["selectobjectproperty",{"_index":501,"title":{},"body":{"directives/SignalFormGroupDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectobjectproperty(sourcesignal",{"_index":510,"title":{},"body":{"directives/SignalFormGroupDirective.html":{},"miscellaneous/functions.html":{}}}],["selector",{"_index":23,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["self",{"_index":76,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["set",{"_index":253,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/functions.html":{}}}],["setter",{"_index":527,"title":{},"body":{"interfaces/SignalInterceptor.html":{},"miscellaneous/functions.html":{}}}],["shouldrender",{"_index":436,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["signal",{"_index":88,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["signal(false",{"_index":349,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["signal(null",{"_index":327,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["signal(true",{"_index":346,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["signal.set",{"_index":535,"title":{},"body":{"interfaces/SignalInterceptor.html":{}}}],["signal.ts",{"_index":516,"title":{},"body":{"interfaces/SignalInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["signal.ts:10",{"_index":522,"title":{},"body":{"interfaces/SignalInterceptor.html":{}}}],["signal[signal_control_container",{"_index":208,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["signal[signal_control_key",{"_index":209,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["signal_control_container",{"_index":188,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{}}}],["signal_control_error_strategy",{"_index":425,"title":{},"body":{"directives/SignalControlErrorDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signal_control_key",{"_index":189,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{}}}],["signal_control_status_classes",{"_index":313,"title":{},"body":{"directives/SignalControlDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signalcontrolcontainer",{"_index":103,"title":{"classes/SignalControlContainer.html":{}},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{}}}],["signalcontrolcontainer:111",{"_index":484,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontrolcontainer:21",{"_index":485,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontrolcontainer:84",{"_index":474,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontrolcontainer:91",{"_index":480,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontrolcontainer:98",{"_index":475,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective",{"_index":110,"title":{"directives/SignalControlDirective.html":{}},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{}}}],["signalcontroldirective:101",{"_index":496,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:137",{"_index":499,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:151",{"_index":492,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:182",{"_index":481,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:204",{"_index":498,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:209",{"_index":493,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:22",{"_index":482,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:221",{"_index":489,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:249",{"_index":497,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:28",{"_index":487,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:29",{"_index":483,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:42",{"_index":486,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:49",{"_index":477,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:56",{"_index":476,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:59",{"_index":490,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:63",{"_index":488,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:64",{"_index":491,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:70",{"_index":478,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:72",{"_index":500,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:77",{"_index":479,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:84",{"_index":495,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:95",{"_index":494,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontrolerrorcomponent",{"_index":379,"title":{"components/SignalControlErrorComponent.html":{}},"body":{"components/SignalControlErrorComponent.html":{},"coverage.html":{}}}],["signalcontrolerrordirective",{"_index":396,"title":{"directives/SignalControlErrorDirective.html":{}},"body":{"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"coverage.html":{}}}],["signalcontrolerrorstrategy",{"_index":623,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["signalcontrolstatus",{"_index":184,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"miscellaneous/typealiases.html":{}}}],["signalcontrolstatusclasses",{"_index":627,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["signalcontrolvalueaccessor",{"_index":16,"title":{"classes/SignalControlValueAccessor.html":{}},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"coverage.html":{}}}],["signalcontrolvalueaccessor:12",{"_index":77,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["signalcontrolvalueaccessor:19",{"_index":80,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["signalcontrolvalueaccessor:24",{"_index":85,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["signalcontrolvalueaccessor:25",{"_index":73,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["signalcontrolvalueaccessor:34",{"_index":91,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["signalcontrolvalueaccessor:40",{"_index":52,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["signalcontrolvalueaccessor:47",{"_index":65,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["signalcontrolvalueaccessor:55",{"_index":42,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["signalformgroupdirective",{"_index":399,"title":{"directives/SignalFormGroupDirective.html":{}},"body":{"components/SignalControlErrorComponent.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{}}}],["signalinterceptor",{"_index":513,"title":{"interfaces/SignalInterceptor.html":{}},"body":{"interfaces/SignalInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["signals",{"_index":131,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["signals/compose",{"_index":310,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["signals/intercept",{"_index":312,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["signals/map",{"_index":192,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["signals/select",{"_index":502,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalvalidationresult",{"_index":262,"title":{"interfaces/SignalValidationResult.html":{}},"body":{"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{}}}],["signalvalidator",{"_index":186,"title":{"interfaces/SignalValidator.html":{}},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signalvalidatorkeys",{"_index":309,"title":{},"body":{"directives/SignalControlDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["signalvalidatorresultbykey",{"_index":223,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["signalvalidatorresults",{"_index":258,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["soon",{"_index":150,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["source",{"_index":4,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["sourcesignal",{"_index":508,"title":{},"body":{"directives/SignalFormGroupDirective.html":{},"miscellaneous/functions.html":{}}}],["specific",{"_index":221,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["src/.../compose",{"_index":586,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../disabled",{"_index":621,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../intercept",{"_index":587,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../max",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../required.ts",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../select",{"_index":588,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../signal",{"_index":624,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/components/signal",{"_index":382,"title":{},"body":{"components/SignalControlErrorComponent.html":{},"coverage.html":{}}}],["src/lib/control",{"_index":6,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"coverage.html":{}}}],["src/lib/directives/signal",{"_index":105,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{}}}],["src/lib/models/disabled",{"_index":629,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/models/signal",{"_index":537,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/signals/compose",{"_index":561,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/signals/intercept",{"_index":515,"title":{},"body":{"interfaces/SignalInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/signals/select",{"_index":563,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/tokens/signal",{"_index":565,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/validators/max",{"_index":569,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/validators/required.ts",{"_index":572,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":25,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["started",{"_index":600,"title":{"index.html":{}},"body":{}}],["state",{"_index":58,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["statements",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":406,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["status",{"_index":114,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["status.ts",{"_index":626,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statusclasses",{"_index":325,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["statuses",{"_index":353,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["strategy",{"_index":632,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["strategy.token",{"_index":426,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["strategy.token.ts",{"_index":566,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["strategy.ts",{"_index":625,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["string",{"_index":236,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["structural",{"_index":403,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["style",{"_index":366,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["supports",{"_index":518,"title":{},"body":{"interfaces/SignalInterceptor.html":{}}}],["sync",{"_index":352,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["syncdisabled",{"_index":354,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["t",{"_index":533,"title":{},"body":{"interfaces/SignalInterceptor.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":576,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":575,"title":{},"body":{"coverage.html":{}}}],["tconfig",{"_index":413,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["telement",{"_index":83,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["template",{"_index":388,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["template[ngxerror",{"_index":404,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["template[ngxerror]'},{'name",{"_index":398,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["templateref",{"_index":422,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["test",{"_index":609,"title":{},"body":{"index.html":{}}}],["tests",{"_index":607,"title":{},"body":{"index.html":{}}}],["text",{"_index":9,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["this.#controldirectivesmap.clear",{"_index":122,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.#controldirectivesmap.delete(key",{"_index":207,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["this.#controldirectivesmap.set(key",{"_index":206,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["this.#controldirectivesmap.values().foreach((directive",{"_index":201,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["this.#controldirectivesmap.values().map",{"_index":153,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.#controldirectivesmap.values().some((directive",{"_index":134,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.#errormap().get(errorkey",{"_index":345,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.#key.asreadonly",{"_index":272,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.#key.set(controlkey",{"_index":337,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.#key.set(null",{"_index":340,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.#parent.asreadonly",{"_index":276,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.#parent.set(controlcontainer",{"_index":336,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.#parent.set(null",{"_index":339,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.#pristine.asreadonly",{"_index":287,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.#pristine.set(false",{"_index":348,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.#pristine.set(true",{"_index":347,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.#touched.asreadonly",{"_index":290,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.#touched.set(false",{"_index":351,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.#touched.set(true",{"_index":350,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.brandsignal(controlsignal",{"_index":511,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["this.control",{"_index":90,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.control().set(undefined",{"_index":359,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.control().set(value",{"_index":304,"title":{},"body":{"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.controldirective.markasdirty",{"_index":466,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["this.controldirective.markastouched",{"_index":467,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["this.controlsignalsmap[key",{"_index":505,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["this.createcontrolsignal(key",{"_index":506,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["this.defaultkey",{"_index":284,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.dirty",{"_index":373,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.disabled",{"_index":251,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.disabled.set(!enabled",{"_index":254,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.disabled.set(false",{"_index":362,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.elementref.nativeelement",{"_index":84,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["this.enabled",{"_index":257,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.errors().length",{"_index":146,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.errorstrategy(error.control",{"_index":438,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["this.invalid",{"_index":370,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.key",{"_index":282,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.ngxerror",{"_index":435,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["this.onvalueupdated(value",{"_index":469,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["this.parent",{"_index":279,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.pristine",{"_index":238,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.rendered",{"_index":439,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["this.status",{"_index":269,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.statusclasses.dirty",{"_index":372,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.statusclasses.disabled",{"_index":377,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.statusclasses.invalid",{"_index":369,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.statusclasses.pristine",{"_index":371,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.statusclasses.touched",{"_index":374,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.statusclasses.untouched",{"_index":375,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.statusclasses.valid",{"_index":367,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.touched",{"_index":292,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.untouched",{"_index":376,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.valid",{"_index":368,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.validators",{"_index":259,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.value",{"_index":261,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.vcr.clear",{"_index":447,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["this.vcr.createembeddedview(this.templateref",{"_index":444,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["through",{"_index":228,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["tkey",{"_index":412,"title":{},"body":{"directives/SignalControlErrorDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["todo",{"_index":193,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tokens/signal",{"_index":314,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{}}}],["touched",{"_index":44,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["track",{"_index":441,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["transform",{"_index":297,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["treating",{"_index":597,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tree",{"_index":381,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["triggered",{"_index":162,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["true",{"_index":26,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["tslib",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["tvalidationresult",{"_index":414,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["tvalidator",{"_index":300,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["tvalidatorresult",{"_index":548,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["tvalidators",{"_index":298,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["tvalue",{"_index":197,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["type",{"_index":62,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.ts",{"_index":622,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":619,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":460,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["ui",{"_index":139,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["undefined",{"_index":224,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["underlying",{"_index":67,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["unit",{"_index":606,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":296,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["untouched",{"_index":177,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["untracked",{"_index":424,"title":{},"body":{"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["unused",{"_index":462,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["up",{"_index":125,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["updated",{"_index":595,"title":{},"body":{"miscellaneous/functions.html":{}}}],["updates",{"_index":66,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["updatevalue",{"_index":39,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["updatevalue($event.target.value",{"_index":98,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["updatevalue(value",{"_index":64,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["usage",{"_index":645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["used",{"_index":56,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"miscellaneous/variables.html":{}}}],["useexisting",{"_index":21,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["user",{"_index":137,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["utility",{"_index":543,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["valid",{"_index":155,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":541,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["validate(value",{"_index":542,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/variables.html":{}}}],["validation",{"_index":157,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["validator",{"_index":187,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["validator.config",{"_index":267,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["validator.key",{"_index":265,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["validator.ts",{"_index":538,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["validator.ts:9",{"_index":549,"title":{},"body":{"interfaces/SignalValidator.html":{}}}],["validator.validate(value",{"_index":263,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["validators",{"_index":216,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["validators.length",{"_index":260,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["value",{"_index":7,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valueinterceptor",{"_index":360,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["valueinterceptor.restore",{"_index":364,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["var",{"_index":392,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["variable",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":637,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":463,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["vcr",{"_index":428,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["version",{"_index":617,"title":{},"body":{"properties.html":{}}}],["view",{"_index":443,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["viewcontainerref",{"_index":423,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["void",{"_index":50,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"miscellaneous/functions.html":{}}}],["watcherrorchanges",{"_index":434,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["watchvaluechanges",{"_index":468,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["whether",{"_index":271,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/typealiases.html":{}}}],["writable",{"_index":591,"title":{},"body":{"miscellaneous/functions.html":{}}}],["writablesignal",{"_index":93,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalInterceptor.html":{},"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"directives/InputTextControlValueAccessorDirective.html":{"url":"directives/InputTextControlValueAccessorDirective.html","title":"directive - InputTextControlValueAccessorDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  InputTextControlValueAccessorDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/control-value-accessors/input-text-control-value-accessor.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Control value accessor for text inputs.\n\n            \n\n            \n                Extends\n            \n            \n                            SignalControlValueAccessor\n            \n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Providers\n                        \n                            \n                                { provide: SignalControlValueAccessor, useExisting: forwardRef(() => InputTextControlValueAccessorDirective) }\n                            \n                        \n                    \n\n                    \n                        Selector\n                        input[type=\"text\"][ngxControl][ngxTextInput]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxControlValueAccessor\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                control\n                            \n                            \n                                    Protected\n                                    Readonly\n                                controlDirective\n                            \n                            \n                                    Protected\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                nativeElement\n                            \n                            \n                                    Readonly\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                markAsTouched\n                            \n                            \n                                onValueUpdated\n                            \n                            \n                                updateValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        markAsTouched\n                        \n                    \n                \n            \n            \n                \nmarkAsTouched()\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlValueAccessor\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlValueAccessor:55\n\n                        \n                    \n\n\n            \n                \n                        Marks the control as touched. A control is touched by focus and blur events that do not change the value.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onValueUpdated\n                        \n                    \n                \n            \n            \n                \nonValueUpdated(value: Readonly)\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlValueAccessor\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlValueAccessor:40\n\n                        \n                    \n\n\n            \n                \n                        Event callback when the value changes that can be used to reflect the state to the DOM.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Readonly\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateValue\n                        \n                    \n                \n            \n            \n                \nupdateValue(value: Readonly)\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlValueAccessor\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlValueAccessor:47\n\n                        \n                    \n\n\n            \n                \n                        Updates the underlying value of the control and marks it as dirty.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Readonly\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required>({ alias: 'ngxControl' })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlValueAccessor\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlValueAccessor:25\n\n                        \n                    \n\n            \n                \n                    Model.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        controlDirective\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>>(SignalControlDirective, {\n    self: true,\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlValueAccessor\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlValueAccessor:12\n\n                        \n                    \n\n            \n                \n                    Reference to the control directive.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlValueAccessor\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlValueAccessor:19\n\n                        \n                    \n\n            \n                \n                    Reference to the host element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        nativeElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TElement\n\n                    \n                \n                \n                    \n                        Default value : this.elementRef.nativeElement\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlValueAccessor\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlValueAccessor:24\n\n                        \n                    \n\n            \n                \n                    Native element where the directive is applied.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal>\n\n                    \n                \n                \n                    \n                        Default value : computed(() => this.control()())\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlValueAccessor\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlValueAccessor:34\n\n                        \n                    \n\n            \n                \n                    Model value.\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, WritableSignal, forwardRef, input } from '@angular/core';\n\nimport { SignalControlValueAccessor } from '../directives/signal-control-value-accessor.directive';\n\n/**\n * Control value accessor for text inputs.\n */\n@Directive({\n  selector: `input[type=\"text\"][ngxControl][ngxTextInput]`,\n  standalone: true,\n  host: {\n    '(input)': 'updateValue($event.target.value)',\n    '(blur)': 'markAsTouched()',\n    '[value]': 'value()',\n  },\n  providers: [\n    { provide: SignalControlValueAccessor, useExisting: forwardRef(() => InputTextControlValueAccessorDirective) },\n  ],\n  exportAs: 'ngxControlValueAccessor',\n})\nexport class InputTextControlValueAccessorDirective extends SignalControlValueAccessor {\n  /**\n   * Model.\n   */\n  readonly control = input.required>({ alias: 'ngxControl' });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignalControlContainer.html":{"url":"classes/SignalControlContainer.html","title":"class - SignalControlContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignalControlContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/directives/signal-control-container.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract class that represents a signal control container.\n\n            \n\n            \n                Extends\n            \n            \n                            SignalControlDirective\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                cleanup\n                            \n                            \n                                    Protected\n                                    Readonly\n                                controlSignalsMap\n                            \n                            \n                                    \n                                pristine\n                            \n                            \n                                    \n                                    Readonly\n                                status\n                            \n                            \n                                    \n                                touched\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addControl\n                            \n                            \n                                    Protected\n                                brandSignal\n                            \n                            \n                                    \n                                markAsDirty\n                            \n                            \n                                    \n                                markAsPristine\n                            \n                            \n                                    \n                                markAsTouched\n                            \n                            \n                                    \n                                markAsUntouched\n                            \n                            \n                                removeControl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        cleanup\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DestroyRef).onDestroy(() => this.#controlDirectivesMap.clear())\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-container.directive.ts:111\n                        \n                    \n\n            \n                \n                    Cleans up any references to child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        controlSignalsMap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-container.directive.ts:21\n                        \n                    \n\n            \n                \n                    Map of signals corresponding to the child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        pristine\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n    return !this.#controlDirectivesMap.values().some((directive) => directive.dirty());\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-container.directive.ts:42\n                        \n                    \n\n            \n                \n                    A control is pristine if the user has not yet changed the value in the UI in any of its child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n    // If the form group is invalid, there is no need to keep checking\n    if (this.errors().length > 0) {\n      return 'INVALID';\n    }\n\n    // Otherwise, check the status of all child controls, and as soon as a child control is invalid, return\n    const controlDirectiveStatuses = this.#controlDirectivesMap.values().map(({ status }) => status());\n    return controlDirectiveStatuses.some((status) => status === 'INVALID') ? 'INVALID' : 'VALID';\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-container.directive.ts:28\n                        \n                    \n\n            \n                \n                    The validation status of the form group and its child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        touched\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n    return this.#controlDirectivesMap.values().some((directive) => directive.touched());\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-container.directive.ts:63\n                        \n                    \n\n            \n                \n                    A control is marked touched once the user has triggered a blur event on it or in any of its child controls.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addControl\n                        \n                    \n                \n            \n            \n                \naddControl(key: K, signalControlDirective: SignalControlDirective<>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-container.directive.ts:84\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    K\n                            \n                        \n                    \n\n            \n                \n                        Adds a control to the container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                signalControlDirective\n                                            \n                                                            SignalControlDirective<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        brandSignal\n                        \n                    \n                \n            \n            \n                \n                        \n                    brandSignal(writableSignal: S, key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-container.directive.ts:98\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    K\n                                    S\n                            \n                        \n                    \n\n            \n                \n                        Adds hidden properties to a signal to hold a reference to the control container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                writableSignal\n                                            \n                                                        S\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     S\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        markAsDirty\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsDirty()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-container.directive.ts:56\n                        \n                    \n\n\n            \n                \n                        Marks all the child controls as dirty.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        markAsPristine\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsPristine()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-container.directive.ts:49\n                        \n                    \n\n\n            \n                \n                        Marks all the child controls as pristine.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        markAsTouched\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsTouched()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-container.directive.ts:70\n                        \n                    \n\n\n            \n                \n                        Marks all the child controls as touched.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        markAsUntouched\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsUntouched()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-container.directive.ts:77\n                        \n                    \n\n\n            \n                \n                        Marks all the child controls as untouched.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeControl\n                        \n                    \n                \n            \n            \n                \nremoveControl(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-container.directive.ts:91\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    K\n                            \n                        \n                    \n\n            \n                \n                        Removes a control from the container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DestroyRef, Signal, WritableSignal, computed, inject } from '@angular/core';\n\nimport { SignalControlDirective } from './signal-control.directive';\nimport { SignalControlStatus } from '../models/signal-control-status';\nimport { SignalValidator } from '../models/signal-validator';\nimport { SIGNAL_CONTROL_CONTAINER, SIGNAL_CONTROL_KEY } from '../models/symbols';\nimport { MapSignal } from '../signals/map-signal';\n\n// TODO: manage disabled status\n\n/**\n * Abstract class that represents a signal control container.\n */\nexport abstract class SignalControlContainer[] = []\n> extends SignalControlDirective {\n  /**\n   * Map of signals corresponding to the child controls.\n   */\n  protected readonly controlSignalsMap: { [K in keyof TValue]?: WritableSignal> } = {};\n\n  readonly #controlDirectivesMap = new MapSignal>();\n\n  /**\n   * The validation status of the form group and its child controls.\n   */\n  override readonly status: Signal = computed(() => {\n    // If the form group is invalid, there is no need to keep checking\n    if (this.errors().length > 0) {\n      return 'INVALID';\n    }\n\n    // Otherwise, check the status of all child controls, and as soon as a child control is invalid, return\n    const controlDirectiveStatuses = this.#controlDirectivesMap.values().map(({ status }) => status());\n    return controlDirectiveStatuses.some((status) => status === 'INVALID') ? 'INVALID' : 'VALID';\n  });\n\n  /**\n   * A control is pristine if the user has not yet changed the value in the UI in any of its child controls.\n   */\n  override pristine: Signal = computed(() => {\n    return !this.#controlDirectivesMap.values().some((directive) => directive.dirty());\n  });\n\n  /**\n   * Marks all the child controls as pristine.\n   */\n  override markAsPristine(): void {\n    this.#controlDirectivesMap.values().forEach((directive) => directive.markAsPristine());\n  }\n\n  /**\n   * Marks all the child controls as dirty.\n   */\n  override markAsDirty(): void {\n    this.#controlDirectivesMap.values().forEach((directive) => directive.markAsDirty());\n  }\n\n  /**\n   * A control is marked touched once the user has triggered a blur event on it or in any of its child controls.\n   */\n  override touched: Signal = computed(() => {\n    return this.#controlDirectivesMap.values().some((directive) => directive.touched());\n  });\n\n  /**\n   * Marks all the child controls as touched.\n   */\n  override markAsTouched(): void {\n    this.#controlDirectivesMap.values().forEach((directive) => directive.markAsTouched());\n  }\n\n  /**\n   * Marks all the child controls as untouched.\n   */\n  override markAsUntouched(): void {\n    this.#controlDirectivesMap.values().forEach((directive) => directive.markAsUntouched());\n  }\n\n  /**\n   * Adds a control to the container.\n   */\n  addControl(key: K, signalControlDirective: SignalControlDirective): void {\n    this.#controlDirectivesMap.set(key, signalControlDirective as any);\n  }\n\n  /**\n   * Removes a control from the container.\n   */\n  removeControl(key: K): void {\n    this.#controlDirectivesMap.delete(key);\n  }\n\n  /**\n   * Adds hidden properties to a signal to hold a reference to the control container.\n   */\n  protected brandSignal>>(\n    writableSignal: S,\n    key: K\n  ): S {\n    const signal: any = writableSignal;\n    signal[SIGNAL_CONTROL_CONTAINER] = this;\n    signal[SIGNAL_CONTROL_KEY] = key;\n    return signal;\n  }\n\n  /**\n   * Cleans up any references to child controls.\n   */\n  protected readonly cleanup = inject(DestroyRef).onDestroy(() => this.#controlDirectivesMap.clear());\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SignalControlDirective.html":{"url":"directives/SignalControlDirective.html","title":"directive - SignalControlDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  SignalControlDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/directives/signal-control.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Control directive.\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxControl]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxControl\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                control\n                            \n                            \n                                    Readonly\n                                defaultKey\n                            \n                            \n                                    Readonly\n                                dirty\n                            \n                            \n                                    Readonly\n                                disabled\n                            \n                            \n                                    Readonly\n                                enabled\n                            \n                            \n                                    Readonly\n                                errors\n                            \n                            \n                                    Readonly\n                                invalid\n                            \n                            \n                                    Readonly\n                                key\n                            \n                            \n                                    Readonly\n                                parent\n                            \n                            \n                                    Readonly\n                                path\n                            \n                            \n                                    Readonly\n                                pristine\n                            \n                            \n                                    Readonly\n                                status\n                            \n                            \n                                    Readonly\n                                touched\n                            \n                            \n                                    Readonly\n                                untouched\n                            \n                            \n                                    Readonly\n                                valid\n                            \n                            \n                                    Readonly\n                                validators\n                            \n                            \n                                    Readonly\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                markAsDirty\n                            \n                            \n                                markAsPristine\n                            \n                            \n                                markAsTouched\n                            \n                            \n                                markAsUntouched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(errorKey: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control.directive.ts:182\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    K\n                            \n                        \n                    \n\n            \n                \n                        Reactive value of a specific error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errorKey\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SignalValidatorResultByKey | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        markAsDirty\n                        \n                    \n                \n            \n            \n                \nmarkAsDirty()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control.directive.ts:235\n                        \n                    \n\n\n            \n                \n                        Marks the control as dirty. A control becomes dirty when the control's value is changed through the UI; compare markAsTouched.\nTODO: Remove\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        markAsPristine\n                        \n                    \n                \n            \n            \n                \nmarkAsPristine()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control.directive.ts:227\n                        \n                    \n\n\n            \n                \n                        Marks the control as pristine.\nTODO: Remove\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        markAsTouched\n                        \n                    \n                \n            \n            \n                \nmarkAsTouched()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control.directive.ts:255\n                        \n                    \n\n\n            \n                \n                        Marks the control as touched. A control is touched by focus and blur events that do not change the value.\nTODO: Remove\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        markAsUntouched\n                        \n                    \n                \n            \n            \n                \nmarkAsUntouched()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control.directive.ts:263\n                        \n                    \n\n\n            \n                \n                        Marks the control as untouched.\nTODO: Remove\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>>\n\n                    \n                \n                \n                    \n                        Default value : input.required>>({\n    alias: 'ngxControl',\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:52\n                        \n                    \n\n            \n                \n                    Model.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        defaultKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'control'\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:89\n                        \n                    \n\n            \n                \n                    Default key when the control is not a child of a control container.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        dirty\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => !this.pristine())\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:221\n                        \n                    \n\n            \n                \n                    A control is dirty if the user has changed the value in the UI.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ModelSignal>\n\n                    \n                \n                \n                    \n                        Default value : model(false as DisabledType, { alias: 'ngxDisabled' })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:59\n                        \n                    \n\n            \n                \n                    Disabled controls are exempt from validation checks and are not included in the aggregate value of their ancestor controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WritableSignal>\n\n                    \n                \n                \n                    \n                        Default value : composeSignal>({\n    get: () => !this.disabled() as EnabledType,\n    set: (enabled) => this.disabled.set(!enabled as DisabledType),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:64\n                        \n                    \n\n            \n                \n                    Indicates if the control is not disabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal>>\n\n                    \n                \n                \n                    \n                        Default value : computed(\n    (): Readonly> => {\n      if (!this.enabled()) {\n        return [] as SignalValidatorResults;\n      }\n\n      const validators = this.validators();\n      if (validators.length === 0) {\n        return [] as SignalValidatorResults;\n      }\n\n      const value = this.value();\n      const errors: SignalValidationResult[] = [];\n\n      for (const validator of validators) {\n        if (!validator.validate(value)) {\n          errors.push({ control: this as any, key: validator.key, config: validator.config });\n        }\n      }\n\n      return errors as SignalValidatorResults;\n    }\n  )\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:151\n                        \n                    \n\n            \n                \n                    Errors.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        invalid\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => this.status() === 'INVALID')\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:209\n                        \n                    \n\n            \n                \n                    Whether the control is in invalid state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.#key.asReadonly()\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:95\n                        \n                    \n\n            \n                \n                    When the control is a child of a control container, this reactive value exposes the key to which it belongs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : this.#parent.asReadonly()\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:84\n                        \n                    \n\n            \n                \n                    When the control is a child of a control container, this reactive value exposes a reference to its parent.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed((): string | null => {\n    const parent = this.parent();\n    const parentPath = parent?.path();\n    const key = this.key();\n    return parentPath != null && key != null ? `${parentPath}.${key}` : this.defaultKey;\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:101\n                        \n                    \n\n            \n                \n                    When the control is a child of a control container, this reactive value exposes its relative path.\nFor standalone controls it returns the default key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pristine\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.#pristine.asReadonly()\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:216\n                        \n                    \n\n            \n                \n                    A control is pristine if the user has not yet changed the value in the UI.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : computed((): SignalControlStatus => {\n    if (this.disabled()) {\n      return 'DISABLED';\n    } else if (this.errors().length > 0) {\n      return 'INVALID';\n    } else {\n      return 'VALID';\n    }\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:191\n                        \n                    \n\n            \n                \n                    The validation status of the control.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        touched\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.#touched.asReadonly()\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:244\n                        \n                    \n\n            \n                \n                    A control is marked touched once the user has triggered a blur event on it.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        untouched\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => !this.touched())\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:249\n                        \n                    \n\n            \n                \n                    A control is untouched if the user has not yet triggered a blur event on it.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        valid\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => this.status() === 'VALID')\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:204\n                        \n                    \n\n            \n                \n                    The validation status of the control.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        validators\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignalWithTransform | Readonly | >\n\n                    \n                \n                \n                    \n                        Default value : input([] as unknown as Readonly, {\n    transform(\n      input: Readonly | (TValidators extends infer TValidator ? TValidator : never)\n    ): Readonly {\n      return Array.isArray(input) ? input : ([input] as any);\n    },\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:137\n                        \n                    \n\n            \n                \n                    Validators.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal>\n\n                    \n                \n                \n                    \n                        Default value : composeSignal({\n    get: () => this.control()(),\n    set: (value) => this.control().set(value),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:72\n                        \n                    \n\n            \n                \n                    Model value.\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  InputSignal,\n  InputSignalWithTransform,\n  ModelSignal,\n  Signal,\n  WritableSignal,\n  computed,\n  effect,\n  inject,\n  input,\n  model,\n  signal,\n} from '@angular/core';\n\nimport { SignalControlContainer } from './signal-control-container.directive';\nimport { DisabledType, EnabledType } from '../models/disabled-type';\nimport { SignalControlStatus } from '../models/signal-control-status';\nimport {\n  SignalValidationResult,\n  SignalValidator,\n  SignalValidatorKeys,\n  SignalValidatorResultByKey,\n  SignalValidatorResults,\n} from '../models/signal-validator';\nimport { SIGNAL_CONTROL_CONTAINER, SIGNAL_CONTROL_KEY } from '../models/symbols';\nimport { composeSignal } from '../signals/compose-signal';\nimport { interceptSignal } from '../signals/intercept-signal';\nimport { SIGNAL_CONTROL_STATUS_CLASSES } from '../tokens/signal-control-status-classes.token';\n\n// TODO: DOM attributes/validators, from CVA\n// TODO: set id for label and aria description for errors\n\n/**\n * Control directive.\n */\n@Directive({\n  selector: `[ngxControl]`,\n  standalone: true,\n  host: {\n    '[class]': 'classList()',\n    '[attr.disabled]': 'disabledAttribute()',\n  },\n  exportAs: 'ngxControl',\n})\nexport class SignalControlDirective[] = []> {\n  private readonly statusClasses = inject(SIGNAL_CONTROL_STATUS_CLASSES);\n\n  /**\n   * Model.\n   */\n  readonly control: InputSignal>> = input.required>>({\n    alias: 'ngxControl',\n  });\n\n  /**\n   * Disabled controls are exempt from validation checks and are not included in the aggregate value of their ancestor controls.\n   */\n  readonly disabled: ModelSignal> = model(false as DisabledType, { alias: 'ngxDisabled' });\n\n  /**\n   * Indicates if the control is not disabled.\n   */\n  readonly enabled: WritableSignal> = composeSignal>({\n    get: () => !this.disabled() as EnabledType,\n    set: (enabled) => this.disabled.set(!enabled as DisabledType),\n  });\n\n  /**\n   * Model value.\n   */\n  readonly value: WritableSignal> = composeSignal({\n    get: () => this.control()(),\n    set: (value) => this.control().set(value),\n  });\n\n  readonly #parent: WritableSignal | null> = signal | null>(\n    null\n  );\n\n  /**\n   * When the control is a child of a control container, this reactive value exposes a reference to its parent.\n   */\n  readonly parent: Signal | null> = this.#parent.asReadonly();\n\n  /**\n   * Default key when the control is not a child of a control container.\n   */\n  readonly defaultKey: string = 'control';\n  readonly #key: WritableSignal = signal(null);\n\n  /**\n   * When the control is a child of a control container, this reactive value exposes the key to which it belongs.\n   */\n  readonly key: Signal = this.#key.asReadonly();\n\n  /**\n   * When the control is a child of a control container, this reactive value exposes its relative path.\n   * For standalone controls it returns the default key.\n   */\n  readonly path: Signal = computed((): string | null => {\n    const parent = this.parent();\n    const parentPath = parent?.path();\n    const key = this.key();\n    return parentPath != null && key != null ? `${parentPath}.${key}` : this.defaultKey;\n  });\n\n  /**\n   * @internal\n   */\n  protected readonly registerControl = effect(\n    (cleanup) => {\n      const control = this.control();\n      const controlContainer: SignalControlContainer | undefined = (control as any)[SIGNAL_CONTROL_CONTAINER];\n      const controlKey: string | number | undefined = (control as any)[SIGNAL_CONTROL_KEY];\n\n      if (controlContainer == null || controlKey == null) {\n        return;\n      }\n\n      controlContainer.addControl(controlKey, this as unknown as SignalControlDirective);\n      this.#parent.set(controlContainer);\n      this.#key.set(controlKey);\n\n      cleanup(() => {\n        controlContainer.removeControl(controlKey);\n        this.#parent.set(null);\n        this.#key.set(null);\n      });\n    },\n    { allowSignalWrites: true }\n  );\n\n  /**\n   * Validators.\n   */\n  readonly validators: InputSignalWithTransform,\n    Readonly | (TValidators extends infer TValidator ? TValidator : never)\n  > = input([] as unknown as Readonly, {\n    transform(\n      input: Readonly | (TValidators extends infer TValidator ? TValidator : never)\n    ): Readonly {\n      return Array.isArray(input) ? input : ([input] as any);\n    },\n  });\n\n  /**\n   * Errors.\n   */\n  readonly errors: Signal>> = computed(\n    (): Readonly> => {\n      if (!this.enabled()) {\n        return [] as SignalValidatorResults;\n      }\n\n      const validators = this.validators();\n      if (validators.length === 0) {\n        return [] as SignalValidatorResults;\n      }\n\n      const value = this.value();\n      const errors: SignalValidationResult[] = [];\n\n      for (const validator of validators) {\n        if (!validator.validate(value)) {\n          errors.push({ control: this as any, key: validator.key, config: validator.config });\n        }\n      }\n\n      return errors as SignalValidatorResults;\n    }\n  );\n\n  readonly #errorMap: Signal>> = computed(\n    () => new Map>(this.errors().map((error) => [error.key, error]))\n  );\n\n  /**\n   * Reactive value of a specific error.\n   */\n  error>(\n    errorKey: K\n  ): SignalValidatorResultByKey | undefined {\n    return this.#errorMap().get(errorKey) as any;\n  }\n\n  /**\n   * The validation status of the control.\n   */\n  readonly status: Signal = computed((): SignalControlStatus => {\n    if (this.disabled()) {\n      return 'DISABLED';\n    } else if (this.errors().length > 0) {\n      return 'INVALID';\n    } else {\n      return 'VALID';\n    }\n  });\n\n  /**\n   * The validation status of the control.\n   */\n  readonly valid: Signal = computed(() => this.status() === 'VALID');\n\n  /**\n   * Whether the control is in invalid state.\n   */\n  readonly invalid: Signal = computed(() => this.status() === 'INVALID');\n\n  readonly #pristine: WritableSignal = signal(true);\n\n  /**\n   * A control is pristine if the user has not yet changed the value in the UI.\n   */\n  readonly pristine: Signal = this.#pristine.asReadonly();\n\n  /**\n   * A control is dirty if the user has changed the value in the UI.\n   */\n  readonly dirty: Signal = computed(() => !this.pristine());\n\n  /**\n   * Marks the control as pristine.\n   * TODO: Remove\n   */\n  markAsPristine(): void {\n    this.#pristine.set(true);\n  }\n\n  /**\n   * Marks the control as dirty. A control becomes dirty when the control's value is changed through the UI; compare markAsTouched.\n   * TODO: Remove\n   */\n  markAsDirty(): void {\n    this.#pristine.set(false);\n  }\n\n  readonly #touched: WritableSignal = signal(false);\n\n  /**\n   * A control is marked touched once the user has triggered a blur event on it.\n   */\n  readonly touched: Signal = this.#touched.asReadonly();\n\n  /**\n   * A control is untouched if the user has not yet triggered a blur event on it.\n   */\n  readonly untouched: Signal = computed(() => !this.touched());\n\n  /**\n   * Marks the control as touched. A control is touched by focus and blur events that do not change the value.\n   * TODO: Remove\n   */\n  markAsTouched(): void {\n    this.#touched.set(true);\n  }\n\n  /**\n   * Marks the control as untouched.\n   * TODO: Remove\n   */\n  markAsUntouched(): void {\n    this.#touched.set(false);\n  }\n\n  /**\n   * Sync value and disabled statuses.\n   * @internal\n   */\n  protected readonly syncDisabled = effect((cleanup) => {\n    const disabledInterceptor = interceptSignal(this.disabled, {\n      onSet: (disabled) => {\n        if (disabled) {\n          this.control().set(undefined as any);\n        }\n      },\n    });\n\n    const valueInterceptor = interceptSignal(this.control(), {\n      onSet: (value) => {\n        if (value !== undefined) {\n          this.disabled.set(false);\n        }\n      },\n    });\n\n    cleanup(() => {\n      disabledInterceptor.restore();\n      valueInterceptor.restore();\n    });\n  });\n\n  /**\n   * @internal\n   */\n  protected readonly disabledAttribute = computed(() => (this.disabled() ? '' : null));\n\n  /**\n   * Class list to style the input.\n   * @internal\n   */\n  protected readonly classList: Signal = computed(() => ({\n    [this.statusClasses.valid]: this.valid(),\n    [this.statusClasses.invalid]: this.invalid(),\n    [this.statusClasses.pristine]: this.pristine(),\n    [this.statusClasses.dirty]: this.dirty(),\n    [this.statusClasses.touched]: this.touched(),\n    [this.statusClasses.untouched]: this.untouched(),\n    [this.statusClasses.disabled]: this.disabled(),\n  }));\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignalControlErrorComponent.html":{"url":"components/SignalControlErrorComponent.html","title":"component - SignalControlErrorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SignalControlErrorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/signal-control-error.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component to display form errors.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-control-error\n            \n\n            \n                Standalone\n                true\n            \n\n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n/**\n * Component to display form errors.\n */\n@Component({\n  selector: 'ngx-control-error',\n  template: '',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SignalControlErrorComponent {}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'SignalControlErrorComponent', 'selector': 'ngx-control-error'}];\n    var DIRECTIVES = [{'name': 'InputTextControlValueAccessorDirective', 'selector': 'input[type=\"text\"][ngxControl][ngxTextInput]'},{'name': 'SignalControlDirective', 'selector': '[ngxControl]'},{'name': 'SignalControlErrorDirective', 'selector': 'ng-template[ngxError]'},{'name': 'SignalFormGroupDirective', 'selector': '[ngxFormGroup]'}];\n    var ACTUAL_COMPONENT = {'name': 'SignalControlErrorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SignalControlErrorDirective.html":{"url":"directives/SignalControlErrorDirective.html","title":"directive - SignalControlErrorDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  SignalControlErrorDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/directives/signal-control-error.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Structural directive for a form control error.\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        ng-template[ngxError]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxError\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                ngxError\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                ngTemplateContextGuard\n                            \n                            \n                                    Static\n                                ngTemplateGuard_ngxError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        ngTemplateContextGuard\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngTemplateContextGuard(directive: SignalControlErrorDirective, context)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-error.directive.ts:64\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TKey\n                                    TConfig\n                                    TValidationResult\n                            \n                        \n                    \n\n            \n                \n                        Directive context guard.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                directive\n                                            \n                                                            SignalControlErrorDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        ngTemplateGuard_ngxError\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngTemplateGuard_ngxError(dir: SignalControlErrorDirective, state: TValidationResult | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-error.directive.ts:50\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TKey\n                                    TConfig\n                                    TValidationResult\n                            \n                        \n                    \n\n            \n                \n                        Type guard to return correct type for structural directive.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dir\n                                            \n                                                            SignalControlErrorDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                state\n                                            \n                                                        TValidationResult | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     TValidationResult\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ngxError\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-error.directive.ts:26\n                        \n                    \n\n            \n                \n                    Control error.\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, TemplateRef, ViewContainerRef, effect, inject, input, untracked } from '@angular/core';\n\nimport { SignalValidationResult } from '../models/signal-validator';\nimport { SIGNAL_CONTROL_ERROR_STRATEGY } from '../tokens/signal-control-error-strategy.token';\n\n/**\n * Structural directive for a form control error.\n */\n@Directive({\n  selector: `ng-template[ngxError]`,\n  standalone: true,\n  exportAs: 'ngxError',\n})\nexport class SignalControlErrorDirective\n> {\n  private readonly templateRef = inject(TemplateRef);\n  private readonly vcr = inject(ViewContainerRef);\n  private readonly errorStrategy = inject(SIGNAL_CONTROL_ERROR_STRATEGY);\n\n  /**\n   * Control error.\n   */\n  readonly ngxError = input.required();\n\n  private rendered = false;\n\n  /**\n   * @internal\n   */\n  protected readonly watchErrorChanges = effect(() => {\n    const error = this.ngxError();\n    const shouldRender: boolean = error != null && this.errorStrategy(error.control);\n\n    if (error != null && shouldRender && !this.rendered) {\n      // TODO: remove untracked once angular does not track when creating a view\n      untracked(() => this.vcr.createEmbeddedView(this.templateRef, { $implicit: error.config }));\n      this.rendered = true;\n    } else if (!shouldRender && this.rendered) {\n      untracked(() => this.vcr.clear());\n      this.rendered = false;\n    }\n  });\n\n  /**\n   * Type guard to return correct type for structural directive.\n   */\n  static ngTemplateGuard_ngxError\n  >(\n    dir: SignalControlErrorDirective,\n    state: TValidationResult | undefined\n  ): state is TValidationResult {\n    return state != null;\n  }\n\n  /**\n   * Directive context guard.\n   */\n  static ngTemplateContextGuard\n  >(\n    directive: SignalControlErrorDirective,\n    context: unknown\n  ): context is { $implicit: TConfig } {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignalControlValueAccessor.html":{"url":"classes/SignalControlValueAccessor.html","title":"class - SignalControlValueAccessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignalControlValueAccessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/directives/signal-control-value-accessor.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Signal control value accessor.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                    Readonly\n                                control\n                            \n                            \n                                    Protected\n                                    Readonly\n                                controlDirective\n                            \n                            \n                                    Protected\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                nativeElement\n                            \n                            \n                                    Readonly\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                markAsTouched\n                            \n                            \n                                onValueUpdated\n                            \n                            \n                                updateValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                            Readonly\n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>>\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-value-accessor.directive.ts:29\n                        \n                    \n\n            \n                \n                    Model control.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        controlDirective\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>>(SignalControlDirective, {\n    self: true,\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-value-accessor.directive.ts:12\n                        \n                    \n\n            \n                \n                    Reference to the control directive.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-value-accessor.directive.ts:19\n                        \n                    \n\n            \n                \n                    Reference to the host element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        nativeElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TElement\n\n                    \n                \n                \n                    \n                        Default value : this.elementRef.nativeElement\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-value-accessor.directive.ts:24\n                        \n                    \n\n            \n                \n                    Native element where the directive is applied.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal>\n\n                    \n                \n                \n                    \n                        Default value : computed(() => this.control()())\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-value-accessor.directive.ts:34\n                        \n                    \n\n            \n                \n                    Model value.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        markAsTouched\n                        \n                    \n                \n            \n            \n                \nmarkAsTouched()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-value-accessor.directive.ts:55\n                        \n                    \n\n\n            \n                \n                        Marks the control as touched. A control is touched by focus and blur events that do not change the value.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onValueUpdated\n                        \n                    \n                \n            \n            \n                \nonValueUpdated(value: Readonly)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-value-accessor.directive.ts:40\n                        \n                    \n\n\n            \n                \n                        Event callback when the value changes that can be used to reflect the state to the DOM.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Readonly\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateValue\n                        \n                    \n                \n            \n            \n                \nupdateValue(value: Readonly)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-value-accessor.directive.ts:47\n                        \n                    \n\n\n            \n                \n                        Updates the underlying value of the control and marks it as dirty.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Readonly\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ElementRef, InputSignal, Signal, WritableSignal, computed, effect, inject, untracked } from '@angular/core';\n\nimport { SignalControlDirective } from './signal-control.directive';\n\n/**\n * Signal control value accessor.\n */\nexport abstract class SignalControlValueAccessor {\n  /**\n   * Reference to the control directive.\n   */\n  protected readonly controlDirective = inject>>(SignalControlDirective, {\n    self: true,\n  });\n\n  /**\n   * Reference to the host element.\n   */\n  protected readonly elementRef: ElementRef = inject(ElementRef);\n\n  /**\n   * Native element where the directive is applied.\n   */\n  protected readonly nativeElement: TElement = this.elementRef.nativeElement;\n\n  /**\n   * Model control.\n   */\n  abstract readonly control: InputSignal>>;\n\n  /**\n   * Model value.\n   */\n  readonly value: Signal> = computed(() => this.control()());\n\n  /**\n   * Event callback when the value changes that can be used to reflect the state to the DOM.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onValueUpdated(value: Readonly): void {\n    return; // Default noop implementation\n  }\n\n  /**\n   * Updates the underlying value of the control and marks it as dirty.\n   */\n  updateValue(value: Readonly): void {\n    this.control().set(value);\n    this.controlDirective.markAsDirty();\n  }\n\n  /**\n   * Marks the control as touched. A control is touched by focus and blur events that do not change the value.\n   */\n  markAsTouched(): void {\n    this.controlDirective.markAsTouched();\n  }\n\n  /**\n   * @internal\n   */\n  protected readonly watchValueChanges = effect(() => {\n    const control = this.control();\n    const value = control();\n    untracked(() => this.onValueUpdated(value));\n  });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SignalFormGroupDirective.html":{"url":"directives/SignalFormGroupDirective.html","title":"directive - SignalFormGroupDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  SignalFormGroupDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/directives/signal-form-group.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Form group directive.\n\n            \n\n            \n                Extends\n            \n            \n                            SignalControlContainer\n            \n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxFormGroup]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxFormGroup\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                control\n                            \n                            \n                                    \n                                    Readonly\n                                defaultKey\n                            \n                            \n                                    Protected\n                                    Readonly\n                                cleanup\n                            \n                            \n                                    Protected\n                                    Readonly\n                                controlSignalsMap\n                            \n                            \n                                    \n                                pristine\n                            \n                            \n                                    \n                                    Readonly\n                                status\n                            \n                            \n                                    \n                                touched\n                            \n                            \n                                    Readonly\n                                dirty\n                            \n                            \n                                    Readonly\n                                disabled\n                            \n                            \n                                    Readonly\n                                enabled\n                            \n                            \n                                    Readonly\n                                errors\n                            \n                            \n                                    Readonly\n                                invalid\n                            \n                            \n                                    Readonly\n                                key\n                            \n                            \n                                    Readonly\n                                parent\n                            \n                            \n                                    Readonly\n                                path\n                            \n                            \n                                    Readonly\n                                untouched\n                            \n                            \n                                    Readonly\n                                valid\n                            \n                            \n                                    Readonly\n                                validators\n                            \n                            \n                                    Readonly\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                addControl\n                            \n                            \n                                    Protected\n                                brandSignal\n                            \n                            \n                                    \n                                markAsDirty\n                            \n                            \n                                    \n                                markAsPristine\n                            \n                            \n                                    \n                                markAsTouched\n                            \n                            \n                                    \n                                markAsUntouched\n                            \n                            \n                                removeControl\n                            \n                            \n                                error\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-form-group.directive.ts:34\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    K\n                            \n                        \n                    \n\n            \n                \n                        Returns a signal with the value of the form group at a given key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     WritableSignal>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addControl\n                        \n                    \n                \n            \n            \n                \naddControl(key: K, signalControlDirective: SignalControlDirective<>)\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlContainer\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlContainer:84\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    K\n                            \n                        \n                    \n\n            \n                \n                        Adds a control to the container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                signalControlDirective\n                                            \n                                                            SignalControlDirective<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        brandSignal\n                        \n                    \n                \n            \n            \n                \n                        \n                    brandSignal(writableSignal: S, key: K)\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlContainer\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlContainer:98\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    K\n                                    S\n                            \n                        \n                    \n\n            \n                \n                        Adds hidden properties to a signal to hold a reference to the control container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                writableSignal\n                                            \n                                                        S\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     S\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        markAsDirty\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsDirty()\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlDirective:56\n\n                        \n                    \n\n\n            \n                \n                        Marks all the child controls as dirty.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        markAsPristine\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsPristine()\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlDirective:49\n\n                        \n                    \n\n\n            \n                \n                        Marks all the child controls as pristine.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        markAsTouched\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsTouched()\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlDirective:70\n\n                        \n                    \n\n\n            \n                \n                        Marks all the child controls as touched.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        markAsUntouched\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsUntouched()\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlDirective:77\n\n                        \n                    \n\n\n            \n                \n                        Marks all the child controls as untouched.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeControl\n                        \n                    \n                \n            \n            \n                \nremoveControl(key: K)\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlContainer\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlContainer:91\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    K\n                            \n                        \n                    \n\n            \n                \n                        Removes a control from the container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(errorKey: K)\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlDirective:182\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    K\n                            \n                        \n                    \n\n            \n                \n                        Reactive value of a specific error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errorKey\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SignalValidatorResultByKey | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>>\n\n                    \n                \n                \n                    \n                        Default value : input.required>\n  >({ alias: 'ngxFormGroup' })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:22\n\n                        \n                    \n\n            \n                \n                    Model.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        defaultKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'form-group'\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:29\n\n                        \n                    \n\n            \n                \n                    Default key when the control is not a child of a control container.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        cleanup\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DestroyRef).onDestroy(() => this.#controlDirectivesMap.clear())\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlContainer\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlContainer:111\n\n                        \n                    \n\n            \n                \n                    Cleans up any references to child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        controlSignalsMap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {}\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlContainer\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlContainer:21\n\n                        \n                    \n\n            \n                \n                    Map of signals corresponding to the child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        pristine\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n    return !this.#controlDirectivesMap.values().some((directive) => directive.dirty());\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:42\n\n                        \n                    \n\n            \n                \n                    A control is pristine if the user has not yet changed the value in the UI in any of its child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n    // If the form group is invalid, there is no need to keep checking\n    if (this.errors().length > 0) {\n      return 'INVALID';\n    }\n\n    // Otherwise, check the status of all child controls, and as soon as a child control is invalid, return\n    const controlDirectiveStatuses = this.#controlDirectivesMap.values().map(({ status }) => status());\n    return controlDirectiveStatuses.some((status) => status === 'INVALID') ? 'INVALID' : 'VALID';\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:28\n\n                        \n                    \n\n            \n                \n                    The validation status of the form group and its child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        touched\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n    return this.#controlDirectivesMap.values().some((directive) => directive.touched());\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:63\n\n                        \n                    \n\n            \n                \n                    A control is marked touched once the user has triggered a blur event on it or in any of its child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        dirty\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => !this.pristine())\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:221\n\n                        \n                    \n\n            \n                \n                    A control is dirty if the user has changed the value in the UI.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ModelSignal>\n\n                    \n                \n                \n                    \n                        Default value : model(false as DisabledType, { alias: 'ngxDisabled' })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:59\n\n                        \n                    \n\n            \n                \n                    Disabled controls are exempt from validation checks and are not included in the aggregate value of their ancestor controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WritableSignal>\n\n                    \n                \n                \n                    \n                        Default value : composeSignal>({\n    get: () => !this.disabled() as EnabledType,\n    set: (enabled) => this.disabled.set(!enabled as DisabledType),\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:64\n\n                        \n                    \n\n            \n                \n                    Indicates if the control is not disabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal>>\n\n                    \n                \n                \n                    \n                        Default value : computed(\n    (): Readonly> => {\n      if (!this.enabled()) {\n        return [] as SignalValidatorResults;\n      }\n\n      const validators = this.validators();\n      if (validators.length === 0) {\n        return [] as SignalValidatorResults;\n      }\n\n      const value = this.value();\n      const errors: SignalValidationResult[] = [];\n\n      for (const validator of validators) {\n        if (!validator.validate(value)) {\n          errors.push({ control: this as any, key: validator.key, config: validator.config });\n        }\n      }\n\n      return errors as SignalValidatorResults;\n    }\n  )\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:151\n\n                        \n                    \n\n            \n                \n                    Errors.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        invalid\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => this.status() === 'INVALID')\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:209\n\n                        \n                    \n\n            \n                \n                    Whether the control is in invalid state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.#key.asReadonly()\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:95\n\n                        \n                    \n\n            \n                \n                    When the control is a child of a control container, this reactive value exposes the key to which it belongs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : this.#parent.asReadonly()\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:84\n\n                        \n                    \n\n            \n                \n                    When the control is a child of a control container, this reactive value exposes a reference to its parent.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed((): string | null => {\n    const parent = this.parent();\n    const parentPath = parent?.path();\n    const key = this.key();\n    return parentPath != null && key != null ? `${parentPath}.${key}` : this.defaultKey;\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:101\n\n                        \n                    \n\n            \n                \n                    When the control is a child of a control container, this reactive value exposes its relative path.\nFor standalone controls it returns the default key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        untouched\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => !this.touched())\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:249\n\n                        \n                    \n\n            \n                \n                    A control is untouched if the user has not yet triggered a blur event on it.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        valid\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => this.status() === 'VALID')\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:204\n\n                        \n                    \n\n            \n                \n                    The validation status of the control.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        validators\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignalWithTransform | Readonly | >\n\n                    \n                \n                \n                    \n                        Default value : input([] as unknown as Readonly, {\n    transform(\n      input: Readonly | (TValidators extends infer TValidator ? TValidator : never)\n    ): Readonly {\n      return Array.isArray(input) ? input : ([input] as any);\n    },\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:137\n\n                        \n                    \n\n            \n                \n                    Validators.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal>\n\n                    \n                \n                \n                    \n                        Default value : composeSignal({\n    get: () => this.control()(),\n    set: (value) => this.control().set(value),\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:72\n\n                        \n                    \n\n            \n                \n                    Model value.\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, InputSignal, WritableSignal, input, untracked } from '@angular/core';\n\nimport { SignalControlContainer } from './signal-control-container.directive';\nimport { SignalValidator } from '../models/signal-validator';\nimport { selectObjectProperty } from '../signals/select-object-property';\n\n/**\n * Form group directive.\n */\n@Directive({\n  selector: `[ngxFormGroup]`,\n  standalone: true,\n  exportAs: 'ngxFormGroup',\n})\nexport class SignalFormGroupDirective[] = []\n> extends SignalControlContainer {\n  /**\n   * Model.\n   */\n  override readonly control: InputSignal>> = input.required>\n  >({ alias: 'ngxFormGroup' });\n\n  /**\n   * Default key when the control is not a child of a control container.\n   */\n  override readonly defaultKey: string = 'form-group';\n\n  /**\n   * Returns a signal with the value of the form group at a given key.\n   */\n  get(key: K): WritableSignal> {\n    return this.controlSignalsMap[key] ?? this.createControlSignal(key);\n  }\n\n  private createControlSignal(key: K): WritableSignal> {\n    const sourceSignal = untracked(() => this.control());\n    const controlSignal = selectObjectProperty(sourceSignal, key);\n    this.controlSignalsMap[key] = this.brandSignal(controlSignal, key);\n    return controlSignal;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SignalInterceptor.html":{"url":"interfaces/SignalInterceptor.html","title":"interface - SignalInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SignalInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/signals/intercept-signal.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface returned by interceptSignal that supports restoring the behavior.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        restore\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        restore\n                        \n                    \n                \n            \n            \n                \nrestore()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/signals/intercept-signal.ts:10\n                        \n                    \n\n\n            \n                \n                        Restores the original signal as it was.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { WritableSignal } from '@angular/core';\n\n/**\n * Interface returned by interceptSignal that supports restoring the behavior.\n */\nexport interface SignalInterceptor {\n  /**\n   * Restores the original signal as it was.\n   */\n  restore(): void;\n}\n\n/**\n * Method that intercepts a signal setter and calls a function when that happens. Returns a reference to restore it as it was.\n */\nexport function interceptSignal(signal: WritableSignal, { onSet }: { onSet(value: T): void }): SignalInterceptor {\n  const originalSet = signal.set;\n  signal.set = (value: T) => {\n    originalSet(value);\n    onSet(value);\n  };\n  return {\n    restore: () => {\n      signal.set = originalSet;\n    },\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SignalValidationResult.html":{"url":"interfaces/SignalValidationResult.html","title":"interface - SignalValidationResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SignalValidationResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/signal-validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Validation result type of a validator.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            config\n                                        \n                                \n                                \n                                        \n                                            control\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:     Readonly\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Readonly\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Validator configuration.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        control\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        control:         SignalControlDirective\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SignalControlDirective\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Parent control of validation error.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:     TKey\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TKey\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Error key.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { SignalControlDirective } from './../directives/signal-control.directive';\n/**\n * Type of a validator.\n */\nexport interface SignalValidator {\n  /**\n   * Validate function, return true if it is valid.\n   */\n  validate(value: Readonly): boolean;\n\n  /**\n   * Error key.\n   */\n  readonly key: TKey;\n\n  /**\n   * Validator configuration.\n   */\n  readonly config: Readonly;\n}\n\n/**\n * Validation result type of a validator.\n */\nexport interface SignalValidationResult {\n  /**\n   * Parent control of validation error.\n   */\n  readonly control: SignalControlDirective[]>;\n\n  /**\n   * Error key.\n   */\n  readonly key: TKey;\n\n  /**\n   * Validator configuration.\n   */\n  readonly config: Readonly;\n}\n\n/**\n * Type utility to derive the validator results from a collection of validators.\n */\nexport type SignalValidatorResults = TValidators extends (infer TValidator)[]\n  ? TValidator extends SignalValidator\n    ? SignalValidationResult[]\n    : never\n  : never;\n\n/**\n * Type utility to derive the validator keys from a collection of validators.\n */\nexport type SignalValidatorKeys = TValidators extends (infer TValidator)[]\n  ? TValidator extends SignalValidator\n    ? Readonly\n    : never\n  : never;\n\n/**\n * Type utility to get a validator result by key from a collection of validators.\n */\nexport type SignalValidatorResultByKey\n> = Extract extends (infer TValidatorResult)[] ? Readonly : never,\n  { key: K }\n>;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SignalValidator.html":{"url":"interfaces/SignalValidator.html","title":"interface - SignalValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SignalValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/signal-validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Type of a validator.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            config\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        validate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(value: Readonly)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/models/signal-validator.ts:9\n                        \n                    \n\n\n            \n                \n                        Validate function, return true if it is valid.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Readonly\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:     Readonly\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Readonly\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Validator configuration.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:     TKey\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TKey\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Error key.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { SignalControlDirective } from './../directives/signal-control.directive';\n/**\n * Type of a validator.\n */\nexport interface SignalValidator {\n  /**\n   * Validate function, return true if it is valid.\n   */\n  validate(value: Readonly): boolean;\n\n  /**\n   * Error key.\n   */\n  readonly key: TKey;\n\n  /**\n   * Validator configuration.\n   */\n  readonly config: Readonly;\n}\n\n/**\n * Validation result type of a validator.\n */\nexport interface SignalValidationResult {\n  /**\n   * Parent control of validation error.\n   */\n  readonly control: SignalControlDirective[]>;\n\n  /**\n   * Error key.\n   */\n  readonly key: TKey;\n\n  /**\n   * Validator configuration.\n   */\n  readonly config: Readonly;\n}\n\n/**\n * Type utility to derive the validator results from a collection of validators.\n */\nexport type SignalValidatorResults = TValidators extends (infer TValidator)[]\n  ? TValidator extends SignalValidator\n    ? SignalValidationResult[]\n    : never\n  : never;\n\n/**\n * Type utility to derive the validator keys from a collection of validators.\n */\nexport type SignalValidatorKeys = TValidators extends (infer TValidator)[]\n  ? TValidator extends SignalValidator\n    ? Readonly\n    : never\n  : never;\n\n/**\n * Type utility to get a validator result by key from a collection of validators.\n */\nexport type SignalValidatorResultByKey\n> = Extract extends (infer TValidatorResult)[] ? Readonly : never,\n  { key: K }\n>;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/components/signal-control-error.component.ts\n            \n            component\n            SignalControlErrorComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/control-value-accessors/input-text-control-value-accessor.directive.ts\n            \n            directive\n            InputTextControlValueAccessorDirective\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/lib/directives/signal-control-container.directive.ts\n            \n            class\n            SignalControlContainer\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/lib/directives/signal-control-error.directive.ts\n            \n            directive\n            SignalControlErrorDirective\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/directives/signal-control-value-accessor.directive.ts\n            \n            class\n            SignalControlValueAccessor\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/lib/directives/signal-control.directive.ts\n            \n            directive\n            SignalControlDirective\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/lib/directives/signal-form-group.directive.ts\n            \n            directive\n            SignalFormGroupDirective\n            \n                100 %\n                (29/29)\n            \n        \n        \n            \n                \n                src/lib/models/signal-validator.ts\n            \n            interface\n            SignalValidationResult\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/models/signal-validator.ts\n            \n            interface\n            SignalValidator\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/signals/compose-signal.ts\n            \n            function\n            composeSignal\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/signals/intercept-signal.ts\n            \n            interface\n            SignalInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/lib/signals/intercept-signal.ts\n            \n            function\n            interceptSignal\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/signals/select-object-property.ts\n            \n            function\n            selectObjectProperty\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/tokens/signal-control-error-strategy.token.ts\n            \n            variable\n            SIGNAL_CONTROL_ERROR_STRATEGY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/tokens/signal-control-status-classes.token.ts\n            \n            variable\n            SIGNAL_CONTROL_STATUS_CLASSES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/validators/max-length.ts\n            \n            variable\n            maxLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/validators/required.ts\n            \n            variable\n            required\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/validators/required.ts\n            \n            variable\n            requiredValidator\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : ^17.2.0\n        \n            @angular/common : ^17.2.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            composeSignal   (src/.../compose-signal.ts)\n                        \n                        \n                            interceptSignal   (src/.../intercept-signal.ts)\n                        \n                        \n                            selectObjectProperty   (src/.../select-object-property.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/signals/compose-signal.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        composeSignal\n                        \n                    \n                \n            \n            \n                \ncomposeSignal(__namedParameters: {get: T, set: void})\n                \n            \n\n\n\n\n            \n                \n                        Creates a writable signal from a pair of getter and setter.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                get\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                set\n                                            \n                                                            void\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     WritableSignal\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/signals/intercept-signal.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        interceptSignal\n                        \n                    \n                \n            \n            \n                \ninterceptSignal(signal: WritableSignal, __namedParameters: {onSet: void})\n                \n            \n\n\n\n\n            \n                \n                        Method that intercepts a signal setter and calls a function when that happens. Returns a reference to restore it as it was.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signal\n                                            \n                                                        WritableSignal\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                onSet\n                                            \n                                                            void\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SignalInterceptor\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/signals/select-object-property.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        selectObjectProperty\n                        \n                    \n                \n            \n            \n                \nselectObjectProperty(sourceSignal: WritableSignal, key: K)\n                \n            \n\n\n\n\n            \n                \n                        Given a writable signal with an object value returns a signal that represents the value of a property.\nIt is also writable, when updated emits a new value treating it as immutable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sourceSignal\n                                            \n                                                        WritableSignal\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     WritableSignal>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nngx-signal-forms\nThis library was generated with Nx.\nRunning unit tests\nRun nx test ngx-signal-forms to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    4 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DisabledType   (src/.../disabled-type.ts)\n                        \n                        \n                            EnabledType   (src/.../disabled-type.ts)\n                        \n                        \n                            SignalControlErrorStrategy   (src/.../signal-control-error-strategy.ts)\n                        \n                        \n                            SignalControlStatus   (src/.../signal-control-status.ts)\n                        \n                        \n                            SignalControlStatusClasses   (src/.../signal-control-status-classes.ts)\n                        \n                        \n                            SignalValidatorKeys   (src/.../signal-validator.ts)\n                        \n                        \n                            SignalValidatorResultByKey   (src/.../signal-validator.ts)\n                        \n                        \n                            SignalValidatorResults   (src/.../signal-validator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/models/disabled-type.ts\n    \n    \n        \n            \n                \n                    \n                    DisabledType\n                \n            \n            \n                \n                    Checks whether a control can be disabled based on its type.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnabledType\n                \n            \n            \n                \n                    Checks whether a control can be enabled based on its type.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/lib/models/signal-control-error-strategy.ts\n    \n    \n        \n            \n                \n                    \n                    SignalControlErrorStrategy\n                \n            \n            \n                \n                    Generic strategy to display form errors based on their status.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/lib/models/signal-control-status.ts\n    \n    \n        \n            \n                \n                    \n                    SignalControlStatus\n                \n            \n            \n                \n                        \"VALID\" | \"INVALID\" | \"DISABLED\"\n\n                \n            \n        \n    \n    src/lib/models/signal-control-status-classes.ts\n    \n    \n        \n            \n                \n                    \n                    SignalControlStatusClasses\n                \n            \n            \n                \n                    Type to define all CSS classes automatically added by the control directive.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/lib/models/signal-validator.ts\n    \n    \n        \n            \n                \n                    \n                    SignalValidatorKeys\n                \n            \n            \n                \n                    Type utility to derive the validator keys from a collection of validators.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SignalValidatorResultByKey\n                \n            \n            \n                \n                    Type utility to get a validator result by key from a collection of validators.\n\n                \n            \n            \n                \n                        Extract\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SignalValidatorResults\n                \n            \n            \n                \n                    Type utility to derive the validator results from a collection of validators.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            maxLength   (src/.../max-length.ts)\n                        \n                        \n                            required   (src/.../required.ts)\n                        \n                        \n                            requiredValidator   (src/.../required.ts)\n                        \n                        \n                            SIGNAL_CONTROL_ERROR_STRATEGY   (src/.../signal-control-error-strategy.token.ts)\n                        \n                        \n                            SIGNAL_CONTROL_STATUS_CLASSES   (src/.../signal-control-status-classes.token.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/validators/max-length.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (maxLength: number): SignalValidator => ({\n  key: 'maxLength',\n  validate(value: string | null | undefined): boolean {\n    return value != null && value.length \n                    \n                \n\n            \n                \n                    Max length validator for text controls.\n\n                \n            \n\n        \n    \n\n    src/lib/validators/required.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): SignalValidator => requiredValidator\n                    \n                \n\n            \n                \n                    Required validator for text controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requiredValidator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SignalValidator\n\n                    \n                \n                \n                    \n                        Default value : {\n  key: 'required',\n  validate(value): boolean {\n    return value != null && value.length > 0;\n  },\n  config: {},\n}\n                    \n                \n\n            \n                \n                    Required validator as a const to avoid creating new instances on every usage.\nTODO: make compatible with other types\n\n                \n            \n\n        \n    \n\n    src/lib/tokens/signal-control-error-strategy.token.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SIGNAL_CONTROL_ERROR_STRATEGY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('ngx-signal-forms.signal-control-error-strategy', {\n  providedIn: 'root',\n  factory(): SignalControlErrorStrategy {\n    return (control) => control.dirty() && control.touched();\n  },\n})\n                    \n                \n\n            \n                \n                    This token defines the default strategy used to display control errors.\n\n                \n            \n\n        \n    \n\n    src/lib/tokens/signal-control-status-classes.token.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SIGNAL_CONTROL_STATUS_CLASSES\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('ngx-signal-forms.signal-control-status-classes', {\n  providedIn: 'root',\n  factory(): SignalControlStatusClasses {\n    return {\n      valid: 'ngx-valid',\n      invalid: 'ngx-invalid',\n      pristine: 'ngx-pristine',\n      dirty: 'ngx-dirty',\n      touched: 'ngx-touched',\n      untouched: 'ngx-untouched',\n      disabled: 'ngx-disabled',\n    };\n  },\n})\n                    \n                \n\n            \n                \n                    This token defines the CSS classes that are added to controls depending on their status.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
