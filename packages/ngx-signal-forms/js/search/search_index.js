var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/directives/InputTextControlValueAccessorDirective.html",[0,0.445,1,1.53]],["body/directives/InputTextControlValueAccessorDirective.html",[0,0.68,1,2.503,2,1.144,3,0.739,4,0.632,5,0.632,6,2.162,7,1.232,8,2.162,9,2.748,10,0.8,11,1.804,12,0.739,13,2.913,14,3.647,15,1.541,16,2.889,17,1.322,18,3.647,19,0.057,20,3.647,21,3.647,22,4.124,23,1.781,24,3.647,25,1.781,26,1.155,27,2.069,28,3.647,29,0.446,30,0.852,31,1.391,32,2.155,33,3.294,34,2.913,35,1.541,36,3.525,37,2.913,38,2.913,39,3.79,40,1.737,41,2.707,42,2.913,43,1.541,44,2.162,45,1.781,46,2.162,47,1.536,48,1.307,49,2.014,50,2.162,51,2.707,52,1.322,53,2.162,54,2.162,55,1.804,56,2.162,57,1.322,58,1.536,59,1.335,60,1.155,61,0.728,62,1.335,63,2.162,64,2.707,65,2.162,66,2.162,67,1.322,68,1.51,69,3.647,70,2.43,71,2.913,72,2.707,73,2.014,74,2.162,75,2.707,76,1.804,77,2.069,78,2.43,79,2.162,80,2.162,81,2.707,82,2.162,83,2.162,84,0.996,85,0.858,86,1.536,87,2.707,88,1.144,89,2.707,90,0.739,91,0.632,92,0.038,93,0.038]],["title/classes/SignalControlContainer.html",[91,0.63,94,1.317]],["body/classes/SignalControlContainer.html",[3,0.407,4,0.348,5,0.348,7,1.176,10,0.827,12,0.407,15,0.994,19,0.058,29,0.246,30,0.55,31,1.22,35,0.994,40,1.522,43,1.523,45,1.149,47,1.335,48,0.746,49,1.617,52,1.149,59,1.212,60,0.746,61,0.706,62,0.862,68,1.403,73,0.728,84,1.046,85,0.472,88,0.994,90,0.407,91,0.681,92,0.025,93,0.025,94,1.617,95,0.63,96,1.808,97,1.191,98,2.329,99,1.88,100,1.688,101,3.028,102,1.22,103,2.786,104,1.959,105,2.045,106,2.014,107,1.88,108,1.88,109,1.149,110,1.88,111,2.645,112,1.479,113,1.617,114,1.241,115,1.88,116,3.204,117,3.204,118,1.522,119,3.061,120,2.09,121,1.568,122,1.335,123,1.568,124,1.335,125,1.88,126,2.486,127,2.645,128,1.76,129,1.335,130,1.88,131,1.88,132,1.88,133,1.335,134,2.77,135,1.88,136,1.491,137,2.206,138,3.229,139,1.88,140,1.568,141,1.88,142,2.182,143,3.061,144,1.88,145,1.491,146,1.88,147,1.88,148,1.88,149,1.88,150,1.491,151,2.206,152,1.568,153,1.568,154,1.879,155,1.523,156,2.645,157,2.14,158,1.568,159,1.88,160,1.88,161,1.568,162,1.335,163,1.88,164,1.88,165,1.88,166,1.88,167,1.88,168,1.88,169,0.862,170,1.491,171,0.994,172,1.88,173,1.88,174,1.88,175,1.491,176,1.568,177,1.568,178,1.568,179,1.424,180,1.568,181,1.335,182,1.568,183,1.491,184,1.88,185,1.88,186,2.09,187,1.491,188,1.88,189,1.88,190,1.491,191,1.88,192,0.846,193,0.993,194,1.149,195,0.472,196,0.407,197,1.88,198,0.993,199,1.491,200,1.491,201,0.728,202,1.491,203,1.491,204,2.88,205,2.353,206,2.353,207,2.353,208,1.491]],["title/directives/SignalControlDirective.html",[0,0.445,102,0.736]],["body/directives/SignalControlDirective.html",[0,0.436,2,0.433,3,0.28,4,0.24,5,0.24,7,1.161,10,0.835,12,0.28,15,0.951,17,0.501,19,0.058,23,0.846,25,1.292,26,0.937,27,0.983,29,0.169,30,0.405,31,1.433,32,1.753,40,1.621,43,1.249,45,1.292,48,0.713,52,1.292,57,0.846,58,0.582,61,0.73,67,1.444,68,1.673,70,2.138,71,2.563,73,1.825,76,0.683,77,0.582,84,1.056,85,0.325,88,1.791,90,0.28,91,0.526,92,0.018,93,0.018,94,1.099,95,0.433,96,1.892,100,1.6,101,2.138,102,0.614,103,2.037,104,1.942,105,1.677,106,1.722,112,1.448,113,1.825,114,1.269,118,1.6,121,1.155,122,1.277,123,1.155,124,1.277,128,1.099,129,1.277,137,1.97,138,2.276,140,1.762,142,2.162,151,2.392,152,1.762,153,1.762,154,2.405,157,1.825,158,1.155,161,1.155,162,1.501,169,1.251,171,1.517,176,1.155,177,1.155,178,1.762,179,1.099,180,1.155,181,1.938,182,1.155,193,1.499,194,1.099,195,0.325,196,0.614,197,0.819,198,0.683,201,0.501,209,0.819,210,1.798,211,1.277,212,1.942,213,1.798,214,2.362,215,1.97,216,1.825,217,1.733,218,1.026,219,1.938,220,1.798,221,1.026,222,1.733,223,1.798,224,1.733,225,1.026,226,1.733,227,1.384,228,1.733,229,1.733,230,1.733,231,2.729,232,1.026,233,1.384,234,1.384,235,1.384,236,1.384,237,1.099,238,1.384,239,1.384,240,1.384,241,0.846,242,1.384,243,1.026,244,1.384,245,2.113,246,1.026,247,1.155,248,1.798,249,1.155,250,2.113,251,1.384,252,1.026,253,1.798,254,1.733,255,1.026,256,2.187,257,2.113,258,1.384,259,1.798,260,1.384,261,2.113,262,1.026,263,1.384,264,1.733,265,1.026,266,1.026,267,1.733,268,1.026,269,1.798,270,1.026,271,1.026,272,1.798,273,1.277,274,1.277,275,1.82,276,1.277,277,1.384,278,1.026,279,1.026,280,1.026,281,1.026,282,1.501,283,0.582,284,0.819,285,0.819,286,1.026,287,1.155,288,1.026,289,1.026,290,1.026,291,1.026,292,0.683,293,0.819,294,1.026,295,1.026,296,1.026,297,1.733,298,1.026,299,1.733,300,1.026,301,1.026,302,1.733,303,2.193,304,1.026,305,1.026,306,1.026,307,1.026,308,1.97,309,1.026,310,1.384,311,1.733,312,1.733,313,1.026,314,1.026,315,1.026,316,1.026,317,1.026,318,1.026,319,1.026,320,1.026,321,1.026,322,1.026,323,1.026,324,1.026,325,1.026,326,1.026,327,1.026,328,1.733,329,1.733,330,1.026,331,1.733,332,1.026,333,1.026,334,1.026,335,1.026,336,0.819,337,1.733,338,0.683,339,1.026,340,1.798,341,1.026,342,1.026,343,1.026,344,1.384,345,1.026,346,1.026,347,1.026]],["title/components/SignalControlErrorComponent.html",[348,1.53,349,1.797]],["body/components/SignalControlErrorComponent.html",[0,0.482,1,1.657,2,1.234,3,0.797,4,0.682,5,0.682,10,0.8,12,0.797,17,1.426,19,0.058,23,2.413,25,1.873,26,1.496,31,1.169,32,1.873,58,1.657,60,1.357,77,2.43,78,2.556,84,1.169,85,0.925,86,1.657,90,0.797,91,0.682,92,0.04,93,0.04,102,0.797,113,1.426,114,1.047,118,1.568,154,2.176,155,1.62,194,1.426,196,0.797,201,1.426,212,1.873,256,1.426,282,2.176,283,1.657,303,2.176,340,2.333,344,3.064,348,2.68,349,3.03,350,3.836,351,2.921,352,2.333,353,2.333,354,2.556,355,3.836,356,3.836,357,3.03,358,1.775,359,3.836,360,2.921,361,2.176,362,2.921,363,1.62,364,4.548,365,2.921,366,2.921,367,2.921,368,3.836,369,2.921,370,2.921,371,2.921,372,2.921,373,2.921,374,2.921,375,3.836,376,4.548,377,2.921,378,2.921,379,2.921,380,2.333,381,2.921,382,1.657,383,2.333,384,2.921]],["title/directives/SignalControlErrorDirective.html",[0,0.445,361,1.53]],["body/directives/SignalControlErrorDirective.html",[0,0.819,2,1.049,3,0.678,4,0.58,5,0.58,7,0.58,10,0.809,12,0.678,17,1.213,19,0.058,23,1.679,25,1.679,26,1.349,27,1.951,29,0.41,30,0.803,31,1.294,32,1.213,35,1.453,40,1.444,48,1.089,57,2.182,59,1.558,60,1.089,61,0.809,62,1.259,68,0.909,84,1.077,85,0.787,88,1.049,90,0.678,91,0.58,92,0.036,93,0.036,96,1.798,114,1.162,118,1.259,124,1.409,128,1.926,134,2.291,155,1.453,194,1.213,196,0.678,201,2.078,249,2.291,256,1.926,282,1.951,283,1.409,293,1.984,303,1.409,338,2.628,358,1.769,361,2.741,363,1.049,380,2.747,385,1.984,386,4.257,387,3.439,388,4.47,389,4.624,390,3.944,391,3.944,392,2.484,393,4.624,394,2.484,395,2.291,396,3.944,397,4.74,398,4.257,399,2.484,400,2.484,401,2.484,402,3.439,403,3.439,404,2.484,405,3.439,406,2.484,407,1.655,408,2.484,409,2.484,410,2.484,411,2.484,412,2.484,413,2.484,414,2.484,415,2.484,416,2.484,417,3.944,418,1.409,419,2.484,420,4.257,421,2.484,422,3.439,423,2.484,424,2.484]],["title/classes/SignalControlValueAccessor.html",[16,1.53,91,0.63]],["body/classes/SignalControlValueAccessor.html",[0,0.642,3,0.662,4,0.567,5,0.567,7,1.243,10,0.852,11,1.617,12,0.662,13,2.702,16,1.919,19,0.058,26,0.769,29,0.4,30,0.79,31,1.416,32,2.3,33,3.666,34,3.111,35,1.429,36,3.366,37,2.702,38,2.702,40,1.68,42,3.366,43,1.78,44,2.702,45,1.652,46,2.702,47,1.919,48,1.234,49,2.241,50,2.702,52,1.652,53,2.702,54,2.702,55,2.254,56,2.702,57,1.652,58,1.919,59,1.239,60,1.072,61,0.731,62,1.239,63,2.702,65,2.702,66,2.702,67,1.652,68,1.426,73,1.652,74,2.702,76,2.595,77,1.919,78,2.808,79,2.702,80,2.702,82,2.702,83,2.702,84,0.924,85,0.769,90,0.662,91,0.567,92,0.036,93,0.036,95,1.025,96,1.99,98,3.366,100,1.426,102,0.662,114,0.662,118,0.888,128,1.652,129,1.376,192,1.376,201,1.185,282,1.919,283,1.376,303,1.376,336,1.938,425,2.426,426,2.426,427,3.895,428,2.426,429,2.426,430,2.426,431,2.426,432,2.426,433,2.426,434,2.426,435,2.426,436,2.426,437,2.426,438,2.426,439,2.426,440,2.426,441,2.426,442,2.426,443,2.426,444,2.426,445,2.426,446,2.426,447,2.426,448,2.426]],["title/directives/SignalFormGroupDirective.html",[0,0.445,382,1.53]],["body/directives/SignalFormGroupDirective.html",[0,0.534,2,0.606,3,0.392,4,0.335,5,0.335,7,1.205,10,0.799,12,0.392,15,1.201,17,0.7,19,0.058,23,1.114,25,1.388,26,0.723,27,1.295,29,0.237,30,0.533,31,1.417,35,0.964,39,3.872,40,1.775,43,1.201,45,1.114,47,0.814,48,0.901,49,1.114,52,1.114,57,0.7,59,1.186,60,0.723,61,0.805,62,0.836,67,1.388,68,1.786,70,2.159,73,1.388,84,0.776,85,0.454,88,1.733,90,0.392,91,0.335,92,0.024,93,0.024,94,1.929,96,0.606,100,1.447,101,2.733,102,1.332,103,2.457,104,1.727,105,1.613,106,1.786,107,1.823,108,1.823,109,0.7,110,1.146,111,1.823,112,1.483,113,1.727,114,1.207,115,1.146,116,2.271,117,2.271,118,1.547,119,2.271,120,1.582,121,0.956,122,0.814,123,0.956,124,1.295,125,1.146,126,2.007,127,1.823,128,0.7,129,1.295,130,1.146,131,1.146,132,1.146,133,0.814,134,2.159,135,1.146,137,2.159,138,2.998,139,1.146,140,1.894,141,1.146,142,2.003,143,2.271,144,1.146,146,1.146,147,1.146,148,1.146,149,1.146,151,2.159,152,1.521,153,1.521,154,2.007,155,1.669,156,3.01,157,2.064,158,0.956,159,1.146,160,1.146,161,0.956,162,1.295,163,1.146,164,1.146,165,1.146,166,1.146,167,1.146,168,1.146,169,1.186,171,1.201,172,1.146,173,1.146,174,1.146,176,0.956,177,0.956,178,1.521,179,0.7,180,0.956,181,2.138,182,0.956,184,1.146,185,1.146,186,1.84,188,1.146,189,1.146,191,1.146,194,0.7,195,0.454,196,0.623,204,2.271,210,2.271,211,1.295,212,1.84,213,2.271,214,2.271,215,1.894,216,1.727,219,1.613,220,1.146,231,1.146,233,1.146,234,1.146,235,1.146,236,1.146,237,0.7,238,1.146,239,1.146,240,1.146,241,0.7,242,1.146,244,1.146,245,1.823,247,0.956,248,2.271,249,1.521,250,2.271,251,1.823,253,2.271,256,1.388,257,1.823,258,1.146,259,1.146,260,1.146,261,1.146,263,1.146,269,1.146,272,1.146,273,0.814,274,0.814,275,1.295,276,0.814,277,1.146,284,1.146,382,1.295,383,3.01,449,1.146,450,1.434,451,1.434,452,1.434,453,1.434,454,2.282,455,1.434,456,1.434,457,1.434,458,1.434,459,1.434,460,1.434,461,1.434,462,1.434,463,1.434,464,1.434,465,1.434,466,1.434,467,1.434,468,1.434,469,1.434]],["title/interfaces/SignalValidationResult.html",[363,1.139,470,1.317]],["body/interfaces/SignalValidationResult.html",[3,0.749,4,0.641,5,0.641,10,0.786,12,0.749,15,1.955,19,0.058,26,0.87,29,0.453,30,0.86,31,1.404,61,0.858,84,0.749,86,1.557,90,1.301,92,0.047,93,0.039,102,1.211,112,1.629,114,0.749,169,1.005,171,1.955,186,1.34,192,1.557,195,1.316,196,1.368,216,2.028,237,1.34,241,2.26,273,2.088,274,2.356,275,2.517,276,2.625,308,2.452,358,1.744,363,1.754,395,2.957,418,1.557,470,1.797,471,1.829,472,1.557,473,1.557,474,2.767,475,3.317,476,2.193,477,1.34,478,1.829,479,2.957,480,2.452,481,2.767,482,1.829,483,1.829,484,2.452,485,2.452,486,1.829,487,2.193,488,1.829]],["title/interfaces/SignalValidator.html",[195,0.854,470,1.317]],["body/interfaces/SignalValidator.html",[3,0.737,4,0.63,5,0.63,7,0.63,10,0.6,12,0.737,15,1.944,19,0.058,26,1.153,29,0.445,30,0.85,31,1.417,35,1.538,40,0.988,48,0.855,59,0.988,60,0.855,61,0.856,62,0.988,84,0.737,86,1.531,90,1.294,92,0.046,93,0.038,102,0.994,112,1.625,114,0.994,169,1.332,171,1.74,186,1.318,192,1.531,195,1.396,196,1.363,216,2.01,237,1.318,241,2.247,273,2.065,274,2.336,275,2.5,276,2.61,308,1.798,358,1.685,363,1.538,395,2.936,418,2.065,470,1.777,471,1.798,472,2.065,473,1.531,474,2.425,475,3.289,476,3.521,477,1.777,478,2.425,479,2.936,480,2.425,481,2.744,482,1.798,483,1.798,484,2.425,485,2.425,486,1.798,487,2.156,488,1.798,489,2.699]],["title/coverage.html",[490,2.905]],["body/coverage.html",[0,0.77,1,1.773,5,0.73,6,2.497,7,1.034,8,2.497,9,2.083,10,0.828,11,2.671,16,1.773,19,0.056,61,0.516,91,0.936,92,0.042,93,0.042,94,1.526,96,2.039,97,2.497,102,0.853,106,1.321,109,1.526,120,1.526,155,1.321,179,1.526,195,0.99,209,2.497,219,1.773,292,2.083,348,1.773,349,2.083,352,2.497,353,2.497,358,1.144,361,1.773,363,1.321,382,1.773,385,2.497,407,2.083,449,2.497,470,1.957,472,2.274,473,2.274,477,2.161,490,2.497,491,3.126,492,3.126,493,3.126,494,5.352,495,5.178,496,4.009,497,3.126,498,4.425,499,3.126,500,3.126,501,3.202,502,2.497,503,2.671,504,2.497,505,4.938,506,2.497,507,2.497,508,2.497,509,2.497,510,3.202,511,2.497,512,2.497,513,2.497,514,2.497,515,2.497,516,3.202,517,2.497,518,2.497,519,3.126,520,3.126]],["title/dependencies.html",[521,1.816,522,2.581]],["body/dependencies.html",[19,0.055,85,1.305,92,0.05,93,0.05,522,3.787,523,4.118,524,4.118,525,4.118,526,4.741,527,4.118]],["title/miscellaneous/functions.html",[528,0.96,529,2.581]],["body/miscellaneous/functions.html",[7,1.078,19,0.054,29,0.565,48,1.529,49,2.074,59,1.69,60,1.463,61,0.761,62,1.69,88,1.795,92,0.045,93,0.045,99,2.738,100,1.767,109,1.673,112,1.346,120,2.074,126,2.41,133,2.738,142,2.422,179,2.074,181,2.41,186,2.074,310,3.393,477,2.356,501,3.393,502,3.393,503,2.83,506,2.738,507,3.688,508,3.393,509,3.393,528,1.448,529,2.738,530,4.248,531,3.427,532,3.427,533,3.393,534,4.248,535,3.427,536,3.427,537,3.427,538,3.427,539,3.427,540,3.427,541,3.427,542,3.427,543,3.427,544,3.427,545,3.427,546,3.427]],["title/index.html",[29,0.375,547,2.273,548,2.273]],["body/index.html",[19,0.049,92,0.049,93,0.049,100,1.722,357,3.134,549,4.703,550,4.061,551,4.061,552,4.703,553,4.061,554,4.703,555,4.703,556,4.061,557,4.061,558,4.061]],["title/modules.html",[559,2.905]],["body/modules.html",[19,0.051,92,0.051,93,0.051,559,3.375]],["title/overview.html",[560,2.905]],["body/overview.html",[2,1.752,19,0.05,92,0.05,93,0.05,95,1.752,348,2.352,471,2.763,560,3.312,561,4.146,562,4.146,563,4.76]],["title/properties.html",[30,0.755,521,1.816]],["body/properties.html",[19,0.053,30,0.98,92,0.05,93,0.05,564,4.195,565,4.195]],["title/miscellaneous/typealiases.html",[528,0.96,566,3.231]],["body/miscellaneous/typealiases.html",[0,0.541,10,0.855,19,0.05,29,0.541,61,0.847,92,0.05,93,0.043,95,1.386,104,2.019,106,1.912,112,1.31,155,1.386,157,1.602,169,1.201,171,1.386,193,2.755,196,1.236,211,1.862,212,1.602,216,2.21,223,3.303,227,3.303,237,2.019,247,2.755,285,3.303,287,2.755,354,2.187,358,1.657,472,2.696,473,2.779,474,2.187,477,1.602,479,3.166,480,2.755,481,3.016,482,2.755,483,2.187,484,2.755,485,2.755,486,2.187,488,2.187,528,1.386,567,3.282,568,4.134,569,4.526,570,3.303,571,4.055,572,4.134,573,4.134,574,4.134,575,3.282,576,4.526,577,3.282,578,2.621,579,3.282,580,2.621,581,3.282,582,2.621]],["title/miscellaneous/variables.html",[528,0.96,583,2.581]],["body/miscellaneous/variables.html",[4,0.643,7,1.156,9,2.458,10,0.816,19,0.057,29,0.454,43,1.558,55,1.834,61,0.454,67,1.801,68,1.783,92,0.039,93,0.039,95,1.558,100,1.627,103,2.36,104,1.801,105,2.092,106,1.877,109,2.031,112,1.169,113,1.344,114,1.213,118,1.008,120,1.344,122,1.562,126,1.562,133,2.092,142,1.801,157,1.801,162,1.562,169,1.35,195,1.318,196,1.136,198,1.834,211,1.562,212,1.344,215,2.458,219,2.092,241,1.344,256,2.031,287,1.834,292,2.458,338,1.834,354,1.834,357,3.245,358,1.523,407,2.458,418,2.36,478,2.458,503,2.458,504,2.199,510,2.946,511,2.946,512,2.946,513,2.199,514,2.946,515,3.549,516,2.199,517,3.701,518,3.323,528,1.163,533,2.199,570,2.199,571,2.946,578,2.946,580,2.199,582,2.199,583,2.199,584,2.753,585,2.753,586,3.688,587,3.688,588,2.753,589,2.753,590,3.688,591,2.753,592,2.753,593,2.753,594,2.753,595,2.753,596,2.753,597,2.753,598,2.753,599,2.753,600,3.688,601,3.688,602,3.688,603,3.688,604,3.688,605,2.753,606,2.753,607,3.688,608,3.688,609,2.753]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":162,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":565,"title":{},"body":{"properties.html":{}}}],["1",{"_index":561,"title":{},"body":{"overview.html":{}}}],["1/1",{"_index":495,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":494,"title":{},"body":{"coverage.html":{}}}],["17.2.0",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["17/17",{"_index":499,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":563,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["20/20",{"_index":500,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":562,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":498,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":496,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":497,"title":{},"body":{"coverage.html":{}}}],["abstract",{"_index":98,"title":{},"body":{"classes/SignalControlContainer.html":{},"classes/SignalControlValueAccessor.html":{}}}],["accessor",{"_index":13,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["accessor.directive",{"_index":87,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["accessor.directive.ts",{"_index":11,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"coverage.html":{}}}],["accessor.directive.ts:19",{"_index":425,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["accessor.directive.ts:24",{"_index":426,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["accessor.directive.ts:29",{"_index":428,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["accessor.directive.ts:35",{"_index":430,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["accessor.directive.ts:42",{"_index":431,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["accessor.directive.ts:50",{"_index":429,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["accessors",{"_index":217,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["accessors/input",{"_index":8,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"coverage.html":{}}}],["active",{"_index":244,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["actual_component",{"_index":384,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["addcontrol",{"_index":107,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["addcontrol(key",{"_index":185,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["added",{"_index":582,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["adderrordescription(elementid",{"_index":327,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["adds",{"_index":188,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["aggregate",{"_index":229,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["alias",{"_index":70,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["aliases",{"_index":567,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowsignalwrites",{"_index":340,"title":{},"body":{"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{}}}],["ancestor",{"_index":230,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["angular/common",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":85,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"dependencies.html":{}}}],["any)[validator.key",{"_index":239,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["applied",{"_index":83,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["ariadescribedby",{"_index":302,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["array",{"_index":200,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["array.isarray(input",{"_index":277,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["attr.aria",{"_index":300,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["attr.disabled",{"_index":298,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["attributes/validators",{"_index":295,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["automatically",{"_index":581,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["avoid",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":576,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["blur",{"_index":45,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["boolean",{"_index":418,"title":{},"body":{"directives/SignalControlErrorDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/variables.html":{}}}],["callback",{"_index":53,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["can't",{"_index":146,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["change",{"_index":47,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["changed",{"_index":152,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["changedetection",{"_index":355,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["changedetectionstrategy",{"_index":360,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":356,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["changes",{"_index":54,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["check",{"_index":164,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["checking",{"_index":160,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["checks",{"_index":227,"title":{},"body":{"directives/SignalControlDirective.html":{},"miscellaneous/typealiases.html":{}}}],["child",{"_index":138,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["class",{"_index":91,"title":{"classes/SignalControlContainer.html":{},"classes/SignalControlValueAccessor.html":{}},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{}}}],["classes",{"_index":95,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["classes.token",{"_index":294,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["classes.token.ts",{"_index":512,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["classes.ts",{"_index":574,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["classlist",{"_index":297,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["cleanup",{"_index":344,"title":{},"body":{"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{}}}],["collection",{"_index":481,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["compatible",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["component",{"_index":348,"title":{"components/SignalControlErrorComponent.html":{}},"body":{"components/SignalControlErrorComponent.html":{},"coverage.html":{},"overview.html":{}}}],["component_template",{"_index":377,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["components",{"_index":350,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["composedsignal",{"_index":120,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["composedsignal(__namedparameters",{"_index":532,"title":{},"body":{"miscellaneous/functions.html":{}}}],["computed",{"_index":154,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalFormGroupDirective.html":{}}}],["config",{"_index":241,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/variables.html":{}}}],["configurable",{"_index":135,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["configuration",{"_index":475,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["const",{"_index":118,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["container",{"_index":101,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["container.directive",{"_index":284,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["container.directive.ts",{"_index":97,"title":{},"body":{"classes/SignalControlContainer.html":{},"coverage.html":{}}}],["container.directive.ts:106",{"_index":187,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:115",{"_index":190,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:26",{"_index":136,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:60",{"_index":183,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:68",{"_index":170,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:82",{"_index":145,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:90",{"_index":150,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["container.directive.ts:98",{"_index":175,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["context",{"_index":393,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["control",{"_index":10,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["control.directive",{"_index":192,"title":{},"body":{"classes/SignalControlContainer.html":{},"classes/SignalControlValueAccessor.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["control.directive.ts",{"_index":209,"title":{},"body":{"directives/SignalControlDirective.html":{},"coverage.html":{}}}],["control.directive.ts:110",{"_index":281,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:117",{"_index":218,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:123",{"_index":262,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:132",{"_index":278,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:146",{"_index":243,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:173",{"_index":266,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:186",{"_index":271,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:191",{"_index":246,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:196",{"_index":265,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:201",{"_index":221,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:206",{"_index":268,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:211",{"_index":270,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:68",{"_index":252,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:76",{"_index":255,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:81",{"_index":279,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:89",{"_index":225,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.directive.ts:96",{"_index":232,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["control.dirty",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["control.touched",{"_index":606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controldirective",{"_index":432,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["controldirectives",{"_index":202,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["controldirectivestatuses",{"_index":166,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["controldirectivestatuses.some((status",{"_index":168,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["controlerrordirective",{"_index":365,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["controls",{"_index":103,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["controls[key",{"_index":206,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["correct",{"_index":402,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["coverage",{"_index":490,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creates",{"_index":533,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["creating",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["css",{"_index":580,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["currentdescriptions",{"_index":328,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["currentid",{"_index":334,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["cva",{"_index":296,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["default",{"_index":68,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["defaultkey",{"_index":210,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["define",{"_index":579,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["defined",{"_index":40,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidator.html":{}}}],["defines",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete",{"_index":208,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["dependencies",{"_index":522,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["depending",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["derive",{"_index":480,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["describedby",{"_index":301,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["description",{"_index":12,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["dir",{"_index":403,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["directive",{"_index":0,"title":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["directive.disabled.set(false",{"_index":144,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["directive.pristine",{"_index":148,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["directive.pristine.set(value",{"_index":149,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["directive.touched",{"_index":173,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["directive.touched.set(value",{"_index":174,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["directives",{"_index":2,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{},"overview.html":{}}}],["directives/signal",{"_index":86,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"components/SignalControlErrorComponent.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["dirty",{"_index":67,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["disable",{"_index":436,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["disabled",{"_index":104,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["disabledattribute",{"_index":299,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["disabledtype",{"_index":223,"title":{},"body":{"directives/SignalControlDirective.html":{},"miscellaneous/typealiases.html":{}}}],["display",{"_index":354,"title":{},"body":{"components/SignalControlErrorComponent.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":58,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"classes/SignalControlValueAccessor.html":{}}}],["effect",{"_index":282,"title":{},"body":{"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["element",{"_index":78,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"components/SignalControlErrorComponent.html":{},"classes/SignalControlValueAccessor.html":{}}}],["elementid",{"_index":331,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["elementref",{"_index":33,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["emits",{"_index":543,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enabled",{"_index":211,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["enabledtype",{"_index":285,"title":{},"body":{"directives/SignalControlDirective.html":{},"miscellaneous/typealiases.html":{}}}],["error",{"_index":358,"title":{},"body":{"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["error.${error.control.path()}.${error.key",{"_index":369,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["error.component.ts",{"_index":353,"title":{},"body":{"components/SignalControlErrorComponent.html":{},"coverage.html":{}}}],["error.config",{"_index":423,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["error.control.adderrordescription(id",{"_index":372,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["error.control.removeerrordescription(id",{"_index":373,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["error.directive",{"_index":362,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["error.directive.ts",{"_index":385,"title":{},"body":{"directives/SignalControlErrorDirective.html":{},"coverage.html":{}}}],["error.directive.ts:26",{"_index":404,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["error.directive.ts:49",{"_index":401,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["error.directive.ts:63",{"_index":394,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["errordescriptionelementids",{"_index":326,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["errors",{"_index":212,"title":{},"body":{"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["errorstrategy",{"_index":412,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["eslint",{"_index":435,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["eslint/no",{"_index":440,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["event",{"_index":52,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["events",{"_index":46,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["execute",{"_index":558,"title":{},"body":{"index.html":{}}}],["exempt",{"_index":226,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["existing",{"_index":141,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["export",{"_index":90,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["exportas",{"_index":27,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["exposes",{"_index":137,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["extends",{"_index":15,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["extract",{"_index":486,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["factory",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":134,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["file",{"_index":5,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{}}}],["focus",{"_index":44,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["form",{"_index":155,"title":{},"body":{"classes/SignalControlContainer.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["forms",{"_index":549,"title":{},"body":{"index.html":{}}}],["forms.signal",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forwardref",{"_index":22,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["function",{"_index":477,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":529,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":551,"title":{},"body":{"index.html":{}}}],["generic",{"_index":577,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getkey",{"_index":280,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["getter",{"_index":535,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getting",{"_index":547,"title":{"index.html":{}},"body":{}}],["given",{"_index":540,"title":{},"body":{"miscellaneous/functions.html":{}}}],["group",{"_index":156,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["group.directive.ts",{"_index":449,"title":{},"body":{"directives/SignalFormGroupDirective.html":{},"coverage.html":{}}}],["guard",{"_index":398,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["host",{"_index":77,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"classes/SignalControlValueAccessor.html":{}}}],["html",{"_index":375,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["id",{"_index":364,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["identifier",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["immutable",{"_index":545,"title":{},"body":{"miscellaneous/functions.html":{}}}],["implement",{"_index":199,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["implementation",{"_index":444,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["implicit",{"_index":422,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["import",{"_index":84,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["included",{"_index":228,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["index",{"_index":29,"title":{"index.html":{}},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":233,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["infer",{"_index":274,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["infercontrolkey",{"_index":309,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["info",{"_index":3,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["inherited",{"_index":39,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["inject",{"_index":283,"title":{},"body":{"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["inject(elementref",{"_index":74,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["inject(signal_control_error_strategy",{"_index":413,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["inject(signal_control_status_classes",{"_index":307,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["inject(signalcontrolcontainerregistry",{"_index":305,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["inject(signalcontrolerrordirective",{"_index":366,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["inject(templateref",{"_index":409,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["inject(viewcontainerref",{"_index":411,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["inject>>(signalcontroldirective",{"_index":433,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["injectiontoken('ngx",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["input",{"_index":88,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/functions.html":{}}}],["input.required",{"_index":249,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["input/output",{"_index":538,"title":{},"body":{"miscellaneous/functions.html":{}}}],["input[type=\"text\"][ngxcontrol][ngxtextinput",{"_index":24,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["input[type=\"text\"][ngxcontrol][ngxtextinput]'},{'name",{"_index":378,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["inputs",{"_index":14,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["inputsignal",{"_index":248,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["inputsignalwithtransform",{"_index":272,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["inputtextcontrolvalueaccessordirective",{"_index":1,"title":{"directives/InputTextControlValueAccessorDirective.html":{}},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"components/SignalControlErrorComponent.html":{},"coverage.html":{}}}],["instances",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":470,"title":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{}}}],["interfaces",{"_index":471,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"overview.html":{}}}],["internal",{"_index":303,"title":{},"body":{"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["invalid",{"_index":157,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["k",{"_index":186,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/functions.html":{}}}],["keep",{"_index":159,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["key",{"_index":112,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["keyed",{"_index":488,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["keyedsignal",{"_index":119,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["keyof",{"_index":116,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["keys",{"_index":483,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["legend",{"_index":374,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["length",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["length.ts",{"_index":514,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["library",{"_index":550,"title":{},"body":{"index.html":{}}}],["line",{"_index":438,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["list",{"_index":313,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["literal",{"_index":399,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["make",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["markastouched",{"_index":36,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["marked",{"_index":176,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["marks",{"_index":42,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["matching",{"_index":93,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxlength",{"_index":515,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":17,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["methods",{"_index":35,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidator.html":{}}}],["miscellaneous",{"_index":528,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":73,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["model(false",{"_index":222,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["model.required",{"_index":69,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["model.ts",{"_index":502,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["modelchange",{"_index":213,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["modelfrom",{"_index":179,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["modelfrom(__namedparameters",{"_index":537,"title":{},"body":{"miscellaneous/functions.html":{}}}],["models/disabled",{"_index":286,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["models/signal",{"_index":194,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["modelsignal",{"_index":427,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["modules",{"_index":559,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":60,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/functions.html":{}}}],["native",{"_index":82,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["nativeelement",{"_index":34,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["need",{"_index":158,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["negated",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["negatedsignal",{"_index":219,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["never",{"_index":276,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["new",{"_index":109,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":437,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["ng",{"_index":380,"title":{},"body":{"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{}}}],["ngtemplatecontextguard",{"_index":390,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["ngtemplatecontextguard(directive",{"_index":392,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["ngtemplateguard_ngxerror",{"_index":391,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["ngtemplateguard_ngxerror(dir",{"_index":400,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["ngx",{"_index":357,"title":{},"body":{"components/SignalControlErrorComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ngxcontrol",{"_index":71,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{}}}],["ngxcontrol]'},{'name",{"_index":379,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["ngxcontrolchange",{"_index":254,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["ngxcontrolvalueaccessor",{"_index":28,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["ngxdisabled",{"_index":224,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["ngxerror",{"_index":388,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["ngxformgroup",{"_index":383,"title":{},"body":{"components/SignalControlErrorComponent.html":{},"directives/SignalFormGroupDirective.html":{}}}],["ngxformgroupchange",{"_index":454,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["noop",{"_index":443,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["null",{"_index":256,"title":{},"body":{"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":122,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["nx",{"_index":552,"title":{},"body":{"index.html":{}}}],["object",{"_index":507,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["object.defineproperty(target",{"_index":132,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["object.is(objectvalue[key",{"_index":130,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["object.keys(this.errors()).length",{"_index":161,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["object.values(this.controls",{"_index":203,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["objectvalue",{"_index":127,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["once",{"_index":177,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["onvalueupdated",{"_index":37,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["onvalueupdated(value",{"_index":50,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["optional",{"_index":62,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/functions.html":{}}}],["originalsignalgetter",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["originalsignalgetter().set(!enabled",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":163,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["output",{"_index":181,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/functions.html":{}}}],["outputemitterref",{"_index":253,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["override",{"_index":204,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["overview",{"_index":560,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":521,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pair",{"_index":534,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":59,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":308,"title":{},"body":{"directives/SignalControlDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["parent.addcontrol(key",{"_index":346,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["parent.removecontrol(key",{"_index":347,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["parentpath",{"_index":257,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["parentpath}.${key",{"_index":260,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["path",{"_index":214,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["peer",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["pristine",{"_index":105,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["private",{"_index":201,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["properties",{"_index":30,"title":{"properties.html":{}},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"properties.html":{}}}],["property",{"_index":541,"title":{},"body":{"miscellaneous/functions.html":{}}}],["property.ts",{"_index":508,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["protected",{"_index":32,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["provide",{"_index":20,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["providedin",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":18,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["proxy(this.#controls.asreadonly",{"_index":110,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["reactive",{"_index":140,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["readonly",{"_index":31,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["reference",{"_index":76,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["reflect",{"_index":56,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["registercontrol",{"_index":343,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["registerdescription",{"_index":370,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["registry",{"_index":304,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["registry.service",{"_index":290,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["relative",{"_index":263,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["removecontrol",{"_index":108,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["removecontrol(key",{"_index":189,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["removeerrordescription(elementid",{"_index":332,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["removes",{"_index":191,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["rendered",{"_index":414,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["represents",{"_index":99,"title":{},"body":{"classes/SignalControlContainer.html":{},"miscellaneous/functions.html":{}}}],["required",{"_index":517,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["requiredvalidator",{"_index":518,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["result",{"_index":474,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":92,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":114,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":48,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":556,"title":{},"body":{"index.html":{}}}],["running",{"_index":553,"title":{},"body":{"index.html":{}}}],["selectobjectproperty",{"_index":509,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectobjectproperty(sourcesignal",{"_index":539,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selector",{"_index":23,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["self",{"_index":434,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["services/signal",{"_index":289,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["set",{"_index":126,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["setter",{"_index":536,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shouldrender",{"_index":417,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["signal",{"_index":100,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["signal(false",{"_index":267,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["signal(true",{"_index":264,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["signal.ts",{"_index":503,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["signal_control_error_strategy",{"_index":407,"title":{},"body":{"directives/SignalControlErrorDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signal_control_status_classes",{"_index":292,"title":{},"body":{"directives/SignalControlDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signalcontrolcontainer",{"_index":94,"title":{"classes/SignalControlContainer.html":{}},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{}}}],["signalcontrolcontainer:106",{"_index":450,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontrolcontainer:115",{"_index":451,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontrolcontainer:26",{"_index":456,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontrolcontainerregistry",{"_index":288,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["signalcontroldirective",{"_index":102,"title":{"directives/SignalControlDirective.html":{}},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{}}}],["signalcontroldirective:123",{"_index":466,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:132",{"_index":469,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:146",{"_index":464,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:186",{"_index":468,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:191",{"_index":465,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:201",{"_index":462,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:21",{"_index":453,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:211",{"_index":467,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:29",{"_index":455,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:36",{"_index":452,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:60",{"_index":461,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:68",{"_index":459,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:82",{"_index":457,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:90",{"_index":458,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:96",{"_index":463,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontroldirective:98",{"_index":460,"title":{},"body":{"directives/SignalFormGroupDirective.html":{}}}],["signalcontrolerrorcomponent",{"_index":349,"title":{"components/SignalControlErrorComponent.html":{}},"body":{"components/SignalControlErrorComponent.html":{},"coverage.html":{}}}],["signalcontrolerrordirective",{"_index":361,"title":{"directives/SignalControlErrorDirective.html":{}},"body":{"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"coverage.html":{}}}],["signalcontrolerrorstrategy",{"_index":570,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["signalcontrolstatus",{"_index":193,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"miscellaneous/typealiases.html":{}}}],["signalcontrolstatusclasses",{"_index":287,"title":{},"body":{"directives/SignalControlDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["signalcontrolvalueaccessor",{"_index":16,"title":{"classes/SignalControlValueAccessor.html":{}},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"coverage.html":{}}}],["signalcontrolvalueaccessor:19",{"_index":75,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["signalcontrolvalueaccessor:24",{"_index":81,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["signalcontrolvalueaccessor:25",{"_index":72,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["signalcontrolvalueaccessor:35",{"_index":51,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["signalcontrolvalueaccessor:42",{"_index":64,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["signalcontrolvalueaccessor:50",{"_index":41,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["signalformgroupdirective",{"_index":382,"title":{"directives/SignalFormGroupDirective.html":{}},"body":{"components/SignalControlErrorComponent.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{}}}],["signals",{"_index":184,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["signals/composed",{"_index":197,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{}}}],["signals/negated",{"_index":291,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["signalvalidationresult",{"_index":363,"title":{"interfaces/SignalValidationResult.html":{}},"body":{"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{}}}],["signalvalidator",{"_index":195,"title":{"interfaces/SignalValidator.html":{}},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signalvalidatorcombinedresults",{"_index":237,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["signalvalidatorkeys",{"_index":484,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["signalvalidatorresultbykey",{"_index":485,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["signalvalidatorresults",{"_index":482,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["skipself",{"_index":367,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["soon",{"_index":165,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["source",{"_index":4,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/variables.html":{}}}],["sourcesignal",{"_index":546,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../composed",{"_index":530,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../disabled",{"_index":568,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../max",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../negated",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../required.ts",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../select",{"_index":531,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../signal",{"_index":571,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/components/signal",{"_index":352,"title":{},"body":{"components/SignalControlErrorComponent.html":{},"coverage.html":{}}}],["src/lib/control",{"_index":6,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"coverage.html":{}}}],["src/lib/directives/signal",{"_index":96,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{}}}],["src/lib/models/disabled",{"_index":575,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/models/signal",{"_index":472,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/signals/composed",{"_index":501,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/signals/negated",{"_index":504,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/signals/select",{"_index":506,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/tokens/signal",{"_index":510,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/validators/max",{"_index":513,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/validators/required.ts",{"_index":516,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":25,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["started",{"_index":548,"title":{"index.html":{}},"body":{}}],["state",{"_index":57,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["statements",{"_index":493,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":389,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["status",{"_index":106,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["status.ts",{"_index":573,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statusclasses",{"_index":306,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["strategy",{"_index":578,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["strategy.token",{"_index":408,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["strategy.token.ts",{"_index":511,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["strategy.ts",{"_index":572,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["string",{"_index":113,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["structural",{"_index":386,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["style",{"_index":314,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["sync",{"_index":337,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["t",{"_index":310,"title":{},"body":{"directives/SignalControlDirective.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":519,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":111,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["target[key",{"_index":115,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["tconfig",{"_index":396,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["telement",{"_index":79,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["template",{"_index":359,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["template[ngxerror",{"_index":387,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["template[ngxerror]'},{'name",{"_index":381,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["templateref",{"_index":405,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["test",{"_index":557,"title":{},"body":{"index.html":{}}}],["tests",{"_index":555,"title":{},"body":{"index.html":{}}}],["text",{"_index":9,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["this.#controls.set(controls",{"_index":207,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["this.#errordescriptionelementids",{"_index":329,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.#errordescriptionelementids().join",{"_index":335,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.#errordescriptionelementids.set([...currentdescriptions",{"_index":330,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.#errordescriptionelementids.set(currentdescriptions.filter((currentid",{"_index":333,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.#key",{"_index":312,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.#parent",{"_index":311,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.controldirective.dirty.set(true",{"_index":446,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["this.controldirective.touched.set(true",{"_index":447,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["this.controldirectives().every((directive",{"_index":147,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.controldirectives().foreach((directive",{"_index":143,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.controldirectives().map",{"_index":167,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.controldirectives().some((directive",{"_index":172,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.controlerrordirective.ngxerror",{"_index":368,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["this.controls",{"_index":205,"title":{},"body":{"classes/SignalControlContainer.html":{}}}],["this.defaultkey",{"_index":261,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.dirty",{"_index":321,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.disabled",{"_index":231,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.disabled.set(false",{"_index":339,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.elementref.nativeelement",{"_index":80,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["this.enabled",{"_index":234,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.errorstrategy(error.control",{"_index":419,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["this.id",{"_index":371,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["this.infercontrolkey",{"_index":251,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.invalid",{"_index":318,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.key",{"_index":259,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.model",{"_index":180,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.modelchange",{"_index":182,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.ngxerror",{"_index":416,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["this.onvalueupdated(value",{"_index":448,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["this.parent",{"_index":345,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.parent?.path",{"_index":258,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.pristine",{"_index":220,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.registry.controlcontainer",{"_index":123,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.registry.key",{"_index":121,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.rendered",{"_index":420,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["this.status",{"_index":245,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.statusclasses.dirty",{"_index":320,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.statusclasses.disabled",{"_index":325,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.statusclasses.invalid",{"_index":317,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.statusclasses.pristine",{"_index":319,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.statusclasses.touched",{"_index":322,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.statusclasses.untouched",{"_index":323,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.statusclasses.valid",{"_index":315,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.touched",{"_index":269,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.untouched",{"_index":324,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.valid",{"_index":316,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.validators",{"_index":235,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.value",{"_index":129,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.value()[key",{"_index":125,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.value.set",{"_index":131,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["this.value.set(undefined",{"_index":342,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["this.value.update",{"_index":445,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["this.vcr.clear",{"_index":424,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["this.vcr.createembeddedview(this.templateref",{"_index":421,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["tkey",{"_index":395,"title":{},"body":{"directives/SignalControlErrorDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["todo",{"_index":198,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tokens/signal",{"_index":293,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{}}}],["touched",{"_index":43,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["transform",{"_index":250,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["treating",{"_index":544,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tree",{"_index":351,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["triggered",{"_index":178,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["true",{"_index":26,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["tslib",{"_index":523,"title":{},"body":{"dependencies.html":{}}}],["tvalidationresult",{"_index":397,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["tvalidator",{"_index":275,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["tvalidatorresult",{"_index":487,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["tvalidators",{"_index":273,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["tvalue",{"_index":117,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["type",{"_index":61,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.ts",{"_index":569,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":566,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":439,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["ui",{"_index":153,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["undefined",{"_index":338,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"miscellaneous/variables.html":{}}}],["underlying",{"_index":66,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["unit",{"_index":554,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":124,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["untouched",{"_index":215,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/variables.html":{}}}],["untracked",{"_index":128,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{}}}],["unused",{"_index":441,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["updated",{"_index":542,"title":{},"body":{"miscellaneous/functions.html":{}}}],["updates",{"_index":65,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["updatevalue",{"_index":38,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["updatevalue($event.target.value",{"_index":89,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["updatevalue(value",{"_index":63,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["usage",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["used",{"_index":55,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"miscellaneous/variables.html":{}}}],["useexisting",{"_index":21,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{}}}],["user",{"_index":151,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["utility",{"_index":479,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["valid",{"_index":169,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":476,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{}}}],["validate(value",{"_index":478,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/variables.html":{}}}],["validation",{"_index":171,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["validator",{"_index":196,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"components/SignalControlErrorComponent.html":{},"directives/SignalControlErrorDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["validator.config",{"_index":242,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["validator.key",{"_index":240,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["validator.ts",{"_index":473,"title":{},"body":{"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["validator.ts:9",{"_index":489,"title":{},"body":{"interfaces/SignalValidator.html":{}}}],["validator.validate(value",{"_index":238,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["validators",{"_index":216,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidationResult.html":{},"interfaces/SignalValidator.html":{},"miscellaneous/typealiases.html":{}}}],["validators.length",{"_index":236,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{}}}],["value",{"_index":7,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalControlErrorDirective.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"interfaces/SignalValidator.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values",{"_index":139,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{}}}],["var",{"_index":376,"title":{},"body":{"components/SignalControlErrorComponent.html":{}}}],["variable",{"_index":505,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":583,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":442,"title":{},"body":{"classes/SignalControlValueAccessor.html":{}}}],["vcr",{"_index":410,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["version",{"_index":564,"title":{},"body":{"properties.html":{}}}],["viewcontainerref",{"_index":406,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["void",{"_index":49,"title":{},"body":{"directives/InputTextControlValueAccessorDirective.html":{},"classes/SignalControlContainer.html":{},"classes/SignalControlValueAccessor.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/functions.html":{}}}],["watchdisabledchanges",{"_index":341,"title":{},"body":{"directives/SignalControlDirective.html":{}}}],["watcherrorchanges",{"_index":415,"title":{},"body":{"directives/SignalControlErrorDirective.html":{}}}],["watchvaluechanges",{"_index":336,"title":{},"body":{"directives/SignalControlDirective.html":{},"classes/SignalControlValueAccessor.html":{}}}],["whether",{"_index":247,"title":{},"body":{"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/typealiases.html":{}}}],["writable",{"_index":133,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["writablesignal",{"_index":142,"title":{},"body":{"classes/SignalControlContainer.html":{},"directives/SignalControlDirective.html":{},"directives/SignalFormGroupDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"directives/InputTextControlValueAccessorDirective.html":{"url":"directives/InputTextControlValueAccessorDirective.html","title":"directive - InputTextControlValueAccessorDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  InputTextControlValueAccessorDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/control-value-accessors/input-text-control-value-accessor.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Control value accessor for text inputs.\n\n            \n\n            \n                Extends\n            \n            \n                            SignalControlValueAccessor\n            \n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Providers\n                        \n                            \n                                { provide: SignalControlValueAccessor, useExisting: forwardRef(() => InputTextControlValueAccessorDirective) }\n                            \n                        \n                    \n\n                    \n                        Selector\n                        input[type=\"text\"][ngxControl][ngxTextInput]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxControlValueAccessor\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                value\n                            \n                            \n                                    Protected\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                nativeElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                markAsTouched\n                            \n                            \n                                onValueUpdated\n                            \n                            \n                                updateValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        markAsTouched\n                        \n                    \n                \n            \n            \n                \nmarkAsTouched()\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlValueAccessor\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlValueAccessor:50\n\n                        \n                    \n\n\n            \n                \n                        Marks the control as touched. A control is touched by focus and blur events that do not change the value.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onValueUpdated\n                        \n                    \n                \n            \n            \n                \nonValueUpdated(value: Readonly)\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlValueAccessor\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlValueAccessor:35\n\n                        \n                    \n\n\n            \n                \n                        Event callback when the value changes that can be used to reflect the state to the DOM.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Readonly\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateValue\n                        \n                    \n                \n            \n            \n                \nupdateValue(value: Readonly)\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlValueAccessor\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlValueAccessor:42\n\n                        \n                    \n\n\n            \n                \n                        Updates the underlying value of the control and marks it as dirty.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Readonly\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Default value : model.required({ alias: 'ngxControl' })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlValueAccessor\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlValueAccessor:25\n\n                        \n                    \n\n            \n                \n                    Model.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlValueAccessor\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlValueAccessor:19\n\n                        \n                    \n\n            \n                \n                    Reference to the host element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        nativeElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TElement\n\n                    \n                \n                \n                    \n                        Default value : this.elementRef.nativeElement\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlValueAccessor\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlValueAccessor:24\n\n                        \n                    \n\n            \n                \n                    Native element where the directive is applied.\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, forwardRef, model } from '@angular/core';\n\nimport { SignalControlValueAccessor } from '../directives/signal-control-value-accessor.directive';\n\n/**\n * Control value accessor for text inputs.\n */\n@Directive({\n  selector: `input[type=\"text\"][ngxControl][ngxTextInput]`,\n  standalone: true,\n  host: {\n    '(input)': 'updateValue($event.target.value)',\n    '(blur)': 'markAsTouched()',\n    '[value]': 'value()',\n  },\n  providers: [\n    { provide: SignalControlValueAccessor, useExisting: forwardRef(() => InputTextControlValueAccessorDirective) },\n  ],\n  exportAs: 'ngxControlValueAccessor',\n})\nexport class InputTextControlValueAccessorDirective extends SignalControlValueAccessor {\n  /**\n   * Model.\n   */\n  readonly value = model.required({ alias: 'ngxControl' });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignalControlContainer.html":{"url":"classes/SignalControlContainer.html","title":"class - SignalControlContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignalControlContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/directives/signal-control-container.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract class that represents a signal control container.\n\n            \n\n            \n                Extends\n            \n            \n                            SignalControlDirective\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                controls\n                            \n                            \n                                    \n                                disabled\n                            \n                            \n                                    \n                                pristine\n                            \n                            \n                                    \n                                    Readonly\n                                status\n                            \n                            \n                                    \n                                touched\n                            \n                            \n                                    \n                                    Readonly\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addControl\n                            \n                            \n                                removeControl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        controls\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Proxy(this.#controls.asReadonly() as any, {\n    get: (target, key: string) => {\n      if (key in target) {\n        return target[key as keyof TValue];\n      }\n\n      const keyedSignal = composedSignal({\n        get: () => {\n          this.registry.key = key as string | number;\n          this.registry.controlContainer = this as unknown as SignalControlContainer;\n          return this.value()[key as keyof TValue];\n        },\n        set: (value) => {\n          const objectValue = untracked(() => this.value());\n          if (!Object.is(objectValue[key as keyof TValue], value)) {\n            this.value.set({ ...objectValue, [key]: value });\n          }\n        },\n      });\n\n      Object.defineProperty(target, key, { value: keyedSignal, writable: false, configurable: false });\n      return keyedSignal;\n    },\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-container.directive.ts:26\n                        \n                    \n\n            \n                \n                    Exposes child signal values by key and also a reactive value with existing child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal<>\n\n                    \n                \n                \n                    \n                        Default value : composedSignal({\n    get: () => false,\n    set: () => this.controlDirectives().forEach((directive) => directive.disabled.set(false)),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-container.directive.ts:82\n                        \n                    \n\n            \n                \n                    A control container can't be disabled, but when set to false it will change the disabled status of its child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        pristine\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : composedSignal({\n    get: () => this.controlDirectives().every((directive) => directive.pristine()),\n    set: (value) => this.controlDirectives().forEach((directive) => directive.pristine.set(value)),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-container.directive.ts:90\n                        \n                    \n\n            \n                \n                    A control container is pristine if the user has not yet changed the value in the UI in any of its child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n    // If the form group is invalid, there is no need to keep checking\n    if (Object.keys(this.errors()).length > 0) {\n      return 'INVALID';\n    }\n\n    // Otherwise, check the status of all child controls, and as soon as a child control is invalid, return\n    const controlDirectiveStatuses = this.controlDirectives().map(({ status }) => status());\n    return controlDirectiveStatuses.some((status) => status === 'INVALID') ? 'INVALID' : 'VALID';\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-container.directive.ts:68\n                        \n                    \n\n            \n                \n                    The validation status of the form group and its child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        touched\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : composedSignal({\n    get: () => this.controlDirectives().some((directive) => directive.touched()),\n    set: (value) => this.controlDirectives().forEach((directive) => directive.touched.set(value)),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-container.directive.ts:98\n                        \n                    \n\n            \n                \n                    A control container is marked touched once the user has triggered a blur event on it or in any of its child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : modelFrom({\n    input: () => this.model,\n    output: () => this.modelChange,\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-container.directive.ts:60\n                        \n                    \n\n            \n                \n                    Exposes child signals for controls.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addControl\n                        \n                    \n                \n            \n            \n                \naddControl(key: K, signalControlDirective: SignalControlDirective<>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-container.directive.ts:106\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    K\n                            \n                        \n                    \n\n            \n                \n                        Adds a control to the container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                signalControlDirective\n                                            \n                                                            SignalControlDirective<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeControl\n                        \n                    \n                \n            \n            \n                \nremoveControl(key: K)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-container.directive.ts:115\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    K\n                            \n                        \n                    \n\n            \n                \n                        Removes a control from the container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Signal, WritableSignal, computed, signal, untracked } from '@angular/core';\n\nimport { SignalControlDirective } from './signal-control.directive';\nimport { SignalControlStatus } from '../models/signal-control-status';\nimport { SignalValidator } from '../models/signal-validator';\nimport { modelFrom } from '../signals/composed-model';\nimport { composedSignal } from '../signals/composed-signal';\n\n// TODO: implement form array\n\n/**\n * Abstract class that represents a signal control container.\n */\nexport abstract class SignalControlContainer[] = [],\n> extends SignalControlDirective {\n  readonly #controls: WritableSignal> }> =\n    signal>;\n    }>({});\n\n  /**\n   * Exposes child signal values by key and also a reactive value with existing child controls.\n   */\n  readonly controls: Signal> }> & {\n    [K in keyof TValue]: WritableSignal>;\n  } = new Proxy(this.#controls.asReadonly() as any, {\n    get: (target, key: string) => {\n      if (key in target) {\n        return target[key as keyof TValue];\n      }\n\n      const keyedSignal = composedSignal({\n        get: () => {\n          this.registry.key = key as string | number;\n          this.registry.controlContainer = this as unknown as SignalControlContainer;\n          return this.value()[key as keyof TValue];\n        },\n        set: (value) => {\n          const objectValue = untracked(() => this.value());\n          if (!Object.is(objectValue[key as keyof TValue], value)) {\n            this.value.set({ ...objectValue, [key]: value });\n          }\n        },\n      });\n\n      Object.defineProperty(target, key, { value: keyedSignal, writable: false, configurable: false });\n      return keyedSignal;\n    },\n  });\n\n  private readonly controlDirectives: Signal>[]> = computed(\n    () => [...Object.values(this.controls())] as SignalControlDirective>[]\n  );\n\n  /**\n   * Exposes child signals for controls.\n   */\n  override readonly value: WritableSignal = modelFrom({\n    input: () => this.model,\n    output: () => this.modelChange,\n  });\n\n  /**\n   * The validation status of the form group and its child controls.\n   */\n  override readonly status: Signal = computed(() => {\n    // If the form group is invalid, there is no need to keep checking\n    if (Object.keys(this.errors()).length > 0) {\n      return 'INVALID';\n    }\n\n    // Otherwise, check the status of all child controls, and as soon as a child control is invalid, return\n    const controlDirectiveStatuses = this.controlDirectives().map(({ status }) => status());\n    return controlDirectiveStatuses.some((status) => status === 'INVALID') ? 'INVALID' : 'VALID';\n  });\n\n  /**\n   * A control container can't be disabled, but when set to false it will change the disabled status of its child controls.\n   */\n  override disabled: WritableSignal = composedSignal({\n    get: () => false,\n    set: () => this.controlDirectives().forEach((directive) => directive.disabled.set(false)),\n  });\n\n  /**\n   * A control container is pristine if the user has not yet changed the value in the UI in any of its child controls.\n   */\n  override pristine: WritableSignal = composedSignal({\n    get: () => this.controlDirectives().every((directive) => directive.pristine()),\n    set: (value) => this.controlDirectives().forEach((directive) => directive.pristine.set(value)),\n  });\n\n  /**\n   * A control container is marked touched once the user has triggered a blur event on it or in any of its child controls.\n   */\n  override touched: WritableSignal = composedSignal({\n    get: () => this.controlDirectives().some((directive) => directive.touched()),\n    set: (value) => this.controlDirectives().forEach((directive) => directive.touched.set(value)),\n  });\n\n  /**\n   * Adds a control to the container.\n   */\n  addControl(key: K, signalControlDirective: SignalControlDirective): void {\n    const controls = { ...untracked(() => this.controls()) };\n    controls[key] = signalControlDirective;\n    this.#controls.set(controls);\n  }\n\n  /**\n   * Removes a control from the container.\n   */\n  removeControl(key: K): void {\n    const controls = { ...untracked(() => this.controls()) };\n    delete controls[key];\n    this.#controls.set(controls);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SignalControlDirective.html":{"url":"directives/SignalControlDirective.html","title":"directive - SignalControlDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  SignalControlDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/directives/signal-control.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Control directive.\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxControl]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxControl\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                defaultKey\n                            \n                            \n                                    Readonly\n                                dirty\n                            \n                            \n                                    Readonly\n                                disabled\n                            \n                            \n                                    Readonly\n                                enabled\n                            \n                            \n                                    Readonly\n                                errors\n                            \n                            \n                                    Readonly\n                                invalid\n                            \n                            \n                                    Readonly\n                                model\n                            \n                            \n                                    Readonly\n                                modelChange\n                            \n                            \n                                    Readonly\n                                path\n                            \n                            \n                                    Readonly\n                                pristine\n                            \n                            \n                                    Readonly\n                                status\n                            \n                            \n                                    Readonly\n                                touched\n                            \n                            \n                                    Readonly\n                                untouched\n                            \n                            \n                                    Readonly\n                                valid\n                            \n                            \n                                    Readonly\n                                validators\n                            \n                            \n                                    Readonly\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    key\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        defaultKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'control'\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:117\n                        \n                    \n\n            \n                \n                    Default key when the control is not a child of a control container.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        dirty\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : negatedSignal(() => this.pristine)\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:201\n                        \n                    \n\n            \n                \n                    A control is dirty if the user has changed the value in the UI.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WritableSignal>\n\n                    \n                \n                \n                    \n                        Default value : model(false as DisabledType, {\n    alias: 'ngxDisabled',\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:89\n                        \n                    \n\n            \n                \n                    Disabled controls are exempt from validation checks and are not included in the aggregate value of their ancestor controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WritableSignal>\n\n                    \n                \n                \n                    \n                        Default value : negatedSignal(() => this.disabled) as WritableSignal\n  >\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:96\n                        \n                    \n\n            \n                \n                    Indicates if the control is not disabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal>>\n\n                    \n                \n                \n                    \n                        Default value : computed(\n    (): Readonly> => {\n      if (!this.enabled()) {\n        return {};\n      }\n\n      const validators = this.validators();\n      if (validators.length === 0) {\n        return {};\n      }\n\n      const value = this.value();\n      const errors: SignalValidatorCombinedResults = {};\n\n      for (const validator of validators) {\n        if (!validator.validate(value)) {\n          (errors as any)[validator.key] = { control: this as any, key: validator.key, config: validator.config };\n        }\n      }\n\n      return errors;\n    }\n  )\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:146\n                        \n                    \n\n            \n                \n                    Reactive value that exposes active validation errors by key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        invalid\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => this.status() === 'INVALID')\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:191\n                        \n                    \n\n            \n                \n                    Whether the control is in invalid state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                \n                    \n                        Default value : input.required, Readonly>({\n    alias: 'ngxControl',\n    transform: this.inferControlKey,\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:68\n                        \n                    \n\n            \n                \n                    Input model.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        modelChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef>\n\n                    \n                \n                \n                    \n                        Default value : output>({ alias: 'ngxControlChange' })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:76\n                        \n                    \n\n            \n                \n                    Output model.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed((): string | null => {\n    const parentPath = this.parent?.path();\n    const key = this.key;\n    return parentPath != null && key != null ? `${parentPath}.${key}` : this.defaultKey;\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:123\n                        \n                    \n\n            \n                \n                    When the control is a child of a control container, this reactive value exposes its relative path.\nFor standalone controls it returns the default key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pristine\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(true)\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:196\n                        \n                    \n\n            \n                \n                    A control is pristine if the user has not yet changed the value in the UI.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : computed((): SignalControlStatus => {\n    if (this.disabled()) {\n      return 'DISABLED';\n    } else if (Object.keys(this.errors()).length > 0) {\n      return 'INVALID';\n    } else {\n      return 'VALID';\n    }\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:173\n                        \n                    \n\n            \n                \n                    The validation status of the control.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        touched\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:206\n                        \n                    \n\n            \n                \n                    A control is marked touched once the user has triggered a blur event on it.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        untouched\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : negatedSignal(() => this.touched)\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:211\n                        \n                    \n\n            \n                \n                    A control is untouched if the user has not yet triggered a blur event on it.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        valid\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => this.status() === 'VALID')\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:186\n                        \n                    \n\n            \n                \n                    The validation status of the control.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        validators\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignalWithTransform | Readonly | >\n\n                    \n                \n                \n                    \n                        Default value : input([] as unknown as Readonly, {\n    transform(\n      input: Readonly | (TValidators extends infer TValidator ? TValidator : never)\n    ): Readonly {\n      return Array.isArray(input) ? input : ([input] as any);\n    },\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:132\n                        \n                    \n\n            \n                \n                    Validators.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal>\n\n                    \n                \n                \n                    \n                        Default value : modelFrom({\n    input: () => this.model,\n    output: () => this.modelChange,\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control.directive.ts:81\n                        \n                    \n\n            \n                \n                    Control value.\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        key\n                    \n                \n\n                \n                    \n                        getkey()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/directives/signal-control.directive.ts:110\n                                \n                            \n                    \n                        \n                                Key of the control when it is a child\n\n\n                                \n                                    Returns :     string | number | null\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import {\n  Directive,\n  InputSignal,\n  InputSignalWithTransform,\n  OutputEmitterRef,\n  Signal,\n  WritableSignal,\n  computed,\n  effect,\n  inject,\n  input,\n  model,\n  output,\n  signal,\n  untracked,\n} from '@angular/core';\n\nimport { SignalControlContainer } from './signal-control-container.directive';\nimport { DisabledType, EnabledType } from '../models/disabled-type';\nimport { SignalControlStatus } from '../models/signal-control-status';\nimport { SignalControlStatusClasses } from '../models/signal-control-status-classes';\nimport { SignalValidator, SignalValidatorCombinedResults } from '../models/signal-validator';\nimport { SignalControlContainerRegistry } from '../services/signal-control-container-registry.service';\nimport { modelFrom } from '../signals/composed-model';\nimport { negatedSignal } from '../signals/negated-signal';\nimport { SIGNAL_CONTROL_STATUS_CLASSES } from '../tokens/signal-control-status-classes.token';\n\n// TODO: DOM attributes/validators, from CVA\n\n/**\n * Control directive.\n */\n@Directive({\n  selector: `[ngxControl]`,\n  standalone: true,\n  host: {\n    '[class]': 'classList()',\n    '[attr.disabled]': 'disabledAttribute()',\n    '[attr.aria-describedby]': 'ariaDescribedBy()',\n  },\n  exportAs: 'ngxControl',\n})\nexport class SignalControlDirective[] = []> {\n  /**\n   * @internal\n   */\n  protected readonly registry = inject(SignalControlContainerRegistry);\n\n  private readonly statusClasses: SignalControlStatusClasses = inject(SIGNAL_CONTROL_STATUS_CLASSES);\n\n  #parent: SignalControlContainer | null = null;\n  #key: string | number | null = null;\n\n  /**\n   * @internal\n   */\n  protected inferControlKey = (value: T): T => {\n    this.#parent = this.registry.controlContainer;\n    this.#key = this.registry.key;\n    this.registry.controlContainer = null;\n    this.registry.key = null;\n    return value;\n  };\n\n  /**\n   * Input model.\n   */\n  readonly model: InputSignal> = input.required, Readonly>({\n    alias: 'ngxControl',\n    transform: this.inferControlKey,\n  });\n\n  /**\n   * Output model.\n   */\n  readonly modelChange: OutputEmitterRef> = output>({ alias: 'ngxControlChange' });\n\n  /**\n   * Control value.\n   */\n  readonly value: WritableSignal> = modelFrom({\n    input: () => this.model,\n    output: () => this.modelChange,\n  });\n\n  /**\n   * Disabled controls are exempt from validation checks and are not included in the aggregate value of their ancestor controls.\n   */\n  readonly disabled: WritableSignal> = model(false as DisabledType, {\n    alias: 'ngxDisabled',\n  });\n\n  /**\n   * Indicates if the control is not disabled.\n   */\n  readonly enabled: WritableSignal> = negatedSignal(() => this.disabled) as WritableSignal\n  >;\n\n  /**\n   * When the control is a child of a control container, this value exposes a reference to the parent.\n   */\n  get parent(): SignalControlContainer | null {\n    return this.#parent;\n  }\n\n  /**\n   * Key of the control when it is a child\n   */\n  get key(): string | number | null {\n    return this.#key;\n  }\n\n  /**\n   * Default key when the control is not a child of a control container.\n   */\n  readonly defaultKey: string = 'control';\n\n  /**\n   * When the control is a child of a control container, this reactive value exposes its relative path.\n   * For standalone controls it returns the default key.\n   */\n  readonly path: Signal = computed((): string | null => {\n    const parentPath = this.parent?.path();\n    const key = this.key;\n    return parentPath != null && key != null ? `${parentPath}.${key}` : this.defaultKey;\n  });\n\n  /**\n   * Validators.\n   */\n  readonly validators: InputSignalWithTransform,\n    Readonly | (TValidators extends infer TValidator ? TValidator : never)\n  > = input([] as unknown as Readonly, {\n    transform(\n      input: Readonly | (TValidators extends infer TValidator ? TValidator : never)\n    ): Readonly {\n      return Array.isArray(input) ? input : ([input] as any);\n    },\n  });\n\n  /**\n   * Reactive value that exposes active validation errors by key.\n   */\n  readonly errors: Signal>> = computed(\n    (): Readonly> => {\n      if (!this.enabled()) {\n        return {};\n      }\n\n      const validators = this.validators();\n      if (validators.length === 0) {\n        return {};\n      }\n\n      const value = this.value();\n      const errors: SignalValidatorCombinedResults = {};\n\n      for (const validator of validators) {\n        if (!validator.validate(value)) {\n          (errors as any)[validator.key] = { control: this as any, key: validator.key, config: validator.config };\n        }\n      }\n\n      return errors;\n    }\n  );\n\n  /**\n   * The validation status of the control.\n   */\n  readonly status: Signal = computed((): SignalControlStatus => {\n    if (this.disabled()) {\n      return 'DISABLED';\n    } else if (Object.keys(this.errors()).length > 0) {\n      return 'INVALID';\n    } else {\n      return 'VALID';\n    }\n  });\n\n  /**\n   * The validation status of the control.\n   */\n  readonly valid: Signal = computed(() => this.status() === 'VALID');\n\n  /**\n   * Whether the control is in invalid state.\n   */\n  readonly invalid: Signal = computed(() => this.status() === 'INVALID');\n\n  /**\n   * A control is pristine if the user has not yet changed the value in the UI.\n   */\n  readonly pristine: WritableSignal = signal(true);\n\n  /**\n   * A control is dirty if the user has changed the value in the UI.\n   */\n  readonly dirty: WritableSignal = negatedSignal(() => this.pristine);\n\n  /**\n   * A control is marked touched once the user has triggered a blur event on it.\n   */\n  readonly touched: WritableSignal = signal(false);\n\n  /**\n   * A control is untouched if the user has not yet triggered a blur event on it.\n   */\n  readonly untouched: WritableSignal = negatedSignal(() => this.touched);\n\n  /**\n   * @internal\n   */\n  protected readonly disabledAttribute = computed(() => (this.disabled() ? '' : null));\n\n  /**\n   * Class list to style the input.\n   * @internal\n   */\n  protected readonly classList: Signal = computed(() => ({\n    [this.statusClasses.valid]: this.valid(),\n    [this.statusClasses.invalid]: this.invalid(),\n    [this.statusClasses.pristine]: this.pristine(),\n    [this.statusClasses.dirty]: this.dirty(),\n    [this.statusClasses.touched]: this.touched(),\n    [this.statusClasses.untouched]: this.untouched(),\n    [this.statusClasses.disabled]: this.disabled(),\n  }));\n\n  readonly #errorDescriptionElementIds = signal([]);\n\n  /**\n   * @internal\n   */\n  addErrorDescription(elementId: string) {\n    const currentDescriptions = untracked(() => this.#errorDescriptionElementIds());\n    this.#errorDescriptionElementIds.set([...currentDescriptions, elementId]);\n  }\n\n  /**\n   * @internal\n   */\n  removeErrorDescription(elementId: string) {\n    const currentDescriptions = untracked(() => this.#errorDescriptionElementIds());\n    this.#errorDescriptionElementIds.set(currentDescriptions.filter((currentId) => currentId !== elementId));\n  }\n\n  /**\n   * @internal\n   */\n  protected readonly ariaDescribedBy = computed(() => this.#errorDescriptionElementIds().join(' '));\n\n  /**\n   * @internal\n   */\n  protected readonly watchValueChanges = effect(\n    () => {\n      // Only controls need to sync the disabled status\n      if (this.defaultKey !== 'control') {\n        return;\n      }\n\n      if (this.value() !== undefined) {\n        this.disabled.set(false);\n      }\n    },\n    { allowSignalWrites: true }\n  );\n\n  /**\n   * @internal\n   */\n  protected readonly watchDisabledChanges = effect(\n    () => {\n      // Only controls need to sync the disabled status\n      if (this.defaultKey !== 'control') {\n        return;\n      }\n\n      if (this.disabled()) {\n        this.value.set(undefined as any);\n      }\n    },\n    { allowSignalWrites: true }\n  );\n\n  /**\n   * @internal\n   */\n  protected readonly registerControl = effect(\n    (cleanup) => {\n      const parent = this.parent;\n      const key = this.key;\n\n      if (parent == null || key == null) {\n        return;\n      }\n\n      parent.addControl(key, this as unknown as SignalControlDirective);\n      cleanup(() => parent.removeControl(key));\n    },\n    { allowSignalWrites: true }\n  );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignalControlErrorComponent.html":{"url":"components/SignalControlErrorComponent.html","title":"component - SignalControlErrorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SignalControlErrorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/components/signal-control-error.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component to display form errors.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-control-error\n            \n\n            \n                Standalone\n                true\n            \n\n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component, computed, effect, inject } from '@angular/core';\n\nimport { SignalControlErrorDirective } from '../directives/signal-control-error.directive';\nimport { SignalValidationResult } from '../models/signal-validator';\n\n/**\n * Component to display form errors.\n */\n@Component({\n  selector: 'ngx-control-error',\n  template: '',\n  host: {\n    '[id]': 'id()',\n  },\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SignalControlErrorComponent {\n  private readonly controlErrorDirective = inject(SignalControlErrorDirective, { skipSelf: true, host: true });\n\n  /**\n   * @internal\n   */\n  protected readonly id = computed(() => {\n    const error = this.controlErrorDirective.ngxError();\n    if (error == null) {\n      return;\n    }\n    return `ngx-control-error.${error.control.path()}.${error.key}`;\n  });\n\n  /**\n   * @internal\n   */\n  protected readonly registerDescription = effect(\n    (cleanup) => {\n      const id = this.id() as string;\n      const error = this.controlErrorDirective.ngxError() as SignalValidationResult;\n\n      error.control.addErrorDescription(id);\n      cleanup(() => error.control.removeErrorDescription(id));\n    },\n    { allowSignalWrites: true }\n  );\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'SignalControlErrorComponent', 'selector': 'ngx-control-error'}];\n    var DIRECTIVES = [{'name': 'InputTextControlValueAccessorDirective', 'selector': 'input[type=\"text\"][ngxControl][ngxTextInput]'},{'name': 'SignalControlDirective', 'selector': '[ngxControl]'},{'name': 'SignalControlErrorDirective', 'selector': 'ng-template[ngxError]'},{'name': 'SignalFormGroupDirective', 'selector': '[ngxFormGroup]'}];\n    var ACTUAL_COMPONENT = {'name': 'SignalControlErrorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SignalControlErrorDirective.html":{"url":"directives/SignalControlErrorDirective.html","title":"directive - SignalControlErrorDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  SignalControlErrorDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/directives/signal-control-error.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Structural directive for a form control error.\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        ng-template[ngxError]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxError\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                ngxError\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                ngTemplateContextGuard\n                            \n                            \n                                    Static\n                                ngTemplateGuard_ngxError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        ngTemplateContextGuard\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngTemplateContextGuard(directive: SignalControlErrorDirective, context)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-error.directive.ts:63\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TKey\n                                    TConfig\n                                    TValidationResult\n                            \n                        \n                    \n\n            \n                \n                        Directive context guard.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                directive\n                                            \n                                                            SignalControlErrorDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        ngTemplateGuard_ngxError\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngTemplateGuard_ngxError(dir: SignalControlErrorDirective, state: TValidationResult | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-error.directive.ts:49\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TKey\n                                    TConfig\n                                    TValidationResult\n                            \n                        \n                    \n\n            \n                \n                        Type guard to return correct type for structural directive.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dir\n                                            \n                                                            SignalControlErrorDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                state\n                                            \n                                                        TValidationResult | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     TValidationResult\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ngxError\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-error.directive.ts:26\n                        \n                    \n\n            \n                \n                    Control error.\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, TemplateRef, ViewContainerRef, effect, inject, input, untracked } from '@angular/core';\n\nimport { SignalValidationResult } from '../models/signal-validator';\nimport { SIGNAL_CONTROL_ERROR_STRATEGY } from '../tokens/signal-control-error-strategy.token';\n\n/**\n * Structural directive for a form control error.\n */\n@Directive({\n  selector: `ng-template[ngxError]`,\n  standalone: true,\n  exportAs: 'ngxError',\n})\nexport class SignalControlErrorDirective,\n> {\n  private readonly templateRef = inject(TemplateRef);\n  private readonly vcr = inject(ViewContainerRef);\n  private readonly errorStrategy = inject(SIGNAL_CONTROL_ERROR_STRATEGY);\n\n  /**\n   * Control error.\n   */\n  readonly ngxError = input.required();\n\n  private rendered = false;\n\n  /**\n   * @internal\n   */\n  protected readonly watchErrorChanges = effect(() => {\n    const error = this.ngxError();\n    const shouldRender: boolean = error != null && this.errorStrategy(error.control);\n\n    if (error != null && shouldRender && !this.rendered) {\n      untracked(() => this.vcr.createEmbeddedView(this.templateRef, { $implicit: error.config }));\n      this.rendered = true;\n    } else if (!shouldRender && this.rendered) {\n      untracked(() => this.vcr.clear());\n      this.rendered = false;\n    }\n  });\n\n  /**\n   * Type guard to return correct type for structural directive.\n   */\n  static ngTemplateGuard_ngxError,\n  >(\n    dir: SignalControlErrorDirective,\n    state: TValidationResult | undefined\n  ): state is TValidationResult {\n    return state != null;\n  }\n\n  /**\n   * Directive context guard.\n   */\n  static ngTemplateContextGuard,\n  >(\n    directive: SignalControlErrorDirective,\n    context: unknown\n  ): context is { $implicit: TConfig } {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignalControlValueAccessor.html":{"url":"classes/SignalControlValueAccessor.html","title":"class - SignalControlValueAccessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignalControlValueAccessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/directives/signal-control-value-accessor.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Signal control value accessor.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                nativeElement\n                            \n                            \n                                    Abstract\n                                    Readonly\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                markAsTouched\n                            \n                            \n                                onValueUpdated\n                            \n                            \n                                updateValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-value-accessor.directive.ts:19\n                        \n                    \n\n            \n                \n                    Reference to the host element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        nativeElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TElement\n\n                    \n                \n                \n                    \n                        Default value : this.elementRef.nativeElement\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-value-accessor.directive.ts:24\n                        \n                    \n\n            \n                \n                    Native element where the directive is applied.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                            Readonly\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ModelSignal>\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/directives/signal-control-value-accessor.directive.ts:29\n                        \n                    \n\n            \n                \n                    Model value.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        markAsTouched\n                        \n                    \n                \n            \n            \n                \nmarkAsTouched()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-value-accessor.directive.ts:50\n                        \n                    \n\n\n            \n                \n                        Marks the control as touched. A control is touched by focus and blur events that do not change the value.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onValueUpdated\n                        \n                    \n                \n            \n            \n                \nonValueUpdated(value: Readonly)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-value-accessor.directive.ts:35\n                        \n                    \n\n\n            \n                \n                        Event callback when the value changes that can be used to reflect the state to the DOM.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Readonly\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateValue\n                        \n                    \n                \n            \n            \n                \nupdateValue(value: Readonly)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/directives/signal-control-value-accessor.directive.ts:42\n                        \n                    \n\n\n            \n                \n                        Updates the underlying value of the control and marks it as dirty.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Readonly\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ElementRef, ModelSignal, effect, inject, untracked } from '@angular/core';\n\nimport { SignalControlDirective } from './signal-control.directive';\n\n/**\n * Signal control value accessor.\n */\nexport abstract class SignalControlValueAccessor {\n  /**\n   * Reference to the control directive.\n   */\n  private readonly controlDirective = inject>>(SignalControlDirective, {\n    self: true,\n  });\n\n  /**\n   * Reference to the host element.\n   */\n  protected readonly elementRef: ElementRef = inject(ElementRef);\n\n  /**\n   * Native element where the directive is applied.\n   */\n  protected readonly nativeElement: TElement = this.elementRef.nativeElement;\n\n  /**\n   * Model value.\n   */\n  abstract readonly value: ModelSignal>;\n\n  /**\n   * Event callback when the value changes that can be used to reflect the state to the DOM.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onValueUpdated(value: Readonly): void {\n    return; // Default noop implementation\n  }\n\n  /**\n   * Updates the underlying value of the control and marks it as dirty.\n   */\n  updateValue(value: Readonly): void {\n    this.value.update(() => value);\n    this.controlDirective.dirty.set(true);\n  }\n\n  /**\n   * Marks the control as touched. A control is touched by focus and blur events that do not change the value.\n   */\n  markAsTouched(): void {\n    this.controlDirective.touched.set(true);\n  }\n\n  /**\n   * @internal\n   */\n  protected readonly watchValueChanges = effect(() => {\n    const value = this.value();\n    untracked(() => this.onValueUpdated(value));\n  });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SignalFormGroupDirective.html":{"url":"directives/SignalFormGroupDirective.html","title":"directive - SignalFormGroupDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  SignalFormGroupDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/directives/signal-form-group.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Form group directive.\n\n            \n\n            \n                Extends\n            \n            \n                            SignalControlContainer\n            \n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxFormGroup]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxFormGroup\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                defaultKey\n                            \n                            \n                                    \n                                    Readonly\n                                model\n                            \n                            \n                                    \n                                    Readonly\n                                modelChange\n                            \n                            \n                                    Readonly\n                                controls\n                            \n                            \n                                    \n                                disabled\n                            \n                            \n                                    \n                                pristine\n                            \n                            \n                                    \n                                    Readonly\n                                status\n                            \n                            \n                                    \n                                touched\n                            \n                            \n                                    \n                                    Readonly\n                                value\n                            \n                            \n                                    Readonly\n                                dirty\n                            \n                            \n                                    Readonly\n                                enabled\n                            \n                            \n                                    Readonly\n                                errors\n                            \n                            \n                                    Readonly\n                                invalid\n                            \n                            \n                                    Readonly\n                                path\n                            \n                            \n                                    Readonly\n                                untouched\n                            \n                            \n                                    Readonly\n                                valid\n                            \n                            \n                                    Readonly\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addControl\n                            \n                            \n                                removeControl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addControl\n                        \n                    \n                \n            \n            \n                \naddControl(key: K, signalControlDirective: SignalControlDirective<>)\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlContainer\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlContainer:106\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    K\n                            \n                        \n                    \n\n            \n                \n                        Adds a control to the container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                signalControlDirective\n                                            \n                                                            SignalControlDirective<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeControl\n                        \n                    \n                \n            \n            \n                \nremoveControl(key: K)\n                \n            \n\n\n                    \n                        \n                            Inherited from         SignalControlContainer\n\n                        \n                    \n                    \n                        \n                                Defined in         SignalControlContainer:115\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    K\n                            \n                        \n                    \n\n            \n                \n                        Removes a control from the container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        defaultKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'form-group'\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:36\n\n                        \n                    \n\n            \n                \n                    Default key when the control is not a child of a control container.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                \n                    \n                        Default value : input.required, Readonly>({\n    alias: 'ngxFormGroup',\n    transform: this.inferControlKey,\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:21\n\n                        \n                    \n\n            \n                \n                    Input value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        modelChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef>\n\n                    \n                \n                \n                    \n                        Default value : output>({\n    alias: 'ngxFormGroupChange',\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:29\n\n                        \n                    \n\n            \n                \n                    Output value.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        controls\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Proxy(this.#controls.asReadonly() as any, {\n    get: (target, key: string) => {\n      if (key in target) {\n        return target[key as keyof TValue];\n      }\n\n      const keyedSignal = composedSignal({\n        get: () => {\n          this.registry.key = key as string | number;\n          this.registry.controlContainer = this as unknown as SignalControlContainer;\n          return this.value()[key as keyof TValue];\n        },\n        set: (value) => {\n          const objectValue = untracked(() => this.value());\n          if (!Object.is(objectValue[key as keyof TValue], value)) {\n            this.value.set({ ...objectValue, [key]: value });\n          }\n        },\n      });\n\n      Object.defineProperty(target, key, { value: keyedSignal, writable: false, configurable: false });\n      return keyedSignal;\n    },\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlContainer\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlContainer:26\n\n                        \n                    \n\n            \n                \n                    Exposes child signal values by key and also a reactive value with existing child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal<>\n\n                    \n                \n                \n                    \n                        Default value : composedSignal({\n    get: () => false,\n    set: () => this.controlDirectives().forEach((directive) => directive.disabled.set(false)),\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:82\n\n                        \n                    \n\n            \n                \n                    A control container can't be disabled, but when set to false it will change the disabled status of its child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        pristine\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : composedSignal({\n    get: () => this.controlDirectives().every((directive) => directive.pristine()),\n    set: (value) => this.controlDirectives().forEach((directive) => directive.pristine.set(value)),\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:90\n\n                        \n                    \n\n            \n                \n                    A control container is pristine if the user has not yet changed the value in the UI in any of its child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n    // If the form group is invalid, there is no need to keep checking\n    if (Object.keys(this.errors()).length > 0) {\n      return 'INVALID';\n    }\n\n    // Otherwise, check the status of all child controls, and as soon as a child control is invalid, return\n    const controlDirectiveStatuses = this.controlDirectives().map(({ status }) => status());\n    return controlDirectiveStatuses.some((status) => status === 'INVALID') ? 'INVALID' : 'VALID';\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:68\n\n                        \n                    \n\n            \n                \n                    The validation status of the form group and its child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        touched\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : composedSignal({\n    get: () => this.controlDirectives().some((directive) => directive.touched()),\n    set: (value) => this.controlDirectives().forEach((directive) => directive.touched.set(value)),\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:98\n\n                        \n                    \n\n            \n                \n                    A control container is marked touched once the user has triggered a blur event on it or in any of its child controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : modelFrom({\n    input: () => this.model,\n    output: () => this.modelChange,\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:60\n\n                        \n                    \n\n            \n                \n                    Exposes child signals for controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        dirty\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : negatedSignal(() => this.pristine)\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:201\n\n                        \n                    \n\n            \n                \n                    A control is dirty if the user has changed the value in the UI.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WritableSignal>\n\n                    \n                \n                \n                    \n                        Default value : negatedSignal(() => this.disabled) as WritableSignal\n  >\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:96\n\n                        \n                    \n\n            \n                \n                    Indicates if the control is not disabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal>>\n\n                    \n                \n                \n                    \n                        Default value : computed(\n    (): Readonly> => {\n      if (!this.enabled()) {\n        return {};\n      }\n\n      const validators = this.validators();\n      if (validators.length === 0) {\n        return {};\n      }\n\n      const value = this.value();\n      const errors: SignalValidatorCombinedResults = {};\n\n      for (const validator of validators) {\n        if (!validator.validate(value)) {\n          (errors as any)[validator.key] = { control: this as any, key: validator.key, config: validator.config };\n        }\n      }\n\n      return errors;\n    }\n  )\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:146\n\n                        \n                    \n\n            \n                \n                    Reactive value that exposes active validation errors by key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        invalid\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => this.status() === 'INVALID')\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:191\n\n                        \n                    \n\n            \n                \n                    Whether the control is in invalid state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed((): string | null => {\n    const parentPath = this.parent?.path();\n    const key = this.key;\n    return parentPath != null && key != null ? `${parentPath}.${key}` : this.defaultKey;\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:123\n\n                        \n                    \n\n            \n                \n                    When the control is a child of a control container, this reactive value exposes its relative path.\nFor standalone controls it returns the default key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        untouched\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : negatedSignal(() => this.touched)\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:211\n\n                        \n                    \n\n            \n                \n                    A control is untouched if the user has not yet triggered a blur event on it.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        valid\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => this.status() === 'VALID')\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:186\n\n                        \n                    \n\n            \n                \n                    The validation status of the control.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        validators\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignalWithTransform | Readonly | >\n\n                    \n                \n                \n                    \n                        Default value : input([] as unknown as Readonly, {\n    transform(\n      input: Readonly | (TValidators extends infer TValidator ? TValidator : never)\n    ): Readonly {\n      return Array.isArray(input) ? input : ([input] as any);\n    },\n  })\n                    \n                \n                        \n                            \n                                Inherited from         SignalControlDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         SignalControlDirective:132\n\n                        \n                    \n\n            \n                \n                    Validators.\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, InputSignal, OutputEmitterRef, input, output } from '@angular/core';\n\nimport { SignalControlContainer } from './signal-control-container.directive';\nimport { SignalValidator } from '../models/signal-validator';\n\n/**\n * Form group directive.\n */\n@Directive({\n  selector: `[ngxFormGroup]`,\n  standalone: true,\n  exportAs: 'ngxFormGroup',\n})\nexport class SignalFormGroupDirective[] = [],\n> extends SignalControlContainer {\n  /**\n   * Input value.\n   */\n  override readonly model: InputSignal> = input.required, Readonly>({\n    alias: 'ngxFormGroup',\n    transform: this.inferControlKey,\n  });\n\n  /**\n   * Output value.\n   */\n  override readonly modelChange: OutputEmitterRef> = output>({\n    alias: 'ngxFormGroupChange',\n  });\n\n  /**\n   * Default key when the control is not a child of a control container.\n   */\n  override readonly defaultKey: string = 'form-group';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SignalValidationResult.html":{"url":"interfaces/SignalValidationResult.html","title":"interface - SignalValidationResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SignalValidationResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/signal-validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Validation result type of a validator.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            config\n                                        \n                                \n                                \n                                        \n                                            control\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:     Readonly\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Readonly\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Validator configuration.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        control\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        control:         SignalControlDirective\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SignalControlDirective\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Parent control of validation error.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:     TKey\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TKey\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Error key.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { SignalControlDirective } from './../directives/signal-control.directive';\n/**\n * Type of a validator.\n */\nexport interface SignalValidator {\n  /**\n   * Validate function, return true if it is valid.\n   */\n  validate(value: Readonly): boolean;\n\n  /**\n   * Error key.\n   */\n  readonly key: TKey;\n\n  /**\n   * Validator configuration.\n   */\n  readonly config: Readonly;\n}\n\n/**\n * Validation result type of a validator.\n */\nexport interface SignalValidationResult {\n  /**\n   * Parent control of validation error.\n   */\n  readonly control: SignalControlDirective[]>;\n\n  /**\n   * Error key.\n   */\n  readonly key: TKey;\n\n  /**\n   * Validator configuration.\n   */\n  readonly config: Readonly;\n}\n\n/**\n * Type utility to derive the validator results from a collection of validators.\n */\nexport type SignalValidatorResults = TValidators extends (infer TValidator)[]\n  ? TValidator extends SignalValidator\n    ? SignalValidationResult[]\n    : never\n  : never;\n\n/**\n * Type utility to derive the validator keys from a collection of validators.\n */\nexport type SignalValidatorKeys = TValidators extends (infer TValidator)[]\n  ? TValidator extends SignalValidator\n    ? Readonly\n    : never\n  : never;\n\n/**\n * Type utility to get a validator result by key from a collection of validators.\n */\nexport type SignalValidatorResultByKey,\n> = Extract extends (infer TValidatorResult)[] ? Readonly : never,\n  { key: K }\n>;\n\n/**\n * Type utility to get validation results keyed by error key.\n */\nexport type SignalValidatorCombinedResults = {\n  [key in SignalValidatorKeys]?: SignalValidatorResultByKey;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SignalValidator.html":{"url":"interfaces/SignalValidator.html","title":"interface - SignalValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SignalValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/signal-validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Type of a validator.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            config\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        validate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(value: Readonly)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/models/signal-validator.ts:9\n                        \n                    \n\n\n            \n                \n                        Validate function, return true if it is valid.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Readonly\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:     Readonly\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Readonly\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Validator configuration.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:     TKey\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TKey\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Error key.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { SignalControlDirective } from './../directives/signal-control.directive';\n/**\n * Type of a validator.\n */\nexport interface SignalValidator {\n  /**\n   * Validate function, return true if it is valid.\n   */\n  validate(value: Readonly): boolean;\n\n  /**\n   * Error key.\n   */\n  readonly key: TKey;\n\n  /**\n   * Validator configuration.\n   */\n  readonly config: Readonly;\n}\n\n/**\n * Validation result type of a validator.\n */\nexport interface SignalValidationResult {\n  /**\n   * Parent control of validation error.\n   */\n  readonly control: SignalControlDirective[]>;\n\n  /**\n   * Error key.\n   */\n  readonly key: TKey;\n\n  /**\n   * Validator configuration.\n   */\n  readonly config: Readonly;\n}\n\n/**\n * Type utility to derive the validator results from a collection of validators.\n */\nexport type SignalValidatorResults = TValidators extends (infer TValidator)[]\n  ? TValidator extends SignalValidator\n    ? SignalValidationResult[]\n    : never\n  : never;\n\n/**\n * Type utility to derive the validator keys from a collection of validators.\n */\nexport type SignalValidatorKeys = TValidators extends (infer TValidator)[]\n  ? TValidator extends SignalValidator\n    ? Readonly\n    : never\n  : never;\n\n/**\n * Type utility to get a validator result by key from a collection of validators.\n */\nexport type SignalValidatorResultByKey,\n> = Extract extends (infer TValidatorResult)[] ? Readonly : never,\n  { key: K }\n>;\n\n/**\n * Type utility to get validation results keyed by error key.\n */\nexport type SignalValidatorCombinedResults = {\n  [key in SignalValidatorKeys]?: SignalValidatorResultByKey;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/components/signal-control-error.component.ts\n            \n            component\n            SignalControlErrorComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/control-value-accessors/input-text-control-value-accessor.directive.ts\n            \n            directive\n            InputTextControlValueAccessorDirective\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/lib/directives/signal-control-container.directive.ts\n            \n            class\n            SignalControlContainer\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/lib/directives/signal-control-error.directive.ts\n            \n            directive\n            SignalControlErrorDirective\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/directives/signal-control-value-accessor.directive.ts\n            \n            class\n            SignalControlValueAccessor\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/lib/directives/signal-control.directive.ts\n            \n            directive\n            SignalControlDirective\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/lib/directives/signal-form-group.directive.ts\n            \n            directive\n            SignalFormGroupDirective\n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                src/lib/models/signal-validator.ts\n            \n            interface\n            SignalValidationResult\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/models/signal-validator.ts\n            \n            interface\n            SignalValidator\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/signals/composed-model.ts\n            \n            function\n            modelFrom\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/signals/composed-signal.ts\n            \n            function\n            composedSignal\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/signals/negated-signal.ts\n            \n            variable\n            negatedSignal\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/signals/select-object-property.ts\n            \n            function\n            selectObjectProperty\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/tokens/signal-control-error-strategy.token.ts\n            \n            variable\n            SIGNAL_CONTROL_ERROR_STRATEGY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/tokens/signal-control-status-classes.token.ts\n            \n            variable\n            SIGNAL_CONTROL_STATUS_CLASSES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/validators/max-length.ts\n            \n            variable\n            maxLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/validators/required.ts\n            \n            variable\n            required\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/validators/required.ts\n            \n            variable\n            requiredValidator\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : ^17.2.0\n        \n            @angular/common : ^17.2.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            composedSignal   (src/.../composed-signal.ts)\n                        \n                        \n                            modelFrom   (src/.../composed-model.ts)\n                        \n                        \n                            selectObjectProperty   (src/.../select-object-property.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/signals/composed-signal.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        composedSignal\n                        \n                    \n                \n            \n            \n                \ncomposedSignal(__namedParameters: {get: T, set: void})\n                \n            \n\n\n\n\n            \n                \n                        Creates a writable signal from a pair of getter and setter.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                get\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                set\n                                            \n                                                            void\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     WritableSignal\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/signals/composed-model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        modelFrom\n                        \n                    \n                \n            \n            \n                \nmodelFrom(__namedParameters: {input: function, output: function})\n                \n            \n\n\n\n\n            \n                \n                        Creates a writable signal from a pair of input/output.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                input\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                output\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     WritableSignal\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/signals/select-object-property.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        selectObjectProperty\n                        \n                    \n                \n            \n            \n                \nselectObjectProperty(sourceSignal: WritableSignal, key: K)\n                \n            \n\n\n\n\n            \n                \n                        Given a writable signal with an object value returns a signal that represents the value of a property.\nIt is also writable, when updated emits a new value treating it as immutable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sourceSignal\n                                            \n                                                        WritableSignal\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     WritableSignal>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nngx-signal-forms\nThis library was generated with Nx.\nRunning unit tests\nRun nx test ngx-signal-forms to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    4 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DisabledType   (src/.../disabled-type.ts)\n                        \n                        \n                            EnabledType   (src/.../disabled-type.ts)\n                        \n                        \n                            SignalControlErrorStrategy   (src/.../signal-control-error-strategy.ts)\n                        \n                        \n                            SignalControlStatus   (src/.../signal-control-status.ts)\n                        \n                        \n                            SignalControlStatusClasses   (src/.../signal-control-status-classes.ts)\n                        \n                        \n                            SignalValidatorCombinedResults   (src/.../signal-validator.ts)\n                        \n                        \n                            SignalValidatorKeys   (src/.../signal-validator.ts)\n                        \n                        \n                            SignalValidatorResultByKey   (src/.../signal-validator.ts)\n                        \n                        \n                            SignalValidatorResults   (src/.../signal-validator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/models/disabled-type.ts\n    \n    \n        \n            \n                \n                    \n                    DisabledType\n                \n            \n            \n                \n                    Checks whether a control can be disabled based on its type.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnabledType\n                \n            \n            \n                \n                    Checks whether a control can be enabled based on its type.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/lib/models/signal-control-error-strategy.ts\n    \n    \n        \n            \n                \n                    \n                    SignalControlErrorStrategy\n                \n            \n            \n                \n                    Generic strategy to display form errors based on their status.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/lib/models/signal-control-status.ts\n    \n    \n        \n            \n                \n                    \n                    SignalControlStatus\n                \n            \n            \n                \n                        \"VALID\" | \"INVALID\" | \"DISABLED\"\n\n                \n            \n        \n    \n    src/lib/models/signal-control-status-classes.ts\n    \n    \n        \n            \n                \n                    \n                    SignalControlStatusClasses\n                \n            \n            \n                \n                    Type to define all CSS classes automatically added by the control directive.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/lib/models/signal-validator.ts\n    \n    \n        \n            \n                \n                    \n                    SignalValidatorCombinedResults\n                \n            \n            \n                \n                    Type utility to get validation results keyed by error key.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SignalValidatorKeys\n                \n            \n            \n                \n                    Type utility to derive the validator keys from a collection of validators.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SignalValidatorResultByKey\n                \n            \n            \n                \n                    Type utility to get a validator result by key from a collection of validators.\n\n                \n            \n            \n                \n                        Extract\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SignalValidatorResults\n                \n            \n            \n                \n                    Type utility to derive the validator results from a collection of validators.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            maxLength   (src/.../max-length.ts)\n                        \n                        \n                            negatedSignal   (src/.../negated-signal.ts)\n                        \n                        \n                            required   (src/.../required.ts)\n                        \n                        \n                            requiredValidator   (src/.../required.ts)\n                        \n                        \n                            SIGNAL_CONTROL_ERROR_STRATEGY   (src/.../signal-control-error-strategy.token.ts)\n                        \n                        \n                            SIGNAL_CONTROL_STATUS_CLASSES   (src/.../signal-control-status-classes.token.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/validators/max-length.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (maxLength: number): SignalValidator => ({\n  key: 'maxLength',\n  validate(value: string | null | undefined): boolean {\n    return value != null && value.length \n                    \n                \n\n            \n                \n                    Max length validator for text controls.\n\n                \n            \n\n        \n    \n\n    src/lib/signals/negated-signal.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        negatedSignal\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (originalSignalGetter: () => WritableSignal): WritableSignal =>\n  composedSignal({\n    get: () => !originalSignalGetter()(),\n    set: (enabled) => originalSignalGetter().set(!enabled),\n  })\n                    \n                \n\n            \n                \n                    Creates a negated writable signal for a source boolean writable signal.\n\n                \n            \n\n        \n    \n\n    src/lib/validators/required.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): SignalValidator => requiredValidator\n                    \n                \n\n            \n                \n                    Required validator for text controls.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requiredValidator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SignalValidator\n\n                    \n                \n                \n                    \n                        Default value : {\n  key: 'required',\n  validate(value): boolean {\n    return value != null && value.length > 0;\n  },\n  config: {},\n}\n                    \n                \n\n            \n                \n                    Required validator as a const to avoid creating new instances on every usage.\nTODO: make compatible with other types\n\n                \n            \n\n        \n    \n\n    src/lib/tokens/signal-control-error-strategy.token.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SIGNAL_CONTROL_ERROR_STRATEGY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('ngx-signal-forms.signal-control-error-strategy', {\n  providedIn: 'root',\n  factory(): SignalControlErrorStrategy {\n    return (control) => control.dirty() && control.touched();\n  },\n})\n                    \n                \n\n            \n                \n                    This token defines the default strategy used to display control errors.\n\n                \n            \n\n        \n    \n\n    src/lib/tokens/signal-control-status-classes.token.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SIGNAL_CONTROL_STATUS_CLASSES\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('ngx-signal-forms.signal-control-status-classes', {\n  providedIn: 'root',\n  factory(): SignalControlStatusClasses {\n    return {\n      valid: 'ngx-valid',\n      invalid: 'ngx-invalid',\n      pristine: 'ngx-pristine',\n      dirty: 'ngx-dirty',\n      touched: 'ngx-touched',\n      untouched: 'ngx-untouched',\n      disabled: 'ngx-disabled',\n    };\n  },\n})\n                    \n                \n\n            \n                \n                    This token defines the CSS classes that are added to controls depending on their status.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
