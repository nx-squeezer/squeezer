var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AsyncClassMultiProvider.html",[0,0.021,1,1.381]],["body/interfaces/AsyncClassMultiProvider.html",[0,0.033,1,2.339,2,0.851,3,0.751,4,0.751,5,0.571,6,0.96,7,1.354,8,1.079,9,2.083,10,1.74,11,0.489,12,1.069,13,3.238,14,0.902,15,0.943,16,0.045,17,1.113,18,1.518,19,1.518,20,1.705,21,1.518,22,0.566,23,0.851,24,0.783,25,1.705,26,1.599,27,1.079,28,1.923,29,1.923,30,2.184,31,2.951,32,0.783,33,2.14,34,1.205,35,1.705,36,0.851,37,2.951,38,1.209,39,0.034,40,0.034]],["title/interfaces/AsyncClassProvider.html",[0,0.021,33,1.381]],["body/interfaces/AsyncClassProvider.html",[0,0.033,1,2.14,2,0.851,3,0.751,4,0.751,5,0.571,6,0.96,7,1.354,8,1.079,9,2.083,10,1.74,11,0.489,12,1.069,13,3.238,14,0.902,15,0.943,16,0.045,17,1.113,18,1.518,19,1.518,20,1.705,21,1.518,22,0.566,23,0.851,24,0.783,25,1.705,26,1.599,27,1.079,28,1.923,29,1.923,30,2.184,31,2.951,32,0.783,33,2.339,34,1.205,35,1.705,36,0.851,37,2.951,38,1.209,39,0.034,40,0.034]],["title/interfaces/AsyncFactoryMultiProvider.html",[0,0.021,41,1.381]],["body/interfaces/AsyncFactoryMultiProvider.html",[0,0.033,2,0.84,3,0.741,4,0.741,5,0.563,6,0.947,8,1.064,9,2.07,10,1.732,11,0.482,12,1.06,14,0.897,15,0.935,16,0.045,17,1.109,18,1.497,19,1.497,20,1.682,21,1.505,22,0.562,23,0.84,24,0.778,25,1.682,26,1.593,27,1.064,32,0.817,34,1.195,36,0.84,38,1.193,39,0.034,40,0.034,41,2.324,42,1.682,43,3.225,44,1.649,45,1.336,46,1.497,47,2.479,48,1.497,49,2.122,50,2.155,51,2.912]],["title/interfaces/AsyncFactoryProvider.html",[0,0.021,49,1.381]],["body/interfaces/AsyncFactoryProvider.html",[0,0.033,2,0.84,3,0.741,4,0.741,5,0.563,6,0.947,8,1.064,9,2.07,10,1.732,11,0.482,12,1.06,14,0.897,15,0.935,16,0.045,17,1.109,18,1.497,19,1.497,20,1.682,21,1.505,22,0.562,23,0.84,24,0.778,25,1.682,26,1.593,27,1.064,32,0.817,34,1.195,36,0.84,38,1.193,39,0.034,40,0.034,41,2.122,42,1.682,43,3.225,44,1.649,45,1.336,46,1.497,47,2.479,48,1.497,49,2.324,50,2.155,51,2.912]],["title/interfaces/AsyncInjectableRecord.html",[0,0.021,52,1.557]],["body/interfaces/AsyncInjectableRecord.html",[0,0.01,2,0.31,3,0.274,4,0.274,5,0.208,7,0.812,11,0.178,12,0.51,14,0.582,15,0.789,16,0.046,17,0.871,22,0.365,23,0.31,24,0.505,26,1.054,27,0.393,32,0.208,34,1.406,35,0.621,36,1.24,38,1.662,39,0.016,40,0.016,44,0.923,45,1.505,46,0.553,48,2.001,52,2.231,53,0.796,54,0.796,55,2.564,56,3.278,57,3.278,58,3.652,59,1.932,60,2.222,61,1.761,62,3.547,63,1.769,64,0.91,65,1.893,66,1.769,67,1.769,68,0.849,69,1.506,70,1.769,71,1.076,72,0.621,73,0.796,74,1.076,75,2.253,76,0.621,77,0.923,78,1.506,79,0.916,80,1.31,81,1.595,82,1.076,83,1.076,84,1.076,85,1.076,86,2.966,87,0.621,88,0.916,89,1.932,90,1.076,91,0.916,92,0.701,93,1.508,94,1.076,95,1.076,96,1.076,97,2.247,98,1.153,99,2.456,100,1.076,101,0.701,102,1.076,103,1.506,104,1.506,105,2.253,106,0.916,107,1.506,108,1.076,109,1.076,110,1.076,111,3.652,112,2.253,113,2.253,114,1.076,115,2.253,116,1.076,117,1.076,118,2.253,119,2.222,120,0.796,121,1.159,122,0.916,123,0.916,124,0.796,125,0.796,126,0.553,127,0.796,128,0.91,129,0.701,130,1.076,131,2.885,132,1.076,133,1.076,134,2.61,135,0.621,136,1.153,137,2.61,138,2.253,139,2.885,140,0.916,141,2.253,142,2.253,143,1.076,144,2.253,145,2.253,146,0.701,147,2.253,148,1.076,149,2.61,150,1.769,151,1.076,152,1.769,153,1.076,154,1.076,155,1.076,156,1.076,157,1.769,158,1.769,159,1.769,160,1.076,161,1.769,162,1.076,163,1.076,164,1.076,165,1.076,166,1.076,167,1.076,168,1.918,169,1.508,170,2.791,171,1.932,172,1.076,173,0.916,174,1.076,175,0.796,176,1.076,177,0.916,178,1.076,179,1.076,180,1.076,181,1.769,182,1.076,183,1.076,184,1.769,185,1.918,186,1.668,187,1.076,188,1.076,189,1.076,190,1.076,191,1.076,192,1.076,193,1.076,194,1.076,195,1.076,196,1.076,197,1.076,198,1.076,199,1.076,200,2.61,201,1.769,202,2.253,203,1.076,204,1.506,205,1.506,206,1.506,207,1.506,208,1.506,209,1.769,210,1.076,211,1.076,212,1.076,213,0.916,214,1.076,215,0.916,216,1.076,217,1.076,218,1.076,219,1.076,220,1.076,221,1.076,222,1.076,223,1.769,224,1.769,225,0.916,226,1.076,227,1.076,228,1.076,229,1.769,230,1.076,231,1.076,232,1.076,233,1.769,234,1.076,235,1.076,236,1.076,237,0.796,238,2.253,239,2.253,240,1.076,241,1.076,242,1.076,243,1.076,244,1.076,245,0.796,246,1.076]],["title/injectables/AsyncInjector.html",[65,1.381,87,1.381]],["body/injectables/AsyncInjector.html",[0,0.009,3,0.255,4,0.255,5,0.194,7,0.767,11,0.166,14,0.372,15,0.97,16,0.046,17,0.847,22,0.419,23,0.29,24,0.484,26,1.162,27,0.367,32,0.194,34,1.389,35,0.58,36,1.224,38,1.533,39,0.016,40,0.016,44,0.879,45,1.459,46,0.516,48,2.136,52,2.071,53,2.558,54,0.743,55,2.566,56,2.501,57,2.501,58,3.179,59,1.236,60,1.422,61,1.542,62,3.179,63,1.671,64,0.859,65,1.836,66,1.671,67,1.671,68,0.814,69,1.422,70,1.671,71,1.004,72,0.58,73,0.743,74,1.004,75,2.146,76,0.58,77,0.879,78,1.422,79,0.854,80,1.236,81,1.542,82,1.004,83,1.004,84,1.004,85,1.004,86,2.914,87,0.965,88,0.854,89,1.851,90,1.004,91,0.854,92,2.071,93,1.445,94,1.004,95,1.004,96,1.004,97,2.203,98,1.088,99,2.364,100,1.004,101,0.654,102,1.004,103,1.422,104,1.422,105,2.146,106,2.129,107,1.422,108,1.004,109,1.004,110,1.004,111,3.565,112,2.146,113,2.146,114,1.004,115,2.146,116,1.004,117,1.004,118,2.146,119,2.129,120,0.743,121,1.103,122,0.854,123,0.854,124,0.743,125,0.743,126,0.516,127,0.743,128,1.286,129,0.654,130,1.004,131,2.778,132,1.004,133,1.004,134,2.565,135,0.58,136,1.088,137,2.501,138,2.146,139,2.778,140,0.854,141,2.146,142,2.146,143,1.004,144,2.146,145,2.146,146,0.654,147,2.146,148,1.671,149,2.501,150,1.671,151,1.004,152,1.671,153,1.004,154,1.004,155,1.004,156,1.004,157,1.671,158,1.671,159,1.671,160,1.004,161,1.671,162,1.004,163,1.671,164,1.004,165,1.004,166,1.004,167,1.004,168,1.826,169,2.059,170,3.035,171,1.851,172,1.004,173,0.854,174,1.004,175,0.743,176,1.004,177,0.854,178,1.004,179,1.004,180,1.004,181,1.671,182,1.004,183,1.004,184,1.671,185,1.826,186,1.588,187,1.004,188,1.004,189,1.004,190,2.501,191,1.004,192,1.004,193,1.004,194,1.004,195,1.004,196,1.004,197,1.004,198,1.004,199,1.004,200,2.501,201,1.671,202,2.146,203,1.004,204,1.422,205,1.422,206,1.422,207,1.422,208,1.422,209,1.671,210,1.004,211,1.004,212,1.004,213,0.854,214,1.004,215,0.854,216,1.004,217,1.004,218,1.004,219,1.004,220,1.004,221,1.004,222,1.004,223,1.671,224,1.671,225,0.854,226,1.004,227,1.004,228,1.004,229,1.671,230,1.004,231,1.004,232,1.004,233,1.671,234,1.004,235,1.004,236,1.004,237,0.743,238,2.146,239,2.146,240,1.004,241,1.004,242,1.004,243,1.004,244,1.004,245,0.743,246,1.004,247,1.231,248,1.671,249,2.048,250,3.329,251,1.231,252,2.639,253,2.552,254,2.169,255,1.231,256,1.231,257,1.004,258,2.048,259,1.231,260,1.231,261,1.231,262,1.004,263,1.231,264,1.671,265,1.231,266,2.048,267,1.231]],["title/interfaces/AsyncMultiProvider.html",[0,0.021,21,0.98]],["body/interfaces/AsyncMultiProvider.html",[0,0.032,2,1.023,3,0.902,4,0.902,5,0.685,6,1.153,8,1.296,11,0.587,12,1.194,16,0.042,21,1.697,23,1.328,32,0.685,39,0.039,40,0.039,93,2.048]],["title/interfaces/AsyncProviderConfig.html",[0,0.021,10,0.98]],["body/interfaces/AsyncProviderConfig.html",[0,0.027,2,0.875,3,0.772,4,0.772,5,0.586,6,0.987,10,1.545,11,0.503,12,1.087,15,0.959,16,0.044,17,0.772,22,0.526,24,0.586,32,0.586,39,0.035,40,0.035,45,1.73,55,2.477,60,3.209,61,1.939,68,1.395,72,1.752,81,1.939,92,2.455,135,2.477,136,2.794,146,2.873,268,3.034,269,3.755,270,4.621,271,4.621,272,3.209,273,3.769,274,2.455,275,3.209,276,3.209]],["title/interfaces/AsyncValueMultiProvider.html",[0,0.021,277,1.381]],["body/interfaces/AsyncValueMultiProvider.html",[0,0.033,2,0.867,3,0.765,4,0.765,5,0.581,6,0.978,8,1.099,9,2.1,10,1.752,11,0.498,12,1.081,14,0.91,15,0.765,16,0.045,17,1.088,18,1.546,19,1.546,20,1.736,21,1.536,22,0.57,23,0.867,24,0.789,25,1.736,26,1.608,27,1.099,32,0.789,34,1.219,36,0.867,38,1.232,39,0.035,40,0.035,76,1.736,77,1.232,277,2.359,278,2.866,279,2.164,280,3.006]],["title/interfaces/AsyncValueProvider.html",[0,0.021,279,1.381]],["body/interfaces/AsyncValueProvider.html",[0,0.033,2,0.867,3,0.765,4,0.765,5,0.581,6,0.978,8,1.099,9,2.1,10,1.752,11,0.498,12,1.081,14,0.91,15,0.765,16,0.045,17,1.088,18,1.546,19,1.546,20,1.736,21,1.536,22,0.57,23,0.867,24,0.789,25,1.736,26,1.608,27,1.099,32,0.789,34,1.219,36,0.867,38,1.232,39,0.035,40,0.035,76,1.736,77,1.232,277,2.164,278,2.866,279,2.359,280,3.006]],["title/interfaces/InjectionContext.html",[0,0.021,44,0.98]],["body/interfaces/InjectionContext.html",[0,0.03,2,0.965,3,0.851,4,0.851,5,0.647,11,0.554,12,1.154,16,0.044,17,1.018,32,0.647,39,0.037,40,0.037,44,1.639,64,2.367,68,1.088,72,1.932,87,1.932,128,2.281,204,2.848,205,2.848,206,2.848,207,2.848,208,2.848,281,2.848,282,3.346,283,3.346,284,4.101,285,4.101]],["title/directives/ResolveAsyncProvidersDirective.html",[126,1.23,286,1.77]],["body/directives/ResolveAsyncProvidersDirective.html",[3,0.36,4,0.36,5,0.274,7,1.785,11,0.234,15,0.842,16,0.046,17,0.777,22,0.605,24,0.426,27,0.989,32,0.426,36,0.636,38,1.436,39,0.021,40,0.021,46,1.947,48,0.728,55,0.817,61,1.947,64,1.392,68,1.231,69,2.303,72,0.817,77,1.356,78,1.205,80,2.45,81,0.728,86,2.709,87,1.273,88,1.876,89,2.878,91,1.205,92,0.922,93,2.339,98,1.435,101,1.435,103,1.205,104,1.205,106,1.205,107,1.876,120,3.044,121,2.083,126,1.803,127,1.631,134,0.922,135,1.764,171,1.631,185,1.205,248,2.203,250,2.203,252,2.261,253,1.205,254,0.922,274,0.922,278,1.99,283,1.415,286,2.878,287,1.205,288,2.303,289,1.205,290,1.415,291,1.631,292,2.203,293,4.113,294,1.631,295,2.203,296,2.203,297,2.203,298,2.203,299,2.203,300,2.203,301,3.054,302,2.203,303,1.876,304,1.876,305,2.203,306,2.261,307,3.506,308,3.054,309,3.054,310,3.785,311,3.889,312,3.785,313,3.785,314,3.054,315,3.506,316,3.054,317,3.054,318,2.203,319,2.203,320,1.876,321,1.876,322,2.203,323,2.203,324,2.6,325,2.203,326,3.054,327,2.706,328,3.317,329,1.735,330,2.701,331,2.701,332,3.317,333,2.701,334,2.701,335,1.735,336,1.735,337,1.735,338,2.701,339,3.054,340,1.735,341,2.701,342,2.701,343,1.205,344,1.735,345,1.735,346,2.701,347,2.701,348,1.735,349,1.735,350,1.735,351,1.735,352,1.735,353,1.735,354,1.735,355,1.735,356,1.735,357,1.735,358,1.735,359,1.735,360,1.735,361,1.735,362,1.735,363,1.735,364,3.317,365,2.701,366,2.701,367,1.735]],["title/interfaces/TypeWithoutConstructorParams.html",[0,0.021,28,1.557]],["body/interfaces/TypeWithoutConstructorParams.html",[0,0.032,2,1.023,3,0.902,4,0.902,5,0.685,9,2.13,14,0.923,16,0.043,28,2.697,29,2.31,30,2.625,32,0.685,39,0.039,40,0.039,48,1.824,97,2.048,368,3.546,369,3.546]],["title/changelog.html",[370,2.013,371,2.013,372,2.013]],["body/changelog.html",[5,0.51,16,0.039,22,0.482,39,0.032,40,0.032,59,1.954,68,1.122,372,2.64,373,3.236,374,2.247,375,3.236,376,2.64,377,4.995,378,5.183,379,5.183,380,3.236,381,3.236,382,3.236,383,4.995,384,4.995,385,4.995,386,4.228,387,3.236,388,3.236,389,3.236,390,3.236,391,5.646,392,3.236,393,4.995,394,4.229,395,4.229,396,3.016,397,4.711,398,3.843,399,4.229,400,3.236,401,4.995,402,4.229,403,4.229,404,3.236,405,3.236,406,3.236,407,3.236,408,3.236,409,3.236,410,3.236,411,3.236,412,4.229,413,4.711,414,2.937,415,3.236,416,3.236,417,3.236,418,3.236,419,3.236,420,3.236,421,3.236,422,5.183,423,4.229,424,3.236,425,3.236,426,3.236,427,3.236,428,4.711,429,4.229,430,3.236,431,3.236,432,2.64,433,3.236,434,3.236,435,3.236,436,3.236,437,3.236,438,2.64,439,3.236,440,3.236,441,3.236,442,3.236,443,3.236,444,3.236,445,3.236]],["title/coverage.html",[446,2.749]],["body/coverage.html",[0,0.04,1,1.345,5,0.45,6,1.467,7,1.656,8,1.648,10,0.954,14,1.013,15,0.592,16,0.045,21,0.954,22,0.325,23,0.915,24,0.45,28,1.517,29,1.517,30,1.723,33,1.345,35,1.345,39,0.03,40,0.03,41,1.345,42,2.084,44,0.954,49,1.345,50,1.723,52,1.517,53,2.868,54,2.868,65,1.345,68,0.757,73,1.723,76,1.345,77,1.479,87,1.345,97,1.345,126,1.198,128,1.198,169,2.084,173,4.028,245,1.723,268,2.329,277,1.345,279,1.345,281,1.982,282,2.329,286,1.723,288,1.982,289,1.982,306,2.671,343,1.982,368,2.329,369,2.329,446,1.982,447,2.329,448,2.855,449,2.855,450,3.889,451,3.889,452,2.329,453,5.572,454,3.608,455,3.608,456,3.608,457,4.423,458,2.329,459,3.889,460,2.855,461,2.855,462,2.329,463,5.247,464,2.855,465,3.608,466,3.608,467,2.329,468,2.329,469,2.855,470,2.855]],["title/dependencies.html",[414,1.714,471,2.122]],["body/dependencies.html",[16,0.043,39,0.039,40,0.039,72,2.117,471,3.125,472,4.494,473,4.494,474,4.494,475,4.494]],["title/miscellaneous/functions.html",[476,1.163,477,2.122]],["body/miscellaneous/functions.html",[1,1.222,6,0.851,7,1.201,8,1.359,11,0.223,13,2.197,14,0.829,15,0.973,16,0.045,17,0.342,19,0.691,22,0.589,23,0.989,24,0.663,26,1.541,32,0.624,33,0.776,34,1.051,35,1.222,36,0.755,39,0.02,40,0.02,41,1.222,42,1.715,43,1.566,44,0.867,45,0.617,46,1.088,48,1.527,49,0.776,50,1.566,52,1.378,53,0.994,54,1.937,55,0.776,61,1.661,64,1.527,65,0.776,68,0.437,73,1.566,76,1.222,77,1.471,81,1.088,92,2.645,93,1.222,98,1.378,99,1.144,101,0.875,121,2.168,124,1.566,125,0.994,128,1.527,129,1.378,134,1.934,135,2.21,136,1.378,140,1.144,146,0.875,168,1.144,169,2.148,170,2.527,175,1.566,177,1.144,186,1.566,213,1.144,215,1.144,225,1.801,245,1.566,252,3.006,253,3.457,254,2.683,257,2.116,262,1.344,264,2.116,269,1.801,272,1.144,274,0.875,275,1.144,276,1.144,277,1.222,278,2.234,279,0.776,287,1.144,291,2.539,294,0.994,303,1.801,304,1.144,306,3.006,320,1.801,321,1.144,324,2.92,374,1.801,396,1.566,452,1.344,454,1.344,455,2.969,462,2.116,465,1.344,466,2.969,471,0.994,476,0.776,477,2.197,478,2.749,479,1.647,480,3.208,481,2.617,482,1.647,483,1.647,484,1.344,485,1.344,486,2.116,487,1.344,488,1.344,489,0.994,490,1.344,491,2.969,492,1.344,493,2.116,494,2.116,495,1.344,496,2.116,497,2.969,498,1.344,499,5.373,500,1.647,501,3.208,502,1.344,503,1.344,504,2.116,505,3.64,506,2.116,507,3.43,508,2.594,509,3.23,510,1.344,511,1.647,512,1.344,513,1.344,514,1.344,515,1.344,516,1.344,517,1.647,518,1.344,519,2.116,520,1.647,521,1.344,522,3.208,523,1.647,524,1.344,525,1.344,526,1.344,527,1.344,528,1.344,529,1.647,530,1.344,531,1.344,532,1.344,533,1.344,534,1.344,535,1.344,536,1.801,537,1.344,538,1.801,539,1.344,540,1.647,541,1.344,542,1.344,543,1.344,544,1.344,545,1.344,546,1.647,547,1.344,548,1.344,549,1.344,550,1.344,551,1.344,552,1.344,553,1.344,554,1.344,555,1.344,556,1.344,557,1.344,558,1.344,559,1.647,560,1.344,561,1.647,562,1.647,563,2.116,564,1.344,565,2.116,566,1.344,567,3.208,568,1.647,569,2.116,570,1.647,571,2.228,572,1.144,573,1.144,574,1.144,575,1.144,576,1.144,577,1.144,578,1.647,579,1.647,580,1.344,581,1.647,582,1.344,583,1.344,584,1.647,585,1.344,586,1.647,587,1.344,588,1.344]],["title/index.html",[11,0.334,370,2.013,371,2.013]],["body/index.html",[7,1.515,13,2.032,14,0.788,16,0.045,17,0.538,22,0.617,23,0.792,24,0.746,29,0.641,32,0.638,34,0.534,36,0.61,39,0.015,40,0.015,42,0.948,43,1.565,44,0.673,45,0.97,46,1.087,59,1.215,61,1.984,64,1.412,68,1.115,77,1.216,81,0.845,86,1.215,89,2.032,93,1.98,97,0.568,98,0.641,101,1.377,119,0.837,120,2.973,121,2.224,122,0.837,123,0.837,124,1.215,125,1.565,126,1.62,127,1.215,128,1.95,129,1.609,134,1.933,135,2.262,136,1.07,146,1.07,169,1.221,171,0.728,175,1.215,186,1.215,237,1.215,252,0.728,254,0.641,269,2.681,272,0.837,273,0.983,274,1.07,275,1.398,276,1.8,278,2.15,286,1.565,287,0.837,291,2.538,292,0.983,293,3.149,294,1.215,295,1.642,296,1.642,297,2.968,298,1.642,299,1.642,300,0.983,301,1.642,302,0.983,303,2.338,304,1.398,305,0.983,306,2.752,307,2.114,308,1.642,309,2.114,310,2.746,311,2.746,312,2.469,313,2.469,314,2.114,315,1.642,316,2.114,317,1.642,318,0.983,319,0.983,320,1.398,321,1.8,322,2.469,323,2.968,324,2.681,325,0.983,326,1.642,327,0.983,374,3.228,386,2.469,396,1.828,398,1.642,432,0.983,438,0.983,446,0.837,447,2.114,456,0.983,471,0.728,477,1.565,484,2.469,485,1.642,486,1.642,487,0.983,488,0.983,489,0.728,490,0.983,491,2.469,492,1.642,493,2.469,494,1.642,495,0.983,496,1.642,497,3.301,498,3.301,502,1.642,503,0.983,504,1.642,506,1.642,507,2.968,509,2.746,510,0.983,512,0.983,513,0.983,514,0.983,515,0.983,516,0.983,518,0.983,519,1.642,521,0.983,524,0.983,525,0.983,526,0.983,527,0.983,528,0.983,530,0.983,531,0.983,532,0.983,533,1.642,534,0.983,535,0.983,536,1.8,537,0.983,538,2.102,539,0.983,541,0.983,542,1.642,543,0.983,544,2.968,545,0.983,547,0.983,548,0.983,549,2.114,550,0.983,551,0.983,552,0.983,553,0.983,554,0.983,555,0.983,556,0.983,557,0.983,558,0.983,560,2.469,563,1.642,564,0.983,565,1.642,566,0.983,571,2.81,572,0.837,573,1.398,574,0.837,575,0.837,576,0.837,577,1.8,580,0.983,582,1.642,583,1.642,585,1.642,587,1.642,588,0.983,589,2.013,590,2.013,591,2.013,592,2.013,593,3.027,594,2.013,595,3.366,596,2.013,597,2.114,598,1.205,599,1.205,600,1.205,601,2.592,602,3.027,603,1.205,604,3.027,605,1.205,606,1.205,607,1.205,608,1.205,609,2.013,610,1.205,611,1.205,612,2.013,613,1.205,614,1.205,615,2.592,616,3.366,617,1.205,618,2.592,619,1.205,620,1.205,621,1.205,622,2.013,623,1.205,624,1.205,625,1.205,626,2.013,627,2.013,628,1.205,629,2.013,630,1.205,631,1.205,632,3.027,633,1.205,634,1.205,635,1.205,636,1.205,637,1.205,638,1.205,639,1.205,640,1.205,641,2.013,642,1.205,643,1.205,644,1.205,645,1.205,646,1.205,647,1.205,648,1.205,649,1.205,650,1.205,651,1.205,652,1.205,653,2.013,654,1.205,655,1.205,656,1.205,657,1.205,658,1.205,659,1.205,660,1.642,661,1.205,662,1.205,663,1.205,664,3.027,665,2.013,666,1.205,667,2.592,668,2.013,669,1.205,670,2.013,671,3.027,672,1.205,673,1.205,674,1.205,675,1.205,676,1.205,677,1.205,678,1.205,679,1.205,680,1.205,681,1.205,682,1.205,683,1.205,684,1.205,685,1.205,686,1.205,687,2.013,688,1.205,689,2.013,690,1.205,691,1.205,692,1.205,693,1.205,694,1.205,695,1.205,696,1.205,697,1.205,698,2.013,699,1.205,700,1.205,701,1.205,702,1.205,703,1.205,704,1.205,705,1.205,706,1.205,707,1.205,708,3.027,709,2.013,710,1.205,711,1.205,712,2.592,713,1.205,714,1.205,715,1.205,716,1.205,717,1.205,718,1.205,719,1.205,720,1.205,721,1.205,722,1.205,723,1.205,724,1.205,725,2.013,726,1.205]],["title/modules.html",[489,2.391]],["body/modules.html",[16,0.04,39,0.04,40,0.04,489,2.776]],["title/overview.html",[727,3.23]],["body/overview.html",[2,1.063,16,0.039,39,0.039,40,0.039,65,2.129,126,1.896,727,3.687,728,5.192,729,4.519]],["title/properties.html",[12,0.827,414,1.714]],["body/properties.html",[12,0.972,16,0.044,22,0.6,39,0.037,40,0.037,45,1.845,68,1.097,121,1.734,237,2.975,290,3.372,376,3.372,396,2.975,597,3.372,660,3.372,730,4.133,731,4.133,732,4.133,733,4.133,734,4.927,735,4.133,736,4.133,737,4.133,738,4.133,739,4.133,740,4.133,741,4.133,742,4.133,743,4.133,744,4.133]],["title/miscellaneous/typealiases.html",[476,1.163,745,3.514]],["body/miscellaneous/typealiases.html",[1,1.798,6,1.35,8,1.582,11,0.516,14,0.694,15,0.792,16,0.043,18,1.97,22,0.535,24,0.74,26,1.4,27,1.4,33,1.798,39,0.036,40,0.036,41,1.798,42,2.212,47,3.261,49,1.798,79,3.261,80,2.835,81,2.226,277,1.798,279,1.798,281,2.65,288,2.65,289,3.261,339,3.83,476,1.798,478,3.532,481,3.114,569,3.83,746,3.817,747,3.817,748,4.696,749,4.696,750,4.696,751,5.086,752,5.306,753,3.817]],["title/miscellaneous/variables.html",[476,1.163,754,2.867]],["body/miscellaneous/variables.html",[11,0.523,14,0.704,16,0.043,22,0.608,24,0.611,34,1.257,36,1.115,39,0.036,40,0.036,55,2.232,61,1.987,64,1.625,68,1.358,77,1.711,97,1.824,121,1.987,128,2.147,129,2.058,169,1.824,254,2.058,274,2.517,291,2.86,294,2.338,343,3.29,458,3.159,467,3.159,468,3.865,476,1.824,477,2.338,478,2.689,536,2.689,538,2.689,571,3.29,572,2.689,573,2.689,574,2.689,575,2.689,576,2.689,577,2.689,754,3.159,755,3.872,756,3.872,757,3.872,758,3.872,759,3.872]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"interfaces/InjectionContext.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"interfaces/TypeWithoutConstructorParams.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":173,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"coverage.html":{}}}],["0/1",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["009816c",{"_index":406,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":378,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":393,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":422,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":412,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":379,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":728,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":443,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":435,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":427,"title":{},"body":{"changelog.html":{}}}],["1.0.3",{"_index":426,"title":{},"body":{"changelog.html":{}}}],["1.0.4",{"_index":425,"title":{},"body":{"changelog.html":{}}}],["1.0.5",{"_index":424,"title":{},"body":{"changelog.html":{}}}],["1.0.6",{"_index":421,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":456,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["1013",{"_index":405,"title":{},"body":{"changelog.html":{}}}],["1099",{"_index":388,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":729,"title":{},"body":{"overview.html":{}}}],["12",{"_index":392,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":428,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":413,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":423,"title":{},"body":{"changelog.html":{}}}],["17.0.0",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["2.0.0",{"_index":411,"title":{},"body":{"changelog.html":{}}}],["2.0.1",{"_index":409,"title":{},"body":{"changelog.html":{}}}],["2.0.2",{"_index":407,"title":{},"body":{"changelog.html":{}}}],["2.5.0",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["2023",{"_index":391,"title":{},"body":{"changelog.html":{}}}],["2024",{"_index":377,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":410,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":408,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":390,"title":{},"body":{"changelog.html":{}}}],["3.0.1",{"_index":382,"title":{},"body":{"changelog.html":{}}}],["3.0.2",{"_index":381,"title":{},"body":{"changelog.html":{}}}],["3.0.3",{"_index":380,"title":{},"body":{"changelog.html":{}}}],["3.0.4",{"_index":376,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["33",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["39;&#39",{"_index":584,"title":{},"body":{"miscellaneous/functions.html":{}}}],["39;@nx",{"_index":559,"title":{},"body":{"miscellaneous/functions.html":{}}}],["39;eager&#39",{"_index":540,"title":{},"body":{"miscellaneous/functions.html":{}}}],["39;value&#39",{"_index":517,"title":{},"body":{"miscellaneous/functions.html":{}}}],["5234f18",{"_index":434,"title":{},"body":{"changelog.html":{}}}],["527",{"_index":441,"title":{},"body":{"changelog.html":{}}}],["58e28fa",{"_index":400,"title":{},"body":{"changelog.html":{}}}],["679",{"_index":419,"title":{},"body":{"changelog.html":{}}}],["681",{"_index":416,"title":{},"body":{"changelog.html":{}}}],["682",{"_index":417,"title":{},"body":{"changelog.html":{}}}],["733a9f8",{"_index":420,"title":{},"body":{"changelog.html":{}}}],["85f83e1",{"_index":389,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":338,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["_all_",{"_index":346,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["_asyncinjectorinitializer",{"_index":348,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["above",{"_index":648,"title":{},"body":{"index.html":{}}}],["actually",{"_index":675,"title":{},"body":{"index.html":{}}}],["add",{"_index":431,"title":{},"body":{"changelog.html":{}}}],["additionally",{"_index":319,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["afterwards",{"_index":547,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["against",{"_index":551,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["ahead",{"_index":716,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":746,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":113,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["angular",{"_index":396,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["angular's",{"_index":577,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["angular/core",{"_index":72,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/InjectionContext.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"dependencies.html":{}}}],["another",{"_index":626,"title":{},"body":{"index.html":{}}}],["any).useasyncclass",{"_index":37,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{}}}],["any).useasyncfactory",{"_index":51,"title":{},"body":{"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{}}}],["any).useasyncvalue",{"_index":280,"title":{},"body":{"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{}}}],["api",{"_index":595,"title":{},"body":{"index.html":{}}}],["app",{"_index":617,"title":{},"body":{"index.html":{}}}],["app_initializer",{"_index":618,"title":{},"body":{"index.html":{}}}],["application",{"_index":680,"title":{},"body":{"index.html":{}}}],["approach",{"_index":696,"title":{},"body":{"index.html":{}}}],["approutes",{"_index":686,"title":{},"body":{"index.html":{}}}],["array",{"_index":19,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"miscellaneous/functions.html":{}}}],["array.isarray(existingprovider",{"_index":141,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["array.isarray(injectable",{"_index":152,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["arrayitemtype",{"_index":18,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"miscellaneous/typealiases.html":{}}}],["arrow_up",{"_index":399,"title":{},"body":{"changelog.html":{}}}],["assertinitialized",{"_index":116,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["assertnotdestroyed",{"_index":110,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["assertnotinitialized",{"_index":114,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["async",{"_index":22,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["async.function.ts",{"_index":466,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["async_injector_initializer",{"_index":343,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["asyncclassmultiprovider",{"_index":1,"title":{"interfaces/AsyncClassMultiProvider.html":{}},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["asyncclassprovider",{"_index":33,"title":{"interfaces/AsyncClassProvider.html":{}},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["asyncfactorymultiprovider",{"_index":41,"title":{"interfaces/AsyncFactoryMultiProvider.html":{}},"body":{"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["asyncfactoryprovider",{"_index":49,"title":{"interfaces/AsyncFactoryProvider.html":{}},"body":{"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["asyncfactorywithinjectioncontext",{"_index":47,"title":{},"body":{"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"miscellaneous/typealiases.html":{}}}],["asynchronous",{"_index":602,"title":{},"body":{"index.html":{}}}],["asynchronously",{"_index":610,"title":{},"body":{"index.html":{}}}],["asyncinjectablerecord",{"_index":52,"title":{"interfaces/AsyncInjectableRecord.html":{}},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncinjector",{"_index":87,"title":{"injectables/AsyncInjector.html":{}},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/InjectionContext.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"coverage.html":{}}}],["asyncinjector['resolve",{"_index":285,"title":{},"body":{"interfaces/InjectionContext.html":{}}}],["asyncmultiprovider",{"_index":21,"title":{"interfaces/AsyncMultiProvider.html":{}},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"coverage.html":{}}}],["asyncproviderconfig",{"_index":10,"title":{"interfaces/AsyncProviderConfig.html":{}},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"coverage.html":{}}}],["asyncproviders",{"_index":587,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["asyncprovidertypes",{"_index":569,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["asyncstaticprovider",{"_index":26,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["asyncstaticprovider.provide",{"_index":220,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["asyncstaticprovider.useasyncclass().then((classtype",{"_index":216,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["asyncstaticprovider.useasyncfactory().then((factory",{"_index":218,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["asyncstaticprovider.useasyncvalue",{"_index":214,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["asyncstaticproviders",{"_index":257,"title":{},"body":{"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{}}}],["asyncstaticproviders.foreach((asyncstaticprovider",{"_index":133,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["asyncvaluemultiprovider",{"_index":277,"title":{"interfaces/AsyncValueMultiProvider.html":{}},"body":{"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["asyncvalueprovider",{"_index":279,"title":{"interfaces/AsyncValueProvider.html":{}},"body":{"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["author",{"_index":743,"title":{},"body":{"properties.html":{}}}],["available",{"_index":322,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["await",{"_index":186,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["before",{"_index":129,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["behavior",{"_index":525,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["being",{"_index":580,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["between",{"_index":553,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["blocking",{"_index":622,"title":{},"body":{"index.html":{}}}],["blocks",{"_index":697,"title":{},"body":{"index.html":{}}}],["bootstrapapplication(appcomponent",{"_index":497,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["break",{"_index":605,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":394,"title":{},"body":{"changelog.html":{}}}],["bug",{"_index":383,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":736,"title":{},"body":{"properties.html":{}}}],["bundle",{"_index":629,"title":{},"body":{"index.html":{}}}],["calculatecirculardependencychain",{"_index":82,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["calculatecirculardependencychain(this.dependencymap",{"_index":232,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["called",{"_index":554,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["calling",{"_index":176,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["can&#39;t",{"_index":546,"title":{},"body":{"miscellaneous/functions.html":{}}}],["can't",{"_index":122,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"index.html":{}}}],["case",{"_index":689,"title":{},"body":{"index.html":{}}}],["catch((error",{"_index":242,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["caused",{"_index":630,"title":{},"body":{"index.html":{}}}],["cdr",{"_index":352,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["certain",{"_index":294,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["changedetection",{"_index":312,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["changedetectionstrategy.onpush",{"_index":313,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["changedetectorref",{"_index":340,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["changelog",{"_index":372,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":395,"title":{},"body":{"changelog.html":{}}}],["check",{"_index":664,"title":{},"body":{"index.html":{}}}],["child",{"_index":316,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["childcomponent",{"_index":310,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["circular",{"_index":84,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["class",{"_index":7,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["class_provider",{"_index":504,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["classtype",{"_index":217,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["code",{"_index":544,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["common",{"_index":627,"title":{},"body":{"index.html":{}}}],["compared",{"_index":576,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["completed",{"_index":694,"title":{},"body":{"index.html":{}}}],["completion",{"_index":539,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["component",{"_index":120,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["components",{"_index":490,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["config",{"_index":25,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{}}}],["config.ts",{"_index":268,"title":{},"body":{"interfaces/AsyncProviderConfig.html":{},"coverage.html":{}}}],["config_token",{"_index":702,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":594,"title":{},"body":{"index.html":{}}}],["cons",{"_index":621,"title":{},"body":{"index.html":{}}}],["const",{"_index":134,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["constructor",{"_index":30,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/TypeWithoutConstructorParams.html":{},"coverage.html":{}}}],["consume",{"_index":611,"title":{},"body":{"index.html":{}}}],["consumption",{"_index":674,"title":{},"body":{"index.html":{}}}],["context",{"_index":46,"title":{},"body":{"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["context.ts",{"_index":282,"title":{},"body":{"interfaces/InjectionContext.html":{},"coverage.html":{}}}],["contrary",{"_index":531,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["controlled",{"_index":526,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["coverage",{"_index":446,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cyclic",{"_index":552,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["cyclicdependencies",{"_index":229,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["data",{"_index":609,"title":{},"body":{"index.html":{}}}],["declaration",{"_index":533,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["declare",{"_index":484,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["declared",{"_index":493,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["declaring",{"_index":496,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["default",{"_index":274,"title":{},"body":{"interfaces/AsyncProviderConfig.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":250,"title":{},"body":{"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{}}}],["delay",{"_index":296,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["delays",{"_index":623,"title":{},"body":{"index.html":{}}}],["demand",{"_index":701,"title":{},"body":{"index.html":{}}}],["demo",{"_index":685,"title":{},"body":{"index.html":{}}}],["dependantinjectiontoken",{"_index":222,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["dependencies",{"_index":471,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["dependencies.function",{"_index":85,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["dependency",{"_index":237,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"index.html":{},"properties.html":{}}}],["dependencychain",{"_index":231,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["dependencychain.map((token",{"_index":234,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["dependencymap",{"_index":102,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["depends",{"_index":100,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["dependson",{"_index":224,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["dependson.push(dependsoninjectiontoken",{"_index":227,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["dependsoninjectiontoken",{"_index":223,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["deprecation/deprecation",{"_index":208,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/InjectionContext.html":{}}}],["deps",{"_index":401,"title":{},"body":{"changelog.html":{}}}],["described",{"_index":647,"title":{},"body":{"index.html":{}}}],["description",{"_index":290,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"properties.html":{}}}],["designed",{"_index":599,"title":{},"body":{"index.html":{}}}],["destroyed",{"_index":103,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{}}}],["di",{"_index":597,"title":{},"body":{"index.html":{},"properties.html":{}}}],["diagram",{"_index":678,"title":{},"body":{"index.html":{}}}],["different",{"_index":503,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["directive",{"_index":126,"title":{"directives/ResolveAsyncProvidersDirective.html":{}},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["directives",{"_index":287,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["disable",{"_index":205,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/InjectionContext.html":{}}}],["documentation",{"_index":447,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["done",{"_index":681,"title":{},"body":{"index.html":{}}}],["during",{"_index":160,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["e2fd0a8",{"_index":418,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":486,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["eager",{"_index":146,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncProviderConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["ensure",{"_index":572,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["entry",{"_index":439,"title":{},"body":{"changelog.html":{}}}],["envinjector",{"_index":198,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["environment",{"_index":272,"title":{},"body":{"interfaces/AsyncProviderConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["environmentinjector",{"_index":63,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["error",{"_index":62,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["error(`${injectablerecord.injectiontoken.tostring",{"_index":158,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["error(`${injectiontoken.tostring",{"_index":142,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["error(`async",{"_index":112,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["error(`cyclic",{"_index":236,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["eslint",{"_index":204,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/InjectionContext.html":{}}}],["even",{"_index":534,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["example",{"_index":324,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["examples",{"_index":591,"title":{},"body":{"index.html":{}}}],["executing",{"_index":543,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["existing",{"_index":606,"title":{},"body":{"index.html":{}}}],["existingprovider",{"_index":137,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["explanatory",{"_index":558,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["export",{"_index":32,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"interfaces/InjectionContext.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"interfaces/TypeWithoutConstructorParams.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["exposes",{"_index":555,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["extends",{"_index":9,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"interfaces/TypeWithoutConstructorParams.html":{}}}],["f23e180",{"_index":442,"title":{},"body":{"changelog.html":{}}}],["factory",{"_index":42,"title":{},"body":{"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["factory(injectioncontext",{"_index":219,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["factory.ts",{"_index":518,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["factory_provider",{"_index":510,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["failed",{"_index":159,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["false",{"_index":104,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{}}}],["features",{"_index":398,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"interfaces/InjectionContext.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"interfaces/TypeWithoutConstructorParams.html":{},"changelog.html":{},"coverage.html":{}}}],["filter",{"_index":194,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["finally",{"_index":524,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["fine",{"_index":645,"title":{},"body":{"index.html":{}}}],["first",{"_index":513,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["firstservice",{"_index":515,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["firststring",{"_index":563,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["firstvaluefrom(inject(httpclient).get('/config",{"_index":703,"title":{},"body":{"index.html":{}}}],["fix",{"_index":437,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":384,"title":{},"body":{"changelog.html":{}}}],["flag",{"_index":527,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["flat",{"_index":193,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["flexibility",{"_index":656,"title":{},"body":{"index.html":{}}}],["fn",{"_index":201,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["full",{"_index":704,"title":{},"body":{"index.html":{}}}],["function",{"_index":14,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"interfaces/TypeWithoutConstructorParams.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":477,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["functions/is",{"_index":74,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["generated",{"_index":373,"title":{},"body":{"changelog.html":{}}}],["get(injectiontoken",{"_index":148,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["getsingleprovider(injectablerecord",{"_index":156,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["getting",{"_index":370,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["git+https://github.com/nx",{"_index":741,"title":{},"body":{"properties.html":{}}}],["give",{"_index":655,"title":{},"body":{"index.html":{}}}],["go",{"_index":715,"title":{},"body":{"index.html":{}}}],["grained",{"_index":646,"title":{},"body":{"index.html":{}}}],["great",{"_index":637,"title":{},"body":{"index.html":{}}}],["gt",{"_index":499,"title":{},"body":{"miscellaneous/functions.html":{}}}],["happens",{"_index":521,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["having",{"_index":601,"title":{},"body":{"index.html":{}}}],["help",{"_index":654,"title":{},"body":{"index.html":{}}}],["hierarchy",{"_index":305,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["homepage",{"_index":733,"title":{},"body":{"properties.html":{}}}],["https://github.com/nx",{"_index":734,"title":{},"body":{"properties.html":{}}}],["hydrate",{"_index":462,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["hydrate(injectable",{"_index":168,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{}}}],["hydrate(record",{"_index":167,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["identical",{"_index":673,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["implementers",{"_index":657,"title":{},"body":{"index.html":{}}}],["implements",{"_index":88,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{}}}],["implicit",{"_index":366,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["import",{"_index":17,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"interfaces/InjectionContext.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["import(&#39;./factory&#39;).then((x",{"_index":511,"title":{},"body":{"miscellaneous/functions.html":{}}}],["import(&#39;./first",{"_index":505,"title":{},"body":{"miscellaneous/functions.html":{}}}],["import(&#39;./my",{"_index":500,"title":{},"body":{"miscellaneous/functions.html":{}}}],["import(&#39;./route.component&#39",{"_index":586,"title":{},"body":{"miscellaneous/functions.html":{}}}],["import(&#39;./second",{"_index":523,"title":{},"body":{"miscellaneous/functions.html":{}}}],["import(&#39;./value&#39;).then((x",{"_index":508,"title":{},"body":{"miscellaneous/functions.html":{}}}],["import('./factory').then((x",{"_index":710,"title":{},"body":{"index.html":{}}}],["import('./first",{"_index":708,"title":{},"body":{"index.html":{}}}],["import('./my",{"_index":670,"title":{},"body":{"index.html":{}}}],["import('./route.component",{"_index":687,"title":{},"body":{"index.html":{}}}],["import('./second",{"_index":713,"title":{},"body":{"index.html":{}}}],["import('./value').then((x",{"_index":709,"title":{},"body":{"index.html":{}}}],["imports",{"_index":309,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["increasing",{"_index":635,"title":{},"body":{"index.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"interfaces/InjectionContext.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"interfaces/InjectionContext.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"interfaces/TypeWithoutConstructorParams.html":{}}}],["init",{"_index":249,"title":{},"body":{"injectables/AsyncInjector.html":{}}}],["init(...asyncstaticproviders",{"_index":130,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["init(asyncstaticproviders",{"_index":255,"title":{},"body":{"injectables/AsyncInjector.html":{}}}],["initial",{"_index":59,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"changelog.html":{},"index.html":{}}}],["initialized",{"_index":105,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["initializer",{"_index":758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initializer.token",{"_index":345,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["initializer.token.ts",{"_index":468,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["initializes",{"_index":273,"title":{},"body":{"interfaces/AsyncProviderConfig.html":{},"index.html":{}}}],["inject",{"_index":64,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/InjectionContext.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["inject(async_injector_initializer",{"_index":349,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["inject(asyncinjector",{"_index":91,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{}}}],["inject(asyncinjector).resolve(injectiontoken",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject(changedetectorref",{"_index":353,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["inject(environmentinjector",{"_index":199,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["inject(httpclient).get('/config",{"_index":700,"title":{},"body":{"index.html":{}}}],["inject(injector",{"_index":95,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["inject(my_service",{"_index":668,"title":{},"body":{"index.html":{}}}],["inject(second_injection_token",{"_index":566,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["inject(string_injector_token",{"_index":318,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["inject(templateref",{"_index":351,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["inject(token",{"_index":211,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["inject(viewcontainerref",{"_index":350,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["injectable",{"_index":65,"title":{"injectables/AsyncInjector.html":{}},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["injectable.map((record",{"_index":153,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["injectable.promise",{"_index":238,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["injectable.resolvedvalue",{"_index":241,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["injectable.status",{"_index":239,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["injectablerecord.resolvedvalue",{"_index":162,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["injectablerecord.status",{"_index":157,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["injectables",{"_index":247,"title":{},"body":{"injectables/AsyncInjector.html":{}}}],["injected",{"_index":123,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"index.html":{}}}],["injectedtext",{"_index":317,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["injectflags",{"_index":66,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["injectflags.default",{"_index":210,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["injection",{"_index":45,"title":{},"body":{"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncProviderConfig.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["injectioncontext",{"_index":44,"title":{"interfaces/InjectionContext.html":{}},"body":{"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/InjectionContext.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["injectiontoken",{"_index":55,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncProviderConfig.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('my",{"_index":707,"title":{},"body":{"index.html":{}}}],["injectiontoken('ngx",{"_index":756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontokens",{"_index":170,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{}}}],["injectiontokens.every((injectiontoken",{"_index":246,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["injectiontokens.length",{"_index":172,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["injectiontokens.map((injectiontoken",{"_index":182,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["injectiontokentype",{"_index":750,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["injectiontokentypecollection",{"_index":79,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"miscellaneous/typealiases.html":{}}}],["injectiontokentypemap",{"_index":80,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/typealiases.html":{}}}],["injectoptions",{"_index":67,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["injector",{"_index":68,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/InjectionContext.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["injector&#39",{"_index":561,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injector.async",{"_index":757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injector.ts",{"_index":54,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["injector.ts:111",{"_index":251,"title":{},"body":{"injectables/AsyncInjector.html":{}}}],["injector.ts:144",{"_index":260,"title":{},"body":{"injectables/AsyncInjector.html":{}}}],["injector.ts:164",{"_index":263,"title":{},"body":{"injectables/AsyncInjector.html":{}}}],["injector.ts:167",{"_index":265,"title":{},"body":{"injectables/AsyncInjector.html":{}}}],["injector.ts:170",{"_index":267,"title":{},"body":{"injectables/AsyncInjector.html":{}}}],["injector.ts:211",{"_index":261,"title":{},"body":{"injectables/AsyncInjector.html":{}}}],["injector.ts:46",{"_index":259,"title":{},"body":{"injectables/AsyncInjector.html":{}}}],["injector.ts:79",{"_index":256,"title":{},"body":{"injectables/AsyncInjector.html":{}}}],["injector/async",{"_index":283,"title":{},"body":{"interfaces/InjectionContext.html":{},"directives/ResolveAsyncProvidersDirective.html":{}}}],["injectors",{"_index":304,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["input",{"_index":327,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["input('ngxresolveasyncproviders",{"_index":354,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["inputs",{"_index":333,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["inputtext",{"_index":326,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["inside",{"_index":690,"title":{},"body":{"index.html":{}}}],["install",{"_index":725,"title":{},"body":{"index.html":{}}}],["installation",{"_index":596,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":118,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["instantiating",{"_index":652,"title":{},"body":{"index.html":{}}}],["instead",{"_index":321,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["integration",{"_index":720,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"interfaces/InjectionContext.html":{},"interfaces/TypeWithoutConstructorParams.html":{}},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"interfaces/InjectionContext.html":{},"interfaces/TypeWithoutConstructorParams.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"interfaces/InjectionContext.html":{},"interfaces/TypeWithoutConstructorParams.html":{},"overview.html":{}}}],["interfaces/async",{"_index":75,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["interfaces/injection",{"_index":78,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{}}}],["isasyncclassprovider",{"_index":35,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isasyncclassprovider(asyncstaticprovider",{"_index":215,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{}}}],["isasyncfactoryprovider",{"_index":50,"title":{},"body":{"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isasyncfactoryprovider(asyncstaticprovider",{"_index":482,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isasyncvalueprovider",{"_index":76,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isasyncvalueprovider(asyncstaticprovider",{"_index":213,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{}}}],["isinjectiontokencollection",{"_index":245,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isinjectiontokencollection(injectiontokens",{"_index":177,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{}}}],["ismulti",{"_index":139,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["ismultiprovider",{"_index":73,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["ismultiprovider(asyncstaticprovider",{"_index":140,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{}}}],["item",{"_index":20,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{}}}],["item.ts",{"_index":748,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["itself",{"_index":541,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["jscutlery/semver",{"_index":375,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":99,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{}}}],["keywords",{"_index":732,"title":{},"body":{"properties.html":{}}}],["known",{"_index":620,"title":{},"body":{"index.html":{}}}],["later",{"_index":651,"title":{},"body":{"index.html":{}}}],["lazy",{"_index":269,"title":{},"body":{"interfaces/AsyncProviderConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["library",{"_index":660,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license",{"_index":738,"title":{},"body":{"properties.html":{}}}],["line",{"_index":207,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/InjectionContext.html":{}}}],["list",{"_index":578,"title":{},"body":{"miscellaneous/functions.html":{}}}],["literal",{"_index":266,"title":{},"body":{"injectables/AsyncInjector.html":{}}}],["live",{"_index":684,"title":{},"body":{"index.html":{}}}],["load",{"_index":303,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["loadcomponent",{"_index":585,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["loaded",{"_index":616,"title":{},"body":{"index.html":{}}}],["loading",{"_index":297,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["loads",{"_index":573,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["made",{"_index":669,"title":{},"body":{"index.html":{}}}],["main",{"_index":438,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["main.ts",{"_index":665,"title":{},"body":{"index.html":{}}}],["major",{"_index":404,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":603,"title":{},"body":{"index.html":{}}}],["makeasyncinjectablerecord(asyncstaticprovider",{"_index":197,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["many",{"_index":640,"title":{},"body":{"index.html":{}}}],["many.ts",{"_index":455,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["map",{"_index":98,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["matching",{"_index":40,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"interfaces/InjectionContext.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"interfaces/TypeWithoutConstructorParams.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":528,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["memo",{"_index":430,"title":{},"body":{"changelog.html":{}}}],["metadata",{"_index":329,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["methods",{"_index":248,"title":{},"body":{"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{}}}],["miscellaneous",{"_index":476,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":739,"title":{},"body":{"properties.html":{}}}],["mixing",{"_index":143,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["mode",{"_index":136,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncProviderConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["modules",{"_index":489,"title":{"modules.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{},"modules.html":{}}}],["monorepo",{"_index":403,"title":{},"body":{"changelog.html":{}}}],["more",{"_index":485,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["motivation",{"_index":589,"title":{},"body":{"index.html":{}}}],["much",{"_index":298,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["multi",{"_index":23,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["multiple",{"_index":491,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["my_service",{"_index":498,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["myservice",{"_index":667,"title":{},"body":{"index.html":{}}}],["name",{"_index":253,"title":{},"body":{"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":492,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["needed",{"_index":538,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["needing",{"_index":631,"title":{},"body":{"index.html":{}}}],["needs",{"_index":615,"title":{},"body":{"index.html":{}}}],["new",{"_index":97,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/TypeWithoutConstructorParams.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":206,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/InjectionContext.html":{}}}],["ng",{"_index":330,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["ngondestroy",{"_index":106,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{}}}],["ngoninit",{"_index":355,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["ngtemplatecontextguard",{"_index":332,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["ngtemplatecontextguard(_",{"_index":336,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["ngx",{"_index":429,"title":{},"body":{"changelog.html":{}}}],["ngxresolveasyncproviders",{"_index":127,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["npm",{"_index":726,"title":{},"body":{"index.html":{}}}],["null",{"_index":38,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"directives/ResolveAsyncProvidersDirective.html":{}}}],["nx",{"_index":386,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["object.entries(injectiontokens).map(([key",{"_index":187,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["offers",{"_index":661,"title":{},"body":{"index.html":{}}}],["once",{"_index":693,"title":{},"body":{"index.html":{}}}],["ondestroy",{"_index":69,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{}}}],["one",{"_index":175,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["oninit",{"_index":328,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["online",{"_index":682,"title":{},"body":{"index.html":{}}}],["option",{"_index":613,"title":{},"body":{"index.html":{}}}],["optional",{"_index":92,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncProviderConfig.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":209,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["others",{"_index":642,"title":{},"body":{"index.html":{}}}],["overview",{"_index":727,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":414,"title":{"dependencies.html":{},"properties.html":{}},"body":{"changelog.html":{}}}],["pairs",{"_index":579,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":252,"title":{},"body":{"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["params",{"_index":31,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{}}}],["params.ts",{"_index":369,"title":{},"body":{"interfaces/TypeWithoutConstructorParams.html":{},"coverage.html":{}}}],["parent",{"_index":691,"title":{},"body":{"index.html":{}}}],["parentasyncinjector",{"_index":90,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["parentcomponent",{"_index":314,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["particular",{"_index":658,"title":{},"body":{"index.html":{}}}],["passed",{"_index":302,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["path",{"_index":583,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["payload",{"_index":628,"title":{},"body":{"index.html":{}}}],["peer",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["pendinginjectables",{"_index":191,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["piece",{"_index":676,"title":{},"body":{"index.html":{}}}],["places",{"_index":574,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["playground",{"_index":432,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["point",{"_index":440,"title":{},"body":{"changelog.html":{}}}],["possible",{"_index":299,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["preserved",{"_index":545,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["private",{"_index":86,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["problem",{"_index":549,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["processdependency",{"_index":221,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["production",{"_index":717,"title":{},"body":{"index.html":{}}}],["promise",{"_index":34,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["promise&lt;string&gt",{"_index":562,"title":{},"body":{"miscellaneous/functions.html":{}}}],["promise.all",{"_index":181,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["promise.all(injectable.map((record",{"_index":166,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["promise.all(pendinginjectables.map((injectable",{"_index":195,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["promise.reject(`${injectable.injectiontoken.tostring",{"_index":244,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["promise.reject(`${injectiontoken.tostring",{"_index":165,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["promise.reject(`provide",{"_index":174,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["promise.reject(error",{"_index":243,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["promise.resolve(&#39;value&#39",{"_index":520,"title":{},"body":{"miscellaneous/functions.html":{}}}],["promise.resolve('value",{"_index":711,"title":{},"body":{"index.html":{}}}],["properties",{"_index":12,"title":{"properties.html":{}},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"interfaces/InjectionContext.html":{},"properties.html":{}}}],["protect",{"_index":550,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["protected",{"_index":719,"title":{},"body":{"index.html":{}}}],["provide",{"_index":135,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncProviderConfig.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["provideasync",{"_index":306,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["provideasync(...asyncstaticproviders",{"_index":570,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provideasync(asyncstaticprovider",{"_index":483,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provideasync(asyncstaticproviders",{"_index":568,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provided",{"_index":119,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"index.html":{}}}],["providedin",{"_index":639,"title":{},"body":{"index.html":{}}}],["providehttpclient",{"_index":698,"title":{},"body":{"index.html":{}}}],["provider",{"_index":24,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["provider.ts",{"_index":8,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["providerfactory",{"_index":519,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["providers",{"_index":121,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["providers.directive.ts",{"_index":289,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["providers.directive.ts:103",{"_index":337,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["providers.directive.ts:99",{"_index":335,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["providersvaluemap",{"_index":364,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["providertoken",{"_index":70,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["provides",{"_index":731,"title":{},"body":{"properties.html":{}}}],["readme",{"_index":433,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":89,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["ready",{"_index":718,"title":{},"body":{"index.html":{}}}],["recommended",{"_index":614,"title":{},"body":{"index.html":{}}}],["records",{"_index":96,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["regular",{"_index":542,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["release",{"_index":445,"title":{},"body":{"changelog.html":{}}}],["render",{"_index":292,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["rendered",{"_index":695,"title":{},"body":{"index.html":{}}}],["renderer",{"_index":607,"title":{},"body":{"index.html":{}}}],["rendering",{"_index":604,"title":{},"body":{"index.html":{}}}],["renders",{"_index":692,"title":{},"body":{"index.html":{}}}],["rendertemplate(providersvaluemap",{"_index":363,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["repository",{"_index":740,"title":{},"body":{"properties.html":{}}}],["requested",{"_index":530,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["requires",{"_index":487,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["rescope",{"_index":415,"title":{},"body":{"changelog.html":{}}}],["resolution",{"_index":161,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["resolve",{"_index":128,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/InjectionContext.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["resolve(first_injection_token",{"_index":564,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["resolve(injectiontoken",{"_index":163,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["resolveall",{"_index":190,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["resolveasyncproviderscontext",{"_index":339,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/typealiases.html":{}}}],["resolveasyncprovidersdirective",{"_index":286,"title":{"directives/ResolveAsyncProvidersDirective.html":{}},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"coverage.html":{},"index.html":{}}}],["resolved",{"_index":61,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncProviderConfig.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["resolvedvalue",{"_index":56,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["resolvemany",{"_index":169,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["resolvemany(...injectiontokens",{"_index":264,"title":{},"body":{"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{}}}],["resolvemany(class_provider",{"_index":588,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["resolvemany(injectiontokens",{"_index":262,"title":{},"body":{"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{}}}],["resolvemany(my_service",{"_index":688,"title":{},"body":{"index.html":{}}}],["resolvemany(this.providers",{"_index":360,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["resolvemanyfromcollection",{"_index":180,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["resolvemanyfrommap",{"_index":183,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["resolver",{"_index":593,"title":{},"body":{"index.html":{}}}],["resolvers",{"_index":536,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["resolves",{"_index":575,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["resolving",{"_index":60,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncProviderConfig.html":{}}}],["responsibility",{"_index":679,"title":{},"body":{"index.html":{}}}],["result",{"_index":202,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["results",{"_index":39,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"interfaces/InjectionContext.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"interfaces/TypeWithoutConstructorParams.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":36,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":254,"title":{},"body":{"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["root",{"_index":632,"title":{},"body":{"index.html":{}}}],["route",{"_index":571,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["route's",{"_index":592,"title":{},"body":{"index.html":{}}}],["routes",{"_index":582,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["runincontext",{"_index":200,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["runininjectioncontext",{"_index":71,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["runininjectioncontext(envinjector",{"_index":203,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["safely",{"_index":300,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["same",{"_index":124,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["samuelfernandez",{"_index":744,"title":{},"body":{"properties.html":{}}}],["scenarios",{"_index":641,"title":{},"body":{"index.html":{}}}],["secondstring",{"_index":565,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["see",{"_index":705,"title":{},"body":{"index.html":{}}}],["selector",{"_index":315,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["self",{"_index":557,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["semantic",{"_index":723,"title":{},"body":{"index.html":{}}}],["server",{"_index":650,"title":{},"body":{"index.html":{}}}],["service",{"_index":653,"title":{},"body":{"index.html":{}}}],["service&#39;).then((x",{"_index":501,"title":{},"body":{"miscellaneous/functions.html":{}}}],["service').then((x",{"_index":671,"title":{},"body":{"index.html":{}}}],["service.ts",{"_index":514,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["services",{"_index":638,"title":{},"body":{"index.html":{}}}],["several",{"_index":619,"title":{},"body":{"index.html":{}}}],["shape",{"_index":581,"title":{},"body":{"miscellaneous/functions.html":{}}}],["show",{"_index":590,"title":{},"body":{"index.html":{}}}],["similar",{"_index":663,"title":{},"body":{"index.html":{}}}],["single",{"_index":494,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["size",{"_index":636,"title":{},"body":{"index.html":{}}}],["skipself",{"_index":94,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["solve",{"_index":548,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["solves",{"_index":659,"title":{},"body":{"index.html":{}}}],["soon",{"_index":271,"title":{},"body":{"interfaces/AsyncProviderConfig.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"interfaces/InjectionContext.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"interfaces/TypeWithoutConstructorParams.html":{}}}],["splitting",{"_index":644,"title":{},"body":{"index.html":{}}}],["squeezer/ngx",{"_index":560,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["squeezer/squeezer.git",{"_index":742,"title":{},"body":{"properties.html":{}}}],["squeezer/squeezer/issues",{"_index":737,"title":{},"body":{"properties.html":{}}}],["squeezer/squeezer/tree/main/packages/ngx",{"_index":735,"title":{},"body":{"properties.html":{}}}],["src/.../array",{"_index":747,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../async",{"_index":478,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../injection",{"_index":751,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../is",{"_index":479,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../provide",{"_index":480,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../resolve",{"_index":481,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../resolve.ts",{"_index":755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/directives/resolve",{"_index":288,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/functions/is",{"_index":452,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/functions/resolve",{"_index":454,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/functions/resolve.ts",{"_index":458,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/injector/async",{"_index":53,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/interfaces/array",{"_index":753,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/interfaces/async",{"_index":6,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncMultiProvider.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/interfaces/injection",{"_index":281,"title":{},"body":{"interfaces/InjectionContext.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/interfaces/type",{"_index":368,"title":{},"body":{"interfaces/TypeWithoutConstructorParams.html":{},"coverage.html":{}}}],["src/lib/providers/provide",{"_index":465,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/tokens/async",{"_index":467,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stackblitz",{"_index":683,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":311,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["start",{"_index":270,"title":{},"body":{"interfaces/AsyncProviderConfig.html":{}}}],["started",{"_index":371,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["statements",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":27,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/typealiases.html":{}}}],["staticprovider",{"_index":567,"title":{},"body":{"miscellaneous/functions.html":{}}}],["status",{"_index":57,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["still",{"_index":537,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["string",{"_index":171,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["string_injector_token",{"_index":307,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["stringasyncfactory",{"_index":308,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["stringifieddependencychain",{"_index":233,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["stringinjectiontoken",{"_index":325,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["structural",{"_index":323,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["such",{"_index":643,"title":{},"body":{"index.html":{}}}],["supports",{"_index":320,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["synchronous",{"_index":600,"title":{},"body":{"index.html":{}}}],["system",{"_index":598,"title":{},"body":{"index.html":{}}}],["t",{"_index":48,"title":{},"body":{"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"interfaces/TypeWithoutConstructorParams.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":470,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":469,"title":{},"body":{"coverage.html":{}}}],["tada",{"_index":444,"title":{},"body":{"changelog.html":{}}}],["template",{"_index":293,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["template[ngxresolveasyncproviders",{"_index":331,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["templateref",{"_index":341,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["tests",{"_index":721,"title":{},"body":{"index.html":{}}}],["that's",{"_index":672,"title":{},"body":{"index.html":{}}}],["then((providersvaluemap",{"_index":361,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["then((resolvedvalue",{"_index":240,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.assertinitialized",{"_index":149,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.assertnotdestroyed",{"_index":131,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.assertnotinitialized",{"_index":132,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.asyncinjector",{"_index":359,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["this.asyncinjector.resolveall().then",{"_index":357,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["this.cdr.markforcheck",{"_index":367,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["this.dependencymap.clear",{"_index":109,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.dependencymap.get(dependantinjectiontoken",{"_index":226,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.dependencymap.get(dependsoninjectiontoken",{"_index":230,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.dependencymap.set(dependantinjectiontoken",{"_index":228,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.destroyed",{"_index":107,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{}}}],["this.getsingleprovider(injectable",{"_index":155,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.getsingleprovider(record",{"_index":154,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.initialized",{"_index":115,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.injector",{"_index":117,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.makeasyncinjectablerecord(asyncstaticprovider",{"_index":145,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.parentasyncinjector",{"_index":150,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.parentasyncinjector.get(injectiontoken",{"_index":151,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.parentasyncinjector.resolve(injectiontoken",{"_index":164,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.parentasyncinjector?.resolveall",{"_index":196,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.processdependency(asyncstaticprovider.provide",{"_index":212,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.providers",{"_index":356,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["this.records.clear",{"_index":108,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.records.get(injectiontoken",{"_index":138,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.records.set(injectiontoken",{"_index":144,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.records.values",{"_index":192,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.rendertemplate",{"_index":358,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["this.rendertemplate(providersvaluemap",{"_index":362,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["this.resolve(injectiontoken",{"_index":147,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.resolve(injectiontoken).then((value",{"_index":188,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.resolvemanyfromcollection(injectiontokens",{"_index":178,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.resolvemanyfrommap(injectiontokens[0",{"_index":179,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["this.viewcontainerref.createembeddedview(this.templateref",{"_index":365,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["those",{"_index":301,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["though",{"_index":535,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["through",{"_index":612,"title":{},"body":{"index.html":{}}}],["throw",{"_index":111,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["times",{"_index":495,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["today",{"_index":608,"title":{},"body":{"index.html":{}}}],["token",{"_index":81,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncProviderConfig.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["token.tostring()).join",{"_index":235,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["tokens",{"_index":101,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["tokens/async",{"_index":344,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["tproviders",{"_index":334,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["tree",{"_index":625,"title":{},"body":{"index.html":{}}}],["trigger",{"_index":532,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["triggers",{"_index":677,"title":{},"body":{"index.html":{}}}],["true",{"_index":93,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncMultiProvider.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["ts",{"_index":347,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["tslib",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":556,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["type",{"_index":15,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncProviderConfig.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["type.ts",{"_index":752,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":745,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":706,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":284,"title":{},"body":{"interfaces/InjectionContext.html":{}}}],["types.ts",{"_index":749,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typewithoutconstructorparams",{"_index":28,"title":{"interfaces/TypeWithoutConstructorParams.html":{}},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/TypeWithoutConstructorParams.html":{},"coverage.html":{}}}],["undefined",{"_index":225,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{}}}],["unknown",{"_index":185,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"directives/ResolveAsyncProvidersDirective.html":{}}}],["until",{"_index":276,"title":{},"body":{"interfaces/AsyncProviderConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["update",{"_index":402,"title":{},"body":{"changelog.html":{}}}],["upgrade",{"_index":385,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":125,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["useasyncclass",{"_index":13,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["useasyncfactory",{"_index":43,"title":{},"body":{"interfaces/AsyncFactoryMultiProvider.html":{},"interfaces/AsyncFactoryProvider.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["useasyncvalue",{"_index":278,"title":{},"body":{"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["useclass",{"_index":666,"title":{},"body":{"index.html":{}}}],["used",{"_index":291,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":699,"title":{},"body":{"index.html":{}}}],["useful",{"_index":295,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{},"index.html":{}}}],["uses",{"_index":722,"title":{},"body":{"index.html":{}}}],["using",{"_index":374,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["usually",{"_index":634,"title":{},"body":{"index.html":{}}}],["utils/calculate",{"_index":83,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["v17",{"_index":397,"title":{},"body":{"changelog.html":{}}}],["v17.2.0",{"_index":387,"title":{},"body":{"changelog.html":{}}}],["value",{"_index":77,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{},"interfaces/AsyncValueMultiProvider.html":{},"interfaces/AsyncValueProvider.html":{},"directives/ResolveAsyncProvidersDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["value&#39;).then((x",{"_index":522,"title":{},"body":{"miscellaneous/functions.html":{}}}],["value').then((x",{"_index":712,"title":{},"body":{"index.html":{}}}],["value.ts",{"_index":516,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["value_provider",{"_index":507,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["valuepromise",{"_index":58,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["values",{"_index":184,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["values[key",{"_index":189,"title":{},"body":{"interfaces/AsyncInjectableRecord.html":{},"injectables/AsyncInjector.html":{}}}],["variable",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":754,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":633,"title":{},"body":{"index.html":{}}}],["version",{"_index":730,"title":{},"body":{"properties.html":{}}}],["versioning",{"_index":724,"title":{},"body":{"index.html":{}}}],["very",{"_index":662,"title":{},"body":{"index.html":{}}}],["viewcontainerref",{"_index":342,"title":{},"body":{"directives/ResolveAsyncProvidersDirective.html":{}}}],["void",{"_index":258,"title":{},"body":{"injectables/AsyncInjector.html":{}}}],["wait",{"_index":275,"title":{},"body":{"interfaces/AsyncProviderConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["way",{"_index":649,"title":{},"body":{"index.html":{}}}],["well",{"_index":488,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["whole",{"_index":624,"title":{},"body":{"index.html":{}}}],["widen",{"_index":436,"title":{},"body":{"changelog.html":{}}}],["without",{"_index":29,"title":{},"body":{"interfaces/AsyncClassMultiProvider.html":{},"interfaces/AsyncClassProvider.html":{},"interfaces/TypeWithoutConstructorParams.html":{},"coverage.html":{},"index.html":{}}}],["won&#39;t",{"_index":529,"title":{},"body":{"miscellaneous/functions.html":{}}}],["won't",{"_index":714,"title":{},"body":{"index.html":{}}}],["x.firstservice",{"_index":506,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["x.myservice",{"_index":502,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["x.providerfactory",{"_index":512,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["x.value",{"_index":509,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AsyncClassMultiProvider.html":{"url":"interfaces/AsyncClassMultiProvider.html","title":"interface - AsyncClassMultiProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AsyncClassMultiProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/interfaces/async-class-provider.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AsyncProviderConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            useAsyncClass\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        useAsyncClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useAsyncClass:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ArrayItemType } from './array-item';\nimport { AsyncMultiProvider } from './async-multi-provider';\nimport { AsyncProviderConfig } from './async-provider-config';\nimport { AsyncStaticProvider } from './async-static-provider';\nimport { TypeWithoutConstructorParams } from './type-without-constructor-params';\n\nexport interface AsyncClassProvider extends AsyncProviderConfig {\n  useAsyncClass: () => Promise>;\n}\n\nexport interface AsyncClassMultiProvider extends AsyncProviderConfig, AsyncMultiProvider {\n  useAsyncClass: () => Promise>>;\n}\n\nexport function isAsyncClassProvider(\n  asyncStaticProvider: AsyncStaticProvider\n): asyncStaticProvider is AsyncClassProvider | AsyncClassMultiProvider {\n  return (asyncStaticProvider as any).useAsyncClass != null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AsyncClassProvider.html":{"url":"interfaces/AsyncClassProvider.html","title":"interface - AsyncClassProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AsyncClassProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/interfaces/async-class-provider.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AsyncProviderConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            useAsyncClass\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        useAsyncClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useAsyncClass:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ArrayItemType } from './array-item';\nimport { AsyncMultiProvider } from './async-multi-provider';\nimport { AsyncProviderConfig } from './async-provider-config';\nimport { AsyncStaticProvider } from './async-static-provider';\nimport { TypeWithoutConstructorParams } from './type-without-constructor-params';\n\nexport interface AsyncClassProvider extends AsyncProviderConfig {\n  useAsyncClass: () => Promise>;\n}\n\nexport interface AsyncClassMultiProvider extends AsyncProviderConfig, AsyncMultiProvider {\n  useAsyncClass: () => Promise>>;\n}\n\nexport function isAsyncClassProvider(\n  asyncStaticProvider: AsyncStaticProvider\n): asyncStaticProvider is AsyncClassProvider | AsyncClassMultiProvider {\n  return (asyncStaticProvider as any).useAsyncClass != null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AsyncFactoryMultiProvider.html":{"url":"interfaces/AsyncFactoryMultiProvider.html","title":"interface - AsyncFactoryMultiProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AsyncFactoryMultiProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/interfaces/async-factory-provider.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AsyncProviderConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            useAsyncFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        useAsyncFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useAsyncFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ArrayItemType } from './array-item';\nimport { AsyncMultiProvider } from './async-multi-provider';\nimport { AsyncProviderConfig } from './async-provider-config';\nimport { AsyncStaticProvider } from './async-static-provider';\nimport { InjectionContext } from './injection-context';\n\nexport type AsyncFactoryWithInjectionContext = (injectionContext: InjectionContext) => T;\n\nexport interface AsyncFactoryProvider extends AsyncProviderConfig {\n  useAsyncFactory: () => Promise>;\n}\n\nexport interface AsyncFactoryMultiProvider extends AsyncProviderConfig, AsyncMultiProvider {\n  useAsyncFactory: () => Promise>>;\n}\n\nexport function isAsyncFactoryProvider(\n  asyncStaticProvider: AsyncStaticProvider\n): asyncStaticProvider is AsyncFactoryProvider | AsyncFactoryMultiProvider {\n  return (asyncStaticProvider as any).useAsyncFactory != null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AsyncFactoryProvider.html":{"url":"interfaces/AsyncFactoryProvider.html","title":"interface - AsyncFactoryProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AsyncFactoryProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/interfaces/async-factory-provider.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AsyncProviderConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            useAsyncFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        useAsyncFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useAsyncFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ArrayItemType } from './array-item';\nimport { AsyncMultiProvider } from './async-multi-provider';\nimport { AsyncProviderConfig } from './async-provider-config';\nimport { AsyncStaticProvider } from './async-static-provider';\nimport { InjectionContext } from './injection-context';\n\nexport type AsyncFactoryWithInjectionContext = (injectionContext: InjectionContext) => T;\n\nexport interface AsyncFactoryProvider extends AsyncProviderConfig {\n  useAsyncFactory: () => Promise>;\n}\n\nexport interface AsyncFactoryMultiProvider extends AsyncProviderConfig, AsyncMultiProvider {\n  useAsyncFactory: () => Promise>>;\n}\n\nexport function isAsyncFactoryProvider(\n  asyncStaticProvider: AsyncStaticProvider\n): asyncStaticProvider is AsyncFactoryProvider | AsyncFactoryMultiProvider {\n  return (asyncStaticProvider as any).useAsyncFactory != null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AsyncInjectableRecord.html":{"url":"interfaces/AsyncInjectableRecord.html","title":"interface - AsyncInjectableRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AsyncInjectableRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/injector/async-injector.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            injectionToken\n                                        \n                                \n                                \n                                        \n                                            promise\n                                        \n                                \n                                \n                                        \n                                            resolvedValue\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            valuePromise\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        injectionToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        injectionToken:     InjectionToken\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     InjectionToken\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        promise\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        promise:     Promise | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Promise | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resolvedValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        resolvedValue:     T | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         \"initial\" | \"resolving\" | \"resolved\" | \"error\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         \"initial\" | \"resolving\" | \"resolved\" | \"error\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valuePromise\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        valuePromise:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  EnvironmentInjector,\n  inject,\n  Injectable,\n  InjectFlags,\n  InjectionToken,\n  InjectOptions,\n  Injector,\n  OnDestroy,\n  ProviderToken,\n  runInInjectionContext,\n} from '@angular/core';\n\nimport { isMultiProvider } from '../functions/is-multi-provider';\nimport { isAsyncClassProvider } from '../interfaces/async-class-provider';\nimport { AsyncStaticProvider } from '../interfaces/async-static-provider';\nimport { isAsyncValueProvider } from '../interfaces/async-value-provider';\nimport { InjectionContext } from '../interfaces/injection-context';\nimport { InjectionTokenTypeCollection, InjectionTokenTypeMap } from '../interfaces/injection-token-type';\nimport { calculateCircularDependencyChain } from '../utils/calculate-circular-dependencies.function';\n\ninterface AsyncInjectableRecord {\n  injectionToken: InjectionToken;\n  valuePromise: () => Promise;\n  status: 'initial' | 'resolving' | 'resolved' | 'error';\n  promise: Promise | null;\n  resolvedValue: T | null;\n}\n\n/**\n * @private\n */\n@Injectable()\nexport class AsyncInjector implements OnDestroy {\n  private readonly parentAsyncInjector = inject(AsyncInjector, { optional: true, skipSelf: true });\n  private readonly injector = inject(Injector);\n\n  private readonly records = new Map, AsyncInjectableRecord | AsyncInjectableRecord[]>();\n\n  // The key is the injection token, which depends on the injection tokens in the value\n  private readonly dependencyMap = new Map, InjectionToken[]>();\n\n  private destroyed = false;\n  private initialized = false;\n\n  ngOnDestroy() {\n    this.destroyed = true;\n    this.records.clear();\n    this.dependencyMap.clear();\n  }\n\n  private assertNotDestroyed() {\n    if (this.destroyed) {\n      throw new Error(`Async injection token already destroyed.`);\n    }\n  }\n\n  private assertNotInitialized() {\n    if (this.initialized) {\n      throw new Error(`Async injection token already initialized.`);\n    }\n  }\n\n  private assertInitialized() {\n    if (this.initialized) {\n      return;\n    }\n\n    if (this.injector instanceof EnvironmentInjector) {\n      throw new Error(`Async injection not yet initialized.`);\n    } else {\n      throw new Error(\n        `Async injector provided in a component, providers can't be injected in the same injector. ` +\n          `Use directive *ngxResolveAsyncProviders to resolve them before injection.`\n      );\n    }\n  }\n\n  init(...asyncStaticProviders: AsyncStaticProvider[]) {\n    this.assertNotDestroyed();\n    this.assertNotInitialized();\n    this.initialized = true;\n\n    asyncStaticProviders.forEach((asyncStaticProvider: AsyncStaticProvider) => {\n      const { provide: injectionToken, mode } = asyncStaticProvider;\n      const existingProvider = this.records.get(injectionToken);\n      const isMulti = isMultiProvider(asyncStaticProvider);\n\n      if (existingProvider != null) {\n        if ((isMulti && !Array.isArray(existingProvider)) || (!isMulti && Array.isArray(existingProvider))) {\n          throw new Error(`${injectionToken.toString()} mixing providers.`);\n        } else if (!isMulti) {\n          throw new Error(`${injectionToken.toString()} already provided.`);\n        }\n      }\n\n      if (existingProvider == null && isMulti) {\n        this.records.set(injectionToken, [this.makeAsyncInjectableRecord(asyncStaticProvider)]);\n      } else if (Array.isArray(existingProvider)) {\n        this.records.set(injectionToken, [...existingProvider, this.makeAsyncInjectableRecord(asyncStaticProvider)]);\n      } else {\n        this.records.set(injectionToken, this.makeAsyncInjectableRecord(asyncStaticProvider));\n      }\n\n      if (mode === 'eager') {\n        this.resolve(injectionToken);\n      }\n    });\n  }\n\n  get(injectionToken: InjectionToken): T {\n    this.assertNotDestroyed();\n    this.assertInitialized();\n\n    const injectable = this.records.get(injectionToken);\n\n    if (injectable == null) {\n      if (this.parentAsyncInjector != null) {\n        return this.parentAsyncInjector.get(injectionToken);\n      }\n\n      throw new Error(`${injectionToken.toString()} not provided.`);\n    }\n\n    if (Array.isArray(injectable)) {\n      return injectable.map((record) => this.getSingleProvider(record)) as T;\n    } else {\n      return this.getSingleProvider(injectable);\n    }\n  }\n\n  private getSingleProvider(injectableRecord: AsyncInjectableRecord): T {\n    if (injectableRecord.status === 'error') {\n      throw new Error(`${injectableRecord.injectionToken.toString()} failed during its resolution.`);\n    }\n\n    if (injectableRecord.status !== 'resolved') {\n      throw new Error(`${injectableRecord.injectionToken.toString()} not yet resolved.`);\n    }\n\n    return injectableRecord.resolvedValue as T;\n  }\n\n  resolve(injectionToken: InjectionToken): Promise {\n    this.assertNotDestroyed();\n    this.assertInitialized();\n\n    const injectable = this.records.get(injectionToken);\n\n    if (injectable == null) {\n      if (this.parentAsyncInjector != null) {\n        return this.parentAsyncInjector.resolve(injectionToken);\n      }\n      return Promise.reject(`${injectionToken.toString()} not provided.`);\n    }\n\n    if (Array.isArray(injectable)) {\n      return Promise.all(injectable.map((record) => hydrate(record))) as Promise;\n    } else {\n      return hydrate(injectable);\n    }\n  }\n\n  resolveMany }>(\n    injectionTokens: T\n  ): Promise>;\n  resolveMany[]>(\n    ...injectionTokens: T\n  ): Promise>;\n  resolveMany(\n    ...injectionTokens: (InjectionToken | { [key: string]: InjectionToken })[]\n  ): Promise {\n    this.assertNotDestroyed();\n    this.assertInitialized();\n\n    if (injectionTokens.length === 0) {\n      return Promise.reject(`Provide at least one injection token to be resolved when calling resolveMany().`);\n    }\n\n    if (isInjectionTokenCollection(injectionTokens)) {\n      return this.resolveManyFromCollection(injectionTokens);\n    } else {\n      return this.resolveManyFromMap(injectionTokens[0] as { [key: string]: InjectionToken });\n    }\n  }\n\n  private resolveManyFromCollection[]>(\n    injectionTokens: T\n  ): Promise> {\n    return Promise.all(\n      injectionTokens.map((injectionToken: InjectionToken): Promise => this.resolve(injectionToken))\n    ) as Promise>;\n  }\n\n  private async resolveManyFromMap }>(\n    injectionTokens: T\n  ): Promise> {\n    const values: { [key: string]: unknown } = {};\n\n    await Promise.all(\n      Object.entries(injectionTokens).map(([key, injectionToken]) =>\n        this.resolve(injectionToken).then((value) => {\n          values[key] = value;\n        })\n      )\n    );\n\n    return values as InjectionTokenTypeMap;\n  }\n\n  async resolveAll(): Promise {\n    this.assertNotDestroyed();\n    this.assertInitialized();\n\n    const pendingInjectables: AsyncInjectableRecord[] = [...this.records.values()]\n      .flat()\n      .filter(({ status }) => status !== 'resolved');\n    await Promise.all(pendingInjectables.map((injectable) => hydrate(injectable)));\n    await this.parentAsyncInjector?.resolveAll();\n  }\n\n  private makeAsyncInjectableRecord(asyncStaticProvider: AsyncStaticProvider): AsyncInjectableRecord {\n    const envInjector = inject(EnvironmentInjector);\n    const runInContext = (fn: () => unknown) => {\n      let result: unknown;\n      runInInjectionContext(envInjector, () => (result = fn()));\n      return result;\n    };\n\n    const injectionContext: InjectionContext = {\n      // eslint-disable-next-line deprecation/deprecation\n      inject: (token: ProviderToken, options: InjectOptions | InjectFlags = InjectFlags.Default): T | null =>\n        // eslint-disable-next-line deprecation/deprecation\n        runInContext(() => inject(token, options as any)) as T,\n      resolve: (injectionToken: InjectionToken) => {\n        this.processDependency(asyncStaticProvider.provide, injectionToken);\n        return this.resolve(injectionToken);\n      },\n    };\n\n    let valuePromise: () => Promise;\n\n    if (isAsyncValueProvider(asyncStaticProvider)) {\n      valuePromise = () => asyncStaticProvider.useAsyncValue();\n    } else if (isAsyncClassProvider(asyncStaticProvider)) {\n      valuePromise = () => asyncStaticProvider.useAsyncClass().then((classType) => runInContext(() => new classType()));\n    } else {\n      valuePromise = () =>\n        asyncStaticProvider.useAsyncFactory().then((factory) => runInContext(() => factory(injectionContext)));\n    }\n\n    return {\n      injectionToken: asyncStaticProvider.provide,\n      valuePromise,\n      status: 'initial',\n      promise: null,\n      resolvedValue: null,\n    };\n  }\n\n  private processDependency(\n    dependantInjectionToken: InjectionToken,\n    dependsOnInjectionToken: InjectionToken\n  ) {\n    const dependsOn: InjectionToken[] | undefined = this.dependencyMap.get(dependantInjectionToken) ?? [];\n    dependsOn.push(dependsOnInjectionToken);\n    this.dependencyMap.set(dependantInjectionToken, dependsOn);\n\n    const cyclicDependencies = this.dependencyMap.get(dependsOnInjectionToken);\n    if (cyclicDependencies == null) {\n      return;\n    }\n\n    const dependencyChain = calculateCircularDependencyChain(this.dependencyMap, [\n      dependsOnInjectionToken,\n    ]) as InjectionToken[];\n\n    const stringifiedDependencyChain = dependencyChain.map((token) => token.toString()).join(' -> ');\n    throw new Error(`Cyclic dependency on async providers: ${stringifiedDependencyChain}`);\n  }\n}\n\nfunction hydrate(injectable: AsyncInjectableRecord): Promise {\n  if (injectable.promise) {\n    return injectable.promise;\n  }\n\n  injectable.status = 'resolving';\n\n  const promise = injectable\n    .valuePromise()\n    .then((resolvedValue) => {\n      injectable.status = 'resolved';\n      injectable.resolvedValue = resolvedValue;\n      return resolvedValue;\n    })\n    .catch((error) => {\n      injectable.status = 'error';\n\n      return error instanceof Error\n        ? Promise.reject(error)\n        : Promise.reject(`${injectable.injectionToken.toString()} failed resolution: ${error}`);\n    });\n\n  injectable.promise = promise;\n\n  return promise;\n}\n\nfunction isInjectionTokenCollection(\n  injectionTokens: (InjectionToken | { [key: string]: InjectionToken })[]\n): injectionTokens is InjectionToken[] {\n  return injectionTokens.every((injectionToken) => injectionToken instanceof InjectionToken);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AsyncInjector.html":{"url":"injectables/AsyncInjector.html","title":"injectable - AsyncInjector","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AsyncInjector\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/injector/async-injector.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                init\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                resolve\n                            \n                            \n                                    Async\n                                resolveAll\n                            \n                            \n                                resolveMany\n                            \n                            \n                                resolveMany\n                            \n                            \n                                resolveMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(injectionToken: InjectionToken)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/injector/async-injector.ts:111\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    injectionToken\n                                    \n                                            InjectionToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit(asyncStaticProviders: AsyncStaticProvider<>[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/injector/async-injector.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    asyncStaticProviders\n                                    \n                                                AsyncStaticProvider<>[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/injector/async-injector.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(injectionToken: InjectionToken)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/injector/async-injector.ts:144\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    injectionToken\n                                    \n                                            InjectionToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resolveAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    resolveAll()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/injector/async-injector.ts:211\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolveMany\n                        \n                    \n                \n            \n            \n                \nresolveMany(injectionTokens: T)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/injector/async-injector.ts:164\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    injectionTokens\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolveMany\n                        \n                    \n                \n            \n            \n                \nresolveMany(...injectionTokens: T)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/injector/async-injector.ts:167\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    injectionTokens\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolveMany\n                        \n                    \n                \n            \n            \n                \nresolveMany(...injectionTokens: (InjectionToken<> | literal type)[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/injector/async-injector.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    injectionTokens\n                                    \n                                            (InjectionToken<> | literal type)[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  EnvironmentInjector,\n  inject,\n  Injectable,\n  InjectFlags,\n  InjectionToken,\n  InjectOptions,\n  Injector,\n  OnDestroy,\n  ProviderToken,\n  runInInjectionContext,\n} from '@angular/core';\n\nimport { isMultiProvider } from '../functions/is-multi-provider';\nimport { isAsyncClassProvider } from '../interfaces/async-class-provider';\nimport { AsyncStaticProvider } from '../interfaces/async-static-provider';\nimport { isAsyncValueProvider } from '../interfaces/async-value-provider';\nimport { InjectionContext } from '../interfaces/injection-context';\nimport { InjectionTokenTypeCollection, InjectionTokenTypeMap } from '../interfaces/injection-token-type';\nimport { calculateCircularDependencyChain } from '../utils/calculate-circular-dependencies.function';\n\ninterface AsyncInjectableRecord {\n  injectionToken: InjectionToken;\n  valuePromise: () => Promise;\n  status: 'initial' | 'resolving' | 'resolved' | 'error';\n  promise: Promise | null;\n  resolvedValue: T | null;\n}\n\n/**\n * @private\n */\n@Injectable()\nexport class AsyncInjector implements OnDestroy {\n  private readonly parentAsyncInjector = inject(AsyncInjector, { optional: true, skipSelf: true });\n  private readonly injector = inject(Injector);\n\n  private readonly records = new Map, AsyncInjectableRecord | AsyncInjectableRecord[]>();\n\n  // The key is the injection token, which depends on the injection tokens in the value\n  private readonly dependencyMap = new Map, InjectionToken[]>();\n\n  private destroyed = false;\n  private initialized = false;\n\n  ngOnDestroy() {\n    this.destroyed = true;\n    this.records.clear();\n    this.dependencyMap.clear();\n  }\n\n  private assertNotDestroyed() {\n    if (this.destroyed) {\n      throw new Error(`Async injection token already destroyed.`);\n    }\n  }\n\n  private assertNotInitialized() {\n    if (this.initialized) {\n      throw new Error(`Async injection token already initialized.`);\n    }\n  }\n\n  private assertInitialized() {\n    if (this.initialized) {\n      return;\n    }\n\n    if (this.injector instanceof EnvironmentInjector) {\n      throw new Error(`Async injection not yet initialized.`);\n    } else {\n      throw new Error(\n        `Async injector provided in a component, providers can't be injected in the same injector. ` +\n          `Use directive *ngxResolveAsyncProviders to resolve them before injection.`\n      );\n    }\n  }\n\n  init(...asyncStaticProviders: AsyncStaticProvider[]) {\n    this.assertNotDestroyed();\n    this.assertNotInitialized();\n    this.initialized = true;\n\n    asyncStaticProviders.forEach((asyncStaticProvider: AsyncStaticProvider) => {\n      const { provide: injectionToken, mode } = asyncStaticProvider;\n      const existingProvider = this.records.get(injectionToken);\n      const isMulti = isMultiProvider(asyncStaticProvider);\n\n      if (existingProvider != null) {\n        if ((isMulti && !Array.isArray(existingProvider)) || (!isMulti && Array.isArray(existingProvider))) {\n          throw new Error(`${injectionToken.toString()} mixing providers.`);\n        } else if (!isMulti) {\n          throw new Error(`${injectionToken.toString()} already provided.`);\n        }\n      }\n\n      if (existingProvider == null && isMulti) {\n        this.records.set(injectionToken, [this.makeAsyncInjectableRecord(asyncStaticProvider)]);\n      } else if (Array.isArray(existingProvider)) {\n        this.records.set(injectionToken, [...existingProvider, this.makeAsyncInjectableRecord(asyncStaticProvider)]);\n      } else {\n        this.records.set(injectionToken, this.makeAsyncInjectableRecord(asyncStaticProvider));\n      }\n\n      if (mode === 'eager') {\n        this.resolve(injectionToken);\n      }\n    });\n  }\n\n  get(injectionToken: InjectionToken): T {\n    this.assertNotDestroyed();\n    this.assertInitialized();\n\n    const injectable = this.records.get(injectionToken);\n\n    if (injectable == null) {\n      if (this.parentAsyncInjector != null) {\n        return this.parentAsyncInjector.get(injectionToken);\n      }\n\n      throw new Error(`${injectionToken.toString()} not provided.`);\n    }\n\n    if (Array.isArray(injectable)) {\n      return injectable.map((record) => this.getSingleProvider(record)) as T;\n    } else {\n      return this.getSingleProvider(injectable);\n    }\n  }\n\n  private getSingleProvider(injectableRecord: AsyncInjectableRecord): T {\n    if (injectableRecord.status === 'error') {\n      throw new Error(`${injectableRecord.injectionToken.toString()} failed during its resolution.`);\n    }\n\n    if (injectableRecord.status !== 'resolved') {\n      throw new Error(`${injectableRecord.injectionToken.toString()} not yet resolved.`);\n    }\n\n    return injectableRecord.resolvedValue as T;\n  }\n\n  resolve(injectionToken: InjectionToken): Promise {\n    this.assertNotDestroyed();\n    this.assertInitialized();\n\n    const injectable = this.records.get(injectionToken);\n\n    if (injectable == null) {\n      if (this.parentAsyncInjector != null) {\n        return this.parentAsyncInjector.resolve(injectionToken);\n      }\n      return Promise.reject(`${injectionToken.toString()} not provided.`);\n    }\n\n    if (Array.isArray(injectable)) {\n      return Promise.all(injectable.map((record) => hydrate(record))) as Promise;\n    } else {\n      return hydrate(injectable);\n    }\n  }\n\n  resolveMany }>(\n    injectionTokens: T\n  ): Promise>;\n  resolveMany[]>(\n    ...injectionTokens: T\n  ): Promise>;\n  resolveMany(\n    ...injectionTokens: (InjectionToken | { [key: string]: InjectionToken })[]\n  ): Promise {\n    this.assertNotDestroyed();\n    this.assertInitialized();\n\n    if (injectionTokens.length === 0) {\n      return Promise.reject(`Provide at least one injection token to be resolved when calling resolveMany().`);\n    }\n\n    if (isInjectionTokenCollection(injectionTokens)) {\n      return this.resolveManyFromCollection(injectionTokens);\n    } else {\n      return this.resolveManyFromMap(injectionTokens[0] as { [key: string]: InjectionToken });\n    }\n  }\n\n  private resolveManyFromCollection[]>(\n    injectionTokens: T\n  ): Promise> {\n    return Promise.all(\n      injectionTokens.map((injectionToken: InjectionToken): Promise => this.resolve(injectionToken))\n    ) as Promise>;\n  }\n\n  private async resolveManyFromMap }>(\n    injectionTokens: T\n  ): Promise> {\n    const values: { [key: string]: unknown } = {};\n\n    await Promise.all(\n      Object.entries(injectionTokens).map(([key, injectionToken]) =>\n        this.resolve(injectionToken).then((value) => {\n          values[key] = value;\n        })\n      )\n    );\n\n    return values as InjectionTokenTypeMap;\n  }\n\n  async resolveAll(): Promise {\n    this.assertNotDestroyed();\n    this.assertInitialized();\n\n    const pendingInjectables: AsyncInjectableRecord[] = [...this.records.values()]\n      .flat()\n      .filter(({ status }) => status !== 'resolved');\n    await Promise.all(pendingInjectables.map((injectable) => hydrate(injectable)));\n    await this.parentAsyncInjector?.resolveAll();\n  }\n\n  private makeAsyncInjectableRecord(asyncStaticProvider: AsyncStaticProvider): AsyncInjectableRecord {\n    const envInjector = inject(EnvironmentInjector);\n    const runInContext = (fn: () => unknown) => {\n      let result: unknown;\n      runInInjectionContext(envInjector, () => (result = fn()));\n      return result;\n    };\n\n    const injectionContext: InjectionContext = {\n      // eslint-disable-next-line deprecation/deprecation\n      inject: (token: ProviderToken, options: InjectOptions | InjectFlags = InjectFlags.Default): T | null =>\n        // eslint-disable-next-line deprecation/deprecation\n        runInContext(() => inject(token, options as any)) as T,\n      resolve: (injectionToken: InjectionToken) => {\n        this.processDependency(asyncStaticProvider.provide, injectionToken);\n        return this.resolve(injectionToken);\n      },\n    };\n\n    let valuePromise: () => Promise;\n\n    if (isAsyncValueProvider(asyncStaticProvider)) {\n      valuePromise = () => asyncStaticProvider.useAsyncValue();\n    } else if (isAsyncClassProvider(asyncStaticProvider)) {\n      valuePromise = () => asyncStaticProvider.useAsyncClass().then((classType) => runInContext(() => new classType()));\n    } else {\n      valuePromise = () =>\n        asyncStaticProvider.useAsyncFactory().then((factory) => runInContext(() => factory(injectionContext)));\n    }\n\n    return {\n      injectionToken: asyncStaticProvider.provide,\n      valuePromise,\n      status: 'initial',\n      promise: null,\n      resolvedValue: null,\n    };\n  }\n\n  private processDependency(\n    dependantInjectionToken: InjectionToken,\n    dependsOnInjectionToken: InjectionToken\n  ) {\n    const dependsOn: InjectionToken[] | undefined = this.dependencyMap.get(dependantInjectionToken) ?? [];\n    dependsOn.push(dependsOnInjectionToken);\n    this.dependencyMap.set(dependantInjectionToken, dependsOn);\n\n    const cyclicDependencies = this.dependencyMap.get(dependsOnInjectionToken);\n    if (cyclicDependencies == null) {\n      return;\n    }\n\n    const dependencyChain = calculateCircularDependencyChain(this.dependencyMap, [\n      dependsOnInjectionToken,\n    ]) as InjectionToken[];\n\n    const stringifiedDependencyChain = dependencyChain.map((token) => token.toString()).join(' -> ');\n    throw new Error(`Cyclic dependency on async providers: ${stringifiedDependencyChain}`);\n  }\n}\n\nfunction hydrate(injectable: AsyncInjectableRecord): Promise {\n  if (injectable.promise) {\n    return injectable.promise;\n  }\n\n  injectable.status = 'resolving';\n\n  const promise = injectable\n    .valuePromise()\n    .then((resolvedValue) => {\n      injectable.status = 'resolved';\n      injectable.resolvedValue = resolvedValue;\n      return resolvedValue;\n    })\n    .catch((error) => {\n      injectable.status = 'error';\n\n      return error instanceof Error\n        ? Promise.reject(error)\n        : Promise.reject(`${injectable.injectionToken.toString()} failed resolution: ${error}`);\n    });\n\n  injectable.promise = promise;\n\n  return promise;\n}\n\nfunction isInjectionTokenCollection(\n  injectionTokens: (InjectionToken | { [key: string]: InjectionToken })[]\n): injectionTokens is InjectionToken[] {\n  return injectionTokens.every((injectionToken) => injectionToken instanceof InjectionToken);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AsyncMultiProvider.html":{"url":"interfaces/AsyncMultiProvider.html","title":"interface - AsyncMultiProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AsyncMultiProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/interfaces/async-multi-provider.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            multi\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        multi\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        multi:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface AsyncMultiProvider {\n  multi: true;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AsyncProviderConfig.html":{"url":"interfaces/AsyncProviderConfig.html","title":"interface - AsyncProviderConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AsyncProviderConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/interfaces/async-provider-config.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            mode\n                                        \n                                \n                                \n                                        \n                                            provide\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"lazy\" | \"eager\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"lazy\" | \"eager\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If eager, the async injector will start resolving as soon as the environment injector initializes.\nIf lazy (default), it will wait until the injection token is resolved.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provide\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provide:     InjectionToken\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     InjectionToken\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\n\nexport interface AsyncProviderConfig {\n  provide: InjectionToken;\n\n  /**\n   * If `eager`, the async injector will start resolving as soon as the environment injector initializes.\n   * If `lazy` (default), it will wait until the injection token is resolved.\n   */\n  mode?: 'lazy' | 'eager';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AsyncValueMultiProvider.html":{"url":"interfaces/AsyncValueMultiProvider.html","title":"interface - AsyncValueMultiProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AsyncValueMultiProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/interfaces/async-value-provider.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AsyncProviderConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            useAsyncValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        useAsyncValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useAsyncValue:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ArrayItemType } from './array-item';\nimport { AsyncMultiProvider } from './async-multi-provider';\nimport { AsyncProviderConfig } from './async-provider-config';\nimport { AsyncStaticProvider } from './async-static-provider';\n\nexport interface AsyncValueProvider extends AsyncProviderConfig {\n  useAsyncValue: () => Promise;\n}\n\nexport interface AsyncValueMultiProvider extends AsyncProviderConfig, AsyncMultiProvider {\n  useAsyncValue: () => Promise>;\n}\n\nexport function isAsyncValueProvider(\n  asyncStaticProvider: AsyncStaticProvider\n): asyncStaticProvider is AsyncValueProvider | AsyncValueMultiProvider {\n  return (asyncStaticProvider as any).useAsyncValue != null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AsyncValueProvider.html":{"url":"interfaces/AsyncValueProvider.html","title":"interface - AsyncValueProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AsyncValueProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/interfaces/async-value-provider.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AsyncProviderConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            useAsyncValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        useAsyncValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useAsyncValue:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ArrayItemType } from './array-item';\nimport { AsyncMultiProvider } from './async-multi-provider';\nimport { AsyncProviderConfig } from './async-provider-config';\nimport { AsyncStaticProvider } from './async-static-provider';\n\nexport interface AsyncValueProvider extends AsyncProviderConfig {\n  useAsyncValue: () => Promise;\n}\n\nexport interface AsyncValueMultiProvider extends AsyncProviderConfig, AsyncMultiProvider {\n  useAsyncValue: () => Promise>;\n}\n\nexport function isAsyncValueProvider(\n  asyncStaticProvider: AsyncStaticProvider\n): asyncStaticProvider is AsyncValueProvider | AsyncValueMultiProvider {\n  return (asyncStaticProvider as any).useAsyncValue != null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InjectionContext.html":{"url":"interfaces/InjectionContext.html","title":"interface - InjectionContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InjectionContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/interfaces/injection-context.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            inject\n                                        \n                                \n                                \n                                        \n                                            resolve\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inject:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resolve\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        resolve:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { inject } from '@angular/core';\n\nimport { AsyncInjector } from '../injector/async-injector';\n\nexport interface InjectionContext {\n  // eslint-disable-next-line deprecation/deprecation\n  inject: typeof inject;\n  resolve: AsyncInjector['resolve'];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ResolveAsyncProvidersDirective.html":{"url":"directives/ResolveAsyncProvidersDirective.html","title":"directive - ResolveAsyncProvidersDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  ResolveAsyncProvidersDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/directives/resolve-async-providers.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                This directive can be used to render a template after certain async providers have resolved. It can be useful to delay loading them as much as possible.\nThe template can safely inject those resolved async providers.\nWhen no parameters are passed, it will load all async injectors in the injector hierarchy:\n@Component({\n  template: ``,\n  providers: [provideAsync({ provide: STRING_INJECTOR_TOKEN, useAsyncValue: stringAsyncFactory })],\n  imports: [ResolveAsyncProvidersDirective, ChildComponent],\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nclass ParentComponent {}\n\n@Component({\n  selector: 'child-component',\n  template: `Async injector value: {{ injectedText }}`,\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nclass ChildComponent {\n  readonly injectedText = inject(STRING_INJECTOR_TOKEN);\n}Additionally, it also supports a map of async provider tokens. Only those will be resolved instead of all. The resolved async providers\nare available as the context for the structural directive. Example:\n@Component({\n  template: `\n    \n    \n\n    \n    \n  `,\n  providers: [provideAsync({ provide: STRING_INJECTOR_TOKEN, useAsyncValue: stringAsyncFactory })],\n  imports: [ResolveAsyncProvidersDirective, ChildComponent],\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nclass ParentComponent {\n  readonly stringInjectionToken = STRING_INJECTOR_TOKEN;\n}\n\n@Component({\n  selector: 'child-component',\n  template: `Async injector value: {{ inputText }}`,\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nclass ChildComponent {\n  @Input() inputText!: string;\n}\n            \n\n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        ng-template[ngxResolveAsyncProviders]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                ngTemplateContextGuard\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxResolveAsyncProviders\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxResolveAsyncProviders\n                    \n                \n                \n                    \n                        Type :     TProviders | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in src/lib/directives/resolve-async-providers.directive.ts:99\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        ngTemplateContextGuard\n                        \n                    \n                \n            \n            \n                \n                    \n                    ngTemplateContextGuard(_: ResolveAsyncProvidersDirective, context)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/directives/resolve-async-providers.directive.ts:103\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                ResolveAsyncProvidersDirective\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResolveAsyncProvidersContext\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import {\n  ChangeDetectorRef,\n  Directive,\n  inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n  InjectionToken,\n} from '@angular/core';\n\nimport { AsyncInjector } from '../injector/async-injector';\nimport { InjectionTokenTypeMap } from '../interfaces/injection-token-type';\nimport { ASYNC_INJECTOR_INITIALIZER } from '../tokens/async-injector-initializer.token';\n\n/**\n * This directive can be used to render a template after certain async providers have resolved. It can be useful to delay loading them as much as possible.\n * The template can safely inject those resolved async providers.\n *\n * @example\n *\n * When no parameters are passed, it will load _all_ async injectors in the injector hierarchy:\n *\n * ```ts\n * @Component({\n *   template: ``,\n *   providers: [provideAsync({ provide: STRING_INJECTOR_TOKEN, useAsyncValue: stringAsyncFactory })],\n *   imports: [ResolveAsyncProvidersDirective, ChildComponent],\n *   standalone: true,\n *   changeDetection: ChangeDetectionStrategy.OnPush,\n * })\n * class ParentComponent {}\n *\n * @Component({\n *   selector: 'child-component',\n *   template: `Async injector value: {{ injectedText }}`,\n *   standalone: true,\n *   changeDetection: ChangeDetectionStrategy.OnPush,\n * })\n * class ChildComponent {\n *   readonly injectedText = inject(STRING_INJECTOR_TOKEN);\n * }\n * ```\n *\n * @example\n *\n * Additionally, it also supports a map of async provider tokens. Only those will be resolved instead of _all_. The resolved async providers\n * are available as the context for the structural directive. Example:\n *\n * ```ts\n * @Component({\n *   template: `\n *     \n *     \n *\n *     \n *     \n *   `,\n *   providers: [provideAsync({ provide: STRING_INJECTOR_TOKEN, useAsyncValue: stringAsyncFactory })],\n *   imports: [ResolveAsyncProvidersDirective, ChildComponent],\n *   standalone: true,\n *   changeDetection: ChangeDetectionStrategy.OnPush,\n * })\n * class ParentComponent {\n *   readonly stringInjectionToken = STRING_INJECTOR_TOKEN;\n * }\n *\n * @Component({\n *   selector: 'child-component',\n *   template: `Async injector value: {{ inputText }}`,\n *   standalone: true,\n *   changeDetection: ChangeDetectionStrategy.OnPush,\n * })\n * class ChildComponent {\n *   @Input() inputText!: string;\n * }\n * ```\n */\n@Directive({\n  selector: 'ng-template[ngxResolveAsyncProviders]',\n  standalone: true,\n})\nexport class ResolveAsyncProvidersDirective }>\n  implements OnInit, OnDestroy\n{\n  private readonly asyncInjector = inject(AsyncInjector);\n  private readonly _asyncInjectorInitializer = inject(ASYNC_INJECTOR_INITIALIZER);\n  private readonly viewContainerRef = inject(ViewContainerRef);\n  private readonly templateRef = inject(TemplateRef);\n  private readonly cdr = inject(ChangeDetectorRef);\n\n  @Input('ngxResolveAsyncProviders') providers: TProviders | null = null;\n\n  private destroyed = false;\n\n  static ngTemplateContextGuard }>(\n    _: ResolveAsyncProvidersDirective,\n    context: unknown\n  ): context is ResolveAsyncProvidersContext {\n    return true;\n  }\n\n  ngOnInit() {\n    if (this.providers === null) {\n      this.asyncInjector.resolveAll().then(() => this.renderTemplate());\n    } else {\n      this.asyncInjector\n        .resolveMany(this.providers)\n        .then((providersValueMap: InjectionTokenTypeMap) => this.renderTemplate(providersValueMap));\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed = true;\n  }\n\n  private renderTemplate(providersValueMap?: InjectionTokenTypeMap) {\n    if (this.destroyed) {\n      return;\n    }\n\n    if (providersValueMap == null) {\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\n    } else {\n      const context: ResolveAsyncProvidersContext = {\n        $implicit: providersValueMap,\n        ...providersValueMap,\n      };\n      this.viewContainerRef.createEmbeddedView(this.templateRef, context);\n    }\n\n    this.cdr.markForCheck();\n  }\n}\n\nexport type ResolveAsyncProvidersContext }> = {\n  $implicit: InjectionTokenTypeMap;\n} & InjectionTokenTypeMap;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TypeWithoutConstructorParams.html":{"url":"interfaces/TypeWithoutConstructorParams.html","title":"interface - TypeWithoutConstructorParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TypeWithoutConstructorParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/interfaces/type-without-constructor-params.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Function\n            \n\n\n\n\n    \n\n\n    \n        export interface TypeWithoutConstructorParams extends Function {\n  new (): T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nThis file was generated using @jscutlery/semver.\n3.0.4 (2024-02-07)\n3.0.3 (2024-02-07)\n3.0.2 (2024-02-07)\n3.0.1 (2024-02-02)\nBug Fixes\n\nupgrade nx to v17.2.0 (#1099) (85f83e1)\n\n3.0.0 (2023-12-03)\n⚠ BREAKING CHANGES\n\nUpgrade to Angular v17\n\nFeatures\n\n:arrow_up: upgrade to Angular v17 (58e28fa)\n\nBug Fixes\n\ndeps: ⬆️ update nx monorepo to v17 (major) (#1013) (009816c)\n\n2.0.2 (2023-07-27)\n2.0.1 (2023-07-25)\n2.0.0 (2023-05-16)\n⚠ BREAKING CHANGES\n\ndeps: Upgrade to Angular and Nx 16\n\nFeatures\n\n:package: rescope to @nx (#681) (#682) (e2fd0a8)\ndeps: :arrow_up: update monorepo to Angular and Nx 16 (#679) (733a9f8)\n\n1.0.6 (2023-04-17)\n1.0.5 (2023-04-17)\n1.0.4 (2023-04-05)\n1.0.3 (2023-04-04)\n1.0.2 (2023-03-15)\nBug Fixes\n\nngx-async-injector: :memo: add playground to README (5234f18)\n\n1.0.1 (2023-03-15)\nBug Fixes\n\nngx-async-injector: :package: widen deps and fix main entry point (#527) (f23e180)\n\n1.0.0 (2023-03-15)\nFeatures\n\n:tada: initial release\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/directives/resolve-async-providers.directive.ts\n            \n            directive\n            ResolveAsyncProvidersDirective\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/lib/functions/is-multi-provider.ts\n            \n            function\n            isMultiProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/functions/resolve-many.ts\n            \n            function\n            resolveMany\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/functions/resolve-many.ts\n            \n            function\n            resolveMany\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/functions/resolve-many.ts\n            \n            function\n            resolveMany\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/functions/resolve.ts\n            \n            variable\n            resolve\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/injector/async-injector.ts\n            \n            injectable\n            AsyncInjector\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/lib/injector/async-injector.ts\n            \n            interface\n            AsyncInjectableRecord\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/lib/injector/async-injector.ts\n            \n            function\n            hydrate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/injector/async-injector.ts\n            \n            function\n            isInjectionTokenCollection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/interfaces/async-class-provider.ts\n            \n            interface\n            AsyncClassMultiProvider\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/interfaces/async-class-provider.ts\n            \n            interface\n            AsyncClassProvider\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/interfaces/async-class-provider.ts\n            \n            function\n            isAsyncClassProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/interfaces/async-factory-provider.ts\n            \n            interface\n            AsyncFactoryMultiProvider\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/interfaces/async-factory-provider.ts\n            \n            interface\n            AsyncFactoryProvider\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/interfaces/async-factory-provider.ts\n            \n            function\n            isAsyncFactoryProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/interfaces/async-multi-provider.ts\n            \n            interface\n            AsyncMultiProvider\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/interfaces/async-provider-config.ts\n            \n            interface\n            AsyncProviderConfig\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/lib/interfaces/async-value-provider.ts\n            \n            interface\n            AsyncValueMultiProvider\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/interfaces/async-value-provider.ts\n            \n            interface\n            AsyncValueProvider\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/interfaces/async-value-provider.ts\n            \n            function\n            isAsyncValueProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/interfaces/injection-context.ts\n            \n            interface\n            InjectionContext\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/interfaces/type-without-constructor-params.ts\n            \n            interface\n            TypeWithoutConstructorParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/providers/provide-async.function.ts\n            \n            function\n            provideAsync\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/providers/provide-async.function.ts\n            \n            function\n            provideAsync\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/providers/provide-async.function.ts\n            \n            function\n            provideAsync\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/tokens/async-injector-initializer.token.ts\n            \n            variable\n            ASYNC_INJECTOR_INITIALIZER\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.5.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : ^17.0.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            hydrate   (src/.../async-injector.ts)\n                        \n                        \n                            isAsyncClassProvider   (src/.../async-class-provider.ts)\n                        \n                        \n                            isAsyncFactoryProvider   (src/.../async-factory-provider.ts)\n                        \n                        \n                            isAsyncValueProvider   (src/.../async-value-provider.ts)\n                        \n                        \n                            isInjectionTokenCollection   (src/.../async-injector.ts)\n                        \n                        \n                            isMultiProvider   (src/.../is-multi-provider.ts)\n                        \n                        \n                            provideAsync   (src/.../provide-async.function.ts)\n                        \n                        \n                            provideAsync   (src/.../provide-async.function.ts)\n                        \n                        \n                            provideAsync   (src/.../provide-async.function.ts)\n                        \n                        \n                            resolveMany   (src/.../resolve-many.ts)\n                        \n                        \n                            resolveMany   (src/.../resolve-many.ts)\n                        \n                        \n                            resolveMany   (src/.../resolve-many.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/injector/async-injector.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        hydrate\n                        \n                    \n                \n            \n            \n                \nhydrate(injectable: AsyncInjectableRecord)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    injectable\n                                    \n                                                AsyncInjectableRecord\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isInjectionTokenCollection\n                        \n                    \n                \n            \n            \n                \nisInjectionTokenCollection(injectionTokens)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    injectionTokens\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InjectionToken<>[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/interfaces/async-class-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isAsyncClassProvider\n                        \n                    \n                \n            \n            \n                \nisAsyncClassProvider(asyncStaticProvider: AsyncStaticProvider)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    asyncStaticProvider\n                                    \n                                                AsyncStaticProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     AsyncClassProvider | AsyncClassMultiProvider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/interfaces/async-factory-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isAsyncFactoryProvider\n                        \n                    \n                \n            \n            \n                \nisAsyncFactoryProvider(asyncStaticProvider: AsyncStaticProvider)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    asyncStaticProvider\n                                    \n                                                AsyncStaticProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     AsyncFactoryProvider | AsyncFactoryMultiProvider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/interfaces/async-value-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isAsyncValueProvider\n                        \n                    \n                \n            \n            \n                \nisAsyncValueProvider(asyncStaticProvider: AsyncStaticProvider)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    asyncStaticProvider\n                                    \n                                                AsyncStaticProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     AsyncValueProvider | AsyncValueMultiProvider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/functions/is-multi-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isMultiProvider\n                        \n                    \n                \n            \n            \n                \nisMultiProvider(asyncStaticProvider: AsyncStaticProvider)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    asyncStaticProvider\n                                    \n                                                AsyncStaticProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     AsyncValueMultiProvider | AsyncClassMultiProvider | AsyncFactoryMultiProvider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/providers/provide-async.function.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        provideAsync\n                        \n                    \n                \n            \n            \n                \nprovideAsync(asyncStaticProvider: AsyncStaticProvider)\n                \n            \n\n\n\n\n            \n                \n                    It is used to declare one or more async providers. For each provider, it requires the token, and then an async function that can be useAsyncValue, useAsyncClass or useAsyncFactory. It supports multi providers as well. It can be used in environment injectors, modules, components and directives. If multiple providers need to be declared in the same injector, use a single provideAsync function with multiple providers instead of using it multiple times.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    asyncStaticProvider\n                                    \n                                                AsyncStaticProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            Example of declaring a single async provider:\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideAsync({\n      provide: MY_SERVICE,\n      useAsyncClass: () =&gt; import(&#39;./my-service&#39;).then((x) =&gt; x.MyService),\n    }),\n  ],\n});\n\n                        \n                        \n                            Example of declaring multiple providers, each one with different async functions:\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideAsync(\n      {\n        provide: CLASS_PROVIDER,\n        useAsyncClass: () =&gt; import(&#39;./first-service&#39;).then((x) =&gt; x.FirstService),\n      },\n      {\n        provide: VALUE_PROVIDER,\n        useAsyncValue: () =&gt; import(&#39;./value&#39;).then((x) =&gt; x.value),\n      },\n      {\n        provide: FACTORY_PROVIDER,\n        useAsyncFactory: () =&gt; import(&#39;./factory&#39;).then((x) =&gt; x.providerFactory),\n      }\n    ),\n  ],\n});\n\n// first-service.ts\nexport class FirstService {}\n\n// value.ts\nexport const value = &#39;value&#39;;\n\n// factory.ts\nexport async function providerFactory() {\n  return await Promise.resolve(&#39;value&#39;);\n}\n\n                        \n                        \n                            Multi providers can also be declared as it happens with Angular:\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideAsync(\n      {\n        provide: VALUE_PROVIDER,\n        useAsyncValue: () =&gt; import(&#39;./first-value&#39;).then((x) =&gt; x.value),\n        multi: true\n      },\n      {\n        provide: VALUE_PROVIDER,\n        useAsyncValue: () =&gt; import(&#39;./second-value&#39;).then((x) =&gt; x.value),\n        multi: true\n      },\n    ),\n  ],\n});\n\n                        \n                        \n                            Finally, the lazy load behavior can be controlled by the mode flag. By default it is lazy, which means it won&#39;t be resolved until requested. eager on the contrary will trigger the load on declaration, even though resolvers are still needed to wait for completion. Example:\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideAsync(\n      {\n        provide: VALUE_PROVIDER,\n        useAsyncValue: () =&gt; import(&#39;./first-value&#39;).then((x) =&gt; x.value),\n        mode: &#39;eager&#39;\n      },\n    ),\n  ],\n});\n\n                        \n                        \n                            When using a factory provider, the function itself can be async. Regular inject function from Angular can be used before executing any async code since the injection context is preserved, however it can&#39;t be used afterwards. To solve that problem, and also to protect against cyclic dependencies between async providers, the factory provider function is called with a context that exposes two functions that are self explanatory, inject and resolve. Example:\nimport { InjectionContext } from &#39;@nx-squeezer/ngx-async-injector&#39;;\n\nexport async function providerFactory({ inject, resolve }: InjectionContext): Promise&lt;string&gt; {\n  const firstString = await resolve(FIRST_INJECTION_TOKEN);\n  const secondString = inject(SECOND_INJECTION_TOKEN);\n  return `${firstString} ${secondString}`;\n}\n\n                        \n                    \n                    \n                        Returns :     StaticProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        provideAsync\n                        \n                    \n                \n            \n            \n                \nprovideAsync(asyncStaticProviders: AsyncProviderTypes)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    asyncStaticProviders\n                                    \n                                                AsyncProviderTypes\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     StaticProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        provideAsync\n                        \n                    \n                \n            \n            \n                \nprovideAsync(...asyncStaticProviders: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    asyncStaticProviders\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     StaticProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/functions/resolve-many.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        resolveMany\n                        \n                    \n                \n            \n            \n                \nresolveMany(injectionTokens: T)\n                \n            \n\n\n\n\n            \n                \n                    resolve and resolveMany functions can be used in route resolvers to ensure that certain async providers are resolved before a route loads.\nThey could be used in other places as needed, since they return a promise that resolves when the async provider is resolved and returns its value.\nIt can be compared to Angular's inject function, but for async providers.\nresolveMany supports either a list of async provider tokens, or a map of key-value pairs with the value being the token.\nThe resolved value will have the same shape, either an array or a map of the resolved async providers.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    injectionTokens\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            export const routes: Route[] = [\n  {\n    path: &#39;&#39;,\n    loadComponent: () =&gt; import(&#39;./route.component&#39;),\n    providers: [\n      provideAsync(\n        {\n          provide: CLASS_PROVIDER,\n          useAsyncClass: () =&gt; import(&#39;./first-service&#39;).then((x) =&gt; x.FirstService),\n        },\n        {\n          provide: VALUE_PROVIDER,\n          useAsyncValue: () =&gt; import(&#39;./value&#39;).then((x) =&gt; x.value),\n        }\n      ),\n    ],\n    resolve: {\n      asyncProviders: () =&gt; resolveMany(CLASS_PROVIDER, VALUE_PROVIDER),\n    },\n  }\n];\n\n                        \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolveMany\n                        \n                    \n                \n            \n            \n                \nresolveMany(...injectionTokens: T)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    injectionTokens\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolveMany\n                        \n                    \n                \n            \n            \n                \nresolveMany(...injectionTokens: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    injectionTokens\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n@nx-squeezer/ngx-async-injector \n     \n\nMotivation\nShow me the code\nExamples\nResolve using route's resolver\nResolve using a structural directive\nResolve configuration from API\n\n\nAPI documentation\nprovideAsync function\nresolve and resolveMany\n*ngxResolveAsyncProviders structural directive\n\n\nInstallation\n\nMotivation\nAngular's dependency injection (DI) system is designed to be synchronous, since having asynchronous providers would make component rendering asynchronous and break existing renderer.\nAs of today it is not possible to lazy load data asynchronously and consume it through a provider. The only option recommended by Angular when it needs to be loaded before the app initializes is using APP_INITIALIZER. However, it has several known cons because it is blocking and delays rendering the whole component tree and loading routes.\nAnother common problem is the initial payload of the main bundle caused by needing to declare providers in root. When a provider is needed by various features it usually needs to be declared in the root injector, increasing the initial bundle size. It would be great that services could be declared in the root component, but lazy loaded when needed. It is true that using providedIn: root could be used in many scenarios, but there are others where using async import() of a dependency would be more useful, such as code splitting and fine grained lazy loading.\nFor the scenarios described above, having a way to declare asynchronous providers, either by loading data from the server and later instantiating a service, or to lazy load them using import(), could help and give flexibility to implementers. This particular problem is what @nx-squeezer/ngx-async-injector solves.\nShow me the code\nThe API that this library offers is very much similar to Angular's DI. Check this code as an example:\n// main.ts\nbootstrapApplication(AppComponent, {\n  providers: [\n    {\n      provide: MY_SERVICE,\n      useClass: MyService,\n    },\n  ],\n});\n\n// component\nclass Component {\n  private readonly myService = inject(MY_SERVICE);\n}Could be made asynchronous and lazy loaded using provideAsync():\n// main.ts\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideAsync({\n      provide: MY_SERVICE,\n      useAsyncClass: () => import('./my-service').then((x) => x.MyService),\n    }),\n  ],\n});\n\n// component\nclass Component {\n  private readonly myService = inject(MY_SERVICE);\n}That's it! Declaration is almost identical, and consumption is the same. But wait, when is the async provided actually loaded and resolved?\nIt needs another piece that triggers it: async provider resolvers. Check this diagram:\n\nAsync providers need to be resolved before being used, and that is a responsibility of the application. It can be done while loading a route using a route resolver, or with a structural directive that will delay rendering until they are loaded.\nCheck this online Stackblitz playground with a live demo.\nExamples\nResolve using route's resolver\nexport const appRoutes: Route[] = [\n  {\n    path: '',\n    loadComponent: () => import('./route.component'),\n    resolve: {\n      asyncProviders: () => resolveMany(MY_SERVICE),\n    },\n  },\n];In this case, the async provider will be resolved while the route loads, and the inside the component MY_SERVICE can be injected.\nResolve using a structural directive\n@Component({\n  imports: [ResolveAsyncProvidersDirective, ChildComponent],\n  template: `  `,\n  standalone: true,\n})\nexport default class ParentComponent {\n  readonly MY_SERVICE = MY_SERVICE;\n}In this case, the async provider will be resolved when the parent component renders, and once completed the child component will be rendered having MY_SERVICE available.\nResolve configuration from API\n// Instead of using the common approach of APP_INITIALIZER, which blocks loading and rendering until resolved:\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideHttpClient(),\n    {\n      provide: APP_INITIALIZER,\n      useFactory: () => inject(HttpClient).get('/config'),\n      multi: true,\n    },\n  ],\n});\n\n// You could declare it with an async provider, which will be resolved on demand without blocking,\n// and yet available through DI:\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideHttpClient(),\n    {\n      provide: CONFIG_TOKEN,\n      useAsyncFactory: () => firstValueFrom(inject(HttpClient).get('/config')),\n    },\n  ],\n});API documentation\nCheck the full documentation to see all available features.\nprovideAsync function\nIt is used to declare one or more async providers. For each provider, it requires the token, and then an async function that can be useAsyncValue, useAsyncClass or useAsyncFactory. It supports multi providers as well. It can be used in environment injectors, modules, components and directives. If multiple providers need to be declared in the same injector, use a single provideAsync function with multiple providers instead of using it multiple times.\nAsync provider tokens are regular Angular injection tokens typed with the resolved value of the async provider.\nExample of declaring a single async provider:\nexport const MY_SERVICE = new InjectionToken('my-service-token');\n\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideAsync({\n      provide: MY_SERVICE,\n      useAsyncClass: () => import('./my-service').then((x) => x.MyService),\n    }),\n  ],\n});Example of declaring multiple providers, each one with different async functions:\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideAsync(\n      {\n        provide: CLASS_PROVIDER,\n        useAsyncClass: () => import('./first-service').then((x) => x.FirstService),\n      },\n      {\n        provide: VALUE_PROVIDER,\n        useAsyncValue: () => import('./value').then((x) => x.value),\n      },\n      {\n        provide: FACTORY_PROVIDER,\n        useAsyncFactory: () => import('./factory').then((x) => x.providerFactory),\n      }\n    ),\n  ],\n});\n\n// first-service.ts\nexport class FirstService {}\n\n// value.ts\nexport const value = 'value';\n\n// factory.ts\nexport async function providerFactory() {\n  return await Promise.resolve('value');\n}Multi providers can also be declared as it happens with Angular:\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideAsync(\n      {\n        provide: VALUE_PROVIDER,\n        useAsyncValue: () => import('./first-value').then((x) => x.value),\n        multi: true,\n      },\n      {\n        provide: VALUE_PROVIDER,\n        useAsyncValue: () => import('./second-value').then((x) => x.value),\n        multi: true,\n      }\n    ),\n  ],\n});Finally, the lazy load behavior can be controlled by the mode flag. By default it is lazy, which means it won't be resolved until requested. eager on the contrary will trigger the load on declaration, even though resolvers are still needed to wait for completion. Example:\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideAsync({\n      provide: VALUE_PROVIDER,\n      useAsyncValue: () => import('./first-value').then((x) => x.value),\n      mode: 'eager',\n    }),\n  ],\n});When using a factory provider, the function itself can be async. Regular inject function from Angular can be used before executing any async code since the injection context is preserved, however it can't be used afterwards. To solve that problem, and also to protect against cyclic dependencies between async providers, the factory provider function is called with a context that exposes two functions that are self explanatory, inject and resolve. Example:\nimport { InjectionContext } from '@nx-squeezer/ngx-async-injector';\n\nexport async function providerFactory({ inject, resolve }: InjectionContext): Promise {\n  const firstString = await resolve(FIRST_INJECTION_TOKEN);\n  const secondString = inject(SECOND_INJECTION_TOKEN);\n  return `${firstString} ${secondString}`;\n}resolve and resolveMany\nresolve and resolveMany functions can be used in route resolvers to ensure that certain async providers are resolved before a route loads. They could be used in other places as needed, since they return a promise that resolves when the async provider is resolved and returns its value. It can be compared to Angular's inject function, but for async providers.\nExample of how to use it in a route resolver:\nexport const routes: Route[] = [\n  {\n    path: '',\n    loadComponent: () => import('./route.component'),\n    providers: [\n      provideAsync(\n        {\n          provide: CLASS_PROVIDER,\n          useAsyncClass: () => import('./first-service').then((x) => x.FirstService),\n        },\n        {\n          provide: VALUE_PROVIDER,\n          useAsyncValue: () => import('./value').then((x) => x.value),\n        }\n      ),\n    ],\n    resolve: {\n      asyncProviders: () => resolveMany(CLASS_PROVIDER, VALUE_PROVIDER),\n    },\n  },\n];*ngxResolveAsyncProviders structural directive\nThis directive can be used to render a template after certain async providers have resolved. It can be useful to delay loading them as much as possible. The template can safely inject those resolved async providers.\nWhen no parameters are passed, it will load all async injectors in the injector hierarchy:\n@Component({\n  template: ``,\n  providers: [provideAsync({ provide: STRING_INJECTOR_TOKEN, useAsyncValue: stringAsyncFactory })],\n  imports: [ResolveAsyncProvidersDirective, ChildComponent],\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nclass ParentComponent {}\n\n@Component({\n  selector: 'child-component',\n  template: `Async injector value: {{ injectedText }}`,\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nclass ChildComponent {\n  readonly injectedText = inject(STRING_INJECTOR_TOKEN);\n}Additionally, it also supports a map of async provider tokens. Only those will be resolved instead of all. The resolved async providers are available as the context for the structural directive. Example:\n@Component({\n  template: `\n    \n    \n\n    \n    \n  `,\n  providers: [provideAsync({ provide: STRING_INJECTOR_TOKEN, useAsyncValue: stringAsyncFactory })],\n  imports: [ResolveAsyncProvidersDirective, ChildComponent],\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nclass ParentComponent {\n  readonly stringInjectionToken = STRING_INJECTOR_TOKEN;\n}\n\n@Component({\n  selector: 'child-component',\n  template: `Async injector value: {{ inputText }}`,\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nclass ChildComponent {\n  @Input() inputText!: string;\n}Installation\nDo you like this library? Go ahead and use it! It is production ready, with 100% code coverage, protected by integration tests, and uses semantic versioning. To install it:\nnpm install @nx-squeezer/ngx-async-injector\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 3.0.4\n        \n            Description : Angular library that provides async dependency injection\n        \n            Keywords : angular, async, DI, dependency injection, providers\n        \n            Homepage : https://github.com/nx-squeezer/squeezer/tree/main/packages/ngx-async-injector\n        \n            Bugs : https://github.com/nx-squeezer/squeezer/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/nx-squeezer/squeezer.git\n        \n            Author : samuelfernandez\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArrayItemType   (src/.../array-item.ts)\n                        \n                        \n                            AsyncFactoryWithInjectionContext   (src/.../async-factory-provider.ts)\n                        \n                        \n                            AsyncProviderTypes   (src/.../async-provider-types.ts)\n                        \n                        \n                            AsyncStaticProvider   (src/.../async-static-provider.ts)\n                        \n                        \n                            InjectionTokenType   (src/.../injection-token-type.ts)\n                        \n                        \n                            InjectionTokenTypeCollection   (src/.../injection-token-type.ts)\n                        \n                        \n                            InjectionTokenTypeMap   (src/.../injection-token-type.ts)\n                        \n                        \n                            ResolveAsyncProvidersContext   (src/.../resolve-async-providers.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/interfaces/array-item.ts\n    \n    \n        \n            \n                \n                    \n                    ArrayItemType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/lib/interfaces/async-factory-provider.ts\n    \n    \n        \n            \n                \n                    \n                    AsyncFactoryWithInjectionContext\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/lib/interfaces/async-provider-types.ts\n    \n    \n        \n            \n                \n                    \n                    AsyncProviderTypes\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/lib/interfaces/async-static-provider.ts\n    \n    \n        \n            \n                \n                    \n                    AsyncStaticProvider\n                \n            \n            \n                \n                        AsyncValueProvider | AsyncFactoryProvider | AsyncClassProvider | AsyncValueMultiProvider | AsyncFactoryMultiProvider | AsyncClassMultiProvider\n\n                \n            \n        \n    \n    src/lib/interfaces/injection-token-type.ts\n    \n    \n        \n            \n                \n                    \n                    InjectionTokenType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    InjectionTokenTypeCollection\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    InjectionTokenTypeMap\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/lib/directives/resolve-async-providers.directive.ts\n    \n    \n        \n            \n                \n                    \n                    ResolveAsyncProvidersContext\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ASYNC_INJECTOR_INITIALIZER   (src/.../async-injector-initializer.token.ts)\n                        \n                        \n                            resolve   (src/.../resolve.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/tokens/async-injector-initializer.token.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ASYNC_INJECTOR_INITIALIZER\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('ngx-async-injector.async-injector-initializer')\n                    \n                \n\n\n        \n    \n\n    src/lib/functions/resolve.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (injectionToken: InjectionToken): Promise => {\n  return inject(AsyncInjector).resolve(injectionToken);\n}\n                    \n                \n\n            \n                \n                    resolve and resolveMany functions can be used in route resolvers to ensure that certain async providers are resolved before a route loads.\nThey could be used in other places as needed, since they return a promise that resolves when the async provider is resolved and returns its value.\nIt can be compared to Angular's inject function, but for async providers.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
